{"version":3,"sources":["./styles.scss","./node_modules/@angular/material/_theming.scss","./app/theme/style/_reboot.scss","./app/theme/style/_variables.scss","./app/theme/style/_misc.scss","./app/theme/style/_badge.scss","./app/theme/style/_scrollbar.scss","./app/theme/style/_colors.scss","./node_modules/photoviewer/dist/photoviewer.css","./node_modules/@ng-matero/extensions/button/button-loading.scss","./node_modules/@ng-matero/extensions/alert/_alert-theme.scss","./node_modules/@ng-matero/extensions/data-grid/_grid-theme.scss","./node_modules/@ng-matero/extensions/data-grid/column-resize/_column-resize.scss","./node_modules/@ng-matero/extensions/loader/_loader-theme.scss","./node_modules/@ng-matero/extensions/popover/_popover-theme.scss","./node_modules/@ng-matero/extensions/progress/_progress-theme.scss","./node_modules/@ng-matero/extensions/select/_select-theme.scss","./node_modules/@ng-matero/extensions/split-pane/_split-theme.scss","./node_modules/@ng-matero/extensions/tooltip/_tooltip-theme.scss","./node_modules/@mat-datetimepicker/core/datetimepicker/datetimepicker-theme.scss","./app/theme/style/_reboot-theme.scss","./app/theme/header/_header-theme.scss","./app/theme/sidebar/_sidebar-theme.scss","./app/theme/sidemenu/_sidemenu-theme.scss","./app/theme/topmenu/_topmenu-theme.scss","./app/theme/customizer/_customizer-theme.scss","./app/shared/components/error-code/_error-code-theme.scss","./styles/custom/_table-theme.scss","./styles/custom/_material.scss","./styles/custom/_table.scss","./styles/grid/_grid.scss","./styles/grid/_mixins.scss","./app/theme/style/_breakpoints.scss","./styles/helpers/_icon.scss","./styles/helpers/_mixins.scss","./styles/helpers/_api.scss","./node_modules/ngx-toastr/toastr.css","./styles/plugins/_ngx-toastr.scss"],"names":[],"mappings":"AAAA;ACu0DA;AA+IA;AAobA;AAmwDA;AA6CA;ACxrIA;EACE;EACA;EACA,8GCcuB;EDbvB;EACA;EACA;EACA;AFKF;AEFA;;EAEE;EACA;EACA;AFKF;AEFA;;;EAGE;AFKF;AEFA;;;EAGE;EACA;AFKF;AEFA;;;;;EAKE;EACA;EACA;EACA;AFKF;AEFA;;;;EAIE,qCC3BsB;AHgCxB;AEFA;EACE;EACA;EACA;AFKF;AEFA;EACE;AFKF;AI7DA;EACE;EACA;AJgEF;AI5DA;EACE;EACA;AJ+DF;AI5DA;ECXE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AL2EF;AMtFE;EACE;EACA;ANyFJ;AMtFE;EAEE;EACA;EACA;EACA;EACA;ANuFJ;AMpFE;EACE;ANsFJ;AMnFE;EACE;EACA;ANqFJ;AMlFE;EACE;ANoFJ;AMjFE;EACE;ANmFJ;AM9EE;EACE;EACA;ANiFJ;AM9EE;EACE;EACA;ANgFJ;AOjHU;EACE;APoHZ;AOrHU;EACE;APwHZ;AOzHU;EACE;AP4HZ;AO7HU;EACE;APgIZ;AOjIU;EACE;APoIZ;AOrIU;EACE;APwIZ;AOzIU;EACE;AP4IZ;AO7IU;EACE;APgJZ;AOjJU;EACE;APoJZ;AOrJU;EACE;APwJZ;AOzJU;EACE;AP4JZ;AO7JU;EACE;APgKZ;AOjKU;EACE;APoKZ;AOrKU;EACE;APwKZ;AOzKU;EACE;AP4KZ;AO7KU;EACE;APgLZ;AOjLU;EACE;APoLZ;AOrLU;EACE;APwLZ;AOzLU;EACE;AP4LZ;AO7LU;EACE;APgMZ;AOjMU;EACE;APoMZ;AOrMU;EACE;APwMZ;AOzMU;EACE;AP4MZ;AO7MU;EACE;APgNZ;AOjNU;EACE;APoNZ;AOrNU;EACE;APwNZ;AOzNU;EACE;AP4NZ;AO7NU;EACE;APgOZ;AOjOU;EACE;APoOZ;AOrOU;EACE;APwOZ;AOzOU;EACE;AP4OZ;AO7OU;EACE;APgPZ;AOjPU;EACE;APoPZ;AOrPU;EACE;APwPZ;AOzPU;EACE;AP4PZ;AO7PU;EACE;APgQZ;AOjQU;EACE;APoQZ;AOrQU;EACE;APwQZ;AOzQU;EACE;AP4QZ;AO7QU;EACE;APgRZ;AOjRU;EACE;APoRZ;AOrRU;EACE;APwRZ;AOzRU;EACE;AP4RZ;AO7RU;EACE;APgSZ;AOjSU;EACE;APoSZ;AOrSU;EACE;APwSZ;AOzSU;EACE;AP4SZ;AO7SU;EACE;APgTZ;AOjTU;EACE;APoTZ;AOrTU;EACE;APwTZ;AOzTU;EACE;AP4TZ;AO7TU;EACE;APgUZ;AOjUU;EACE;APoUZ;AOrUU;EACE;APwUZ;AOzUU;EACE;AP4UZ;AO7UU;EACE;APgVZ;AOjVU;EACE;APoVZ;AOrVU;EACE;APwVZ;AOzVU;EACE;AP4VZ;AO7VU;EACE;APgWZ;AOjWU;EACE;APoWZ;AOrWU;EACE;APwWZ;AOzWU;EACE;AP4WZ;AO7WU;EACE;APgXZ;AOjXU;EACE;APoXZ;AOrXU;EACE;APwXZ;AOzXU;EACE;AP4XZ;AO7XU;EACE;APgYZ;AOjYU;EACE;APoYZ;AOrYU;EACE;APwYZ;AOzYU;EACE;AP4YZ;AO7YU;EACE;APgZZ;AOjZU;EACE;APoZZ;AOrZU;EACE;APwZZ;AOzZU;EACE;AP4ZZ;AO7ZU;EACE;APgaZ;AOjaU;EACE;APoaZ;AOraU;EACE;APwaZ;AOzaU;EACE;AP4aZ;AO7aU;EACE;APgbZ;AOjbU;EACE;APobZ;AOrbU;EACE;APwbZ;AOzbU;EACE;AP4bZ;AO7bU;EACE;APgcZ;AOjcU;EACE;APocZ;AOrcU;EACE;APwcZ;AOzcU;EACE;AP4cZ;AO7cU;EACE;APgdZ;AOjdU;EACE;APodZ;AOrdU;EACE;APwdZ;AOzdU;EACE;AP4dZ;AO7dU;EACE;APgeZ;AOjeU;EACE;APoeZ;AOreU;EACE;APweZ;AOzeU;EACE;AP4eZ;AO7eU;EACE;APgfZ;AOjfU;EACE;APofZ;AOrfU;EACE;APwfZ;AOzfU;EACE;AP4fZ;AO7fU;EACE;APggBZ;AOjgBU;EACE;APogBZ;AOrgBU;EACE;APwgBZ;AOzgBU;EACE;AP4gBZ;AO7gBU;EACE;APghBZ;AOjhBU;EACE;APohBZ;AOrhBU;EACE;APwhBZ;AOzhBU;EACE;AP4hBZ;AO7hBU;EACE;APgiBZ;AOjiBU;EACE;APoiBZ;AOriBU;EACE;APwiBZ;AOziBU;EACE;AP4iBZ;AO7iBU;EACE;APgjBZ;AOjjBU;EACE;APojBZ;AOrjBU;EACE;APwjBZ;AOzjBU;EACE;AP4jBZ;AO7jBU;EACE;APgkBZ;AOjkBU;EACE;APokBZ;AOrkBU;EACE;APwkBZ;AOzkBU;EACE;AP4kBZ;AO7kBU;EACE;APglBZ;AOjlBU;EACE;APolBZ;AOrlBU;EACE;APwlBZ;AOzlBU;EACE;AP4lBZ;AO7lBU;EACE;APgmBZ;AOjmBU;EACE;APomBZ;AOrmBU;EACE;APwmBZ;AOzmBU;EACE;AP4mBZ;AO7mBU;EACE;APgnBZ;AOjnBU;EACE;APonBZ;AOrnBU;EACE;APwnBZ;AOznBU;EACE;AP4nBZ;AO7nBU;EACE;APgoBZ;AOjoBU;EACE;APooBZ;AOroBU;EACE;APwoBZ;AOzoBU;EACE;AP4oBZ;AO7oBU;EACE;APgpBZ;AOjpBU;EACE;APopBZ;AOrpBU;EACE;APwpBZ;AOzpBU;EACE;AP4pBZ;AO7pBU;EACE;APgqBZ;AOjqBU;EACE;APoqBZ;AOrqBU;EACE;APwqBZ;AOzqBU;EACE;AP4qBZ;AO7qBU;EACE;APgrBZ;AOjrBU;EACE;APorBZ;AOrrBU;EACE;APwrBZ;AOzrBU;EACE;AP4rBZ;AO7rBU;EACE;APgsBZ;AOjsBU;EACE;APosBZ;AOrsBU;EACE;APwsBZ;AOzsBU;EACE;AP4sBZ;AO7sBU;EACE;APgtBZ;AOjtBU;EACE;APotBZ;AOrtBU;EACE;APwtBZ;AOztBU;EACE;AP4tBZ;AO7tBU;EACE;APguBZ;AOjuBU;EACE;APouBZ;AOruBU;EACE;APwuBZ;AOzuBU;EACE;AP4uBZ;AO7uBU;EACE;APgvBZ;AOjvBU;EACE;APovBZ;AOrvBU;EACE;APwvBZ;AOzvBU;EACE;AP4vBZ;AO7vBU;EACE;APgwBZ;AOjwBU;EACE;APowBZ;AOrwBU;EACE;APwwBZ;AOzwBU;EACE;AP4wBZ;AO7wBU;EACE;APgxBZ;AOjxBU;EACE;APoxBZ;AOrxBU;EACE;APwxBZ;AOzxBU;EACE;AP4xBZ;AO7xBU;EACE;APgyBZ;AOjyBU;EACE;APoyBZ;AOryBU;EACE;APwyBZ;AOzyBU;EACE;AP4yBZ;AO7yBU;EACE;APgzBZ;AOjzBU;EACE;APozBZ;AOrzBU;EACE;APwzBZ;AOzzBU;EACE;AP4zBZ;AO7zBU;EACE;APg0BZ;AOj0BU;EACE;APo0BZ;AOr0BU;EACE;APw0BZ;AOz0BU;EACE;AP40BZ;AO70BU;EACE;APg1BZ;AOj1BU;EACE;APo1BZ;AOr1BU;EACE;APw1BZ;AOz1BU;EACE;AP41BZ;AO71BU;EACE;APg2BZ;AOj2BU;EACE;APo2BZ;AOr2BU;EACE;APw2BZ;AOz2BU;EACE;AP42BZ;AO72BU;EACE;APg3BZ;AOj3BU;EACE;APo3BZ;AOr3BU;EACE;APw3BZ;AOz3BU;EACE;AP43BZ;AO73BU;EACE;APg4BZ;AOj4BU;EACE;APo4BZ;AOr4BU;EACE;APw4BZ;AOz4BU;EACE;AP44BZ;AO74BU;EACE;APg5BZ;AOj5BU;EACE;APo5BZ;AOr5BU;EACE;APw5BZ;AOz5BU;EACE;AP45BZ;AO75BU;EACE;APg6BZ;AOj6BU;EACE;APo6BZ;AOr6BU;EACE;APw6BZ;AOz6BU;EACE;AP46BZ;AO76BU;EACE;APg7BZ;AOj7BU;EACE;APo7BZ;AOr7BU;EACE;APw7BZ;AOz7BU;EACE;AP47BZ;AO77BU;EACE;APg8BZ;AOj8BU;EACE;APo8BZ;AOr8BU;EACE;APw8BZ;AOz8BU;EACE;AP48BZ;AO78BU;EACE;APg9BZ;AOj9BU;EACE;APo9BZ;AOr9BU;EACE;APw9BZ;AOz9BU;EACE;AP49BZ;AO79BU;EACE;APg+BZ;AOj+BU;EACE;APo+BZ;AOr+BU;EACE;APw+BZ;AOz+BU;EACE;AP4+BZ;AO7+BU;EACE;APg/BZ;AOj/BU;EACE;APo/BZ;AOr/BU;EACE;APw/BZ;AOz/BU;EACE;AP4/BZ;AO7/BU;EACE;APggCZ;AOjgCU;EACE;APogCZ;AOrgCU;EACE;APwgCZ;AOzgCU;EACE;AP4gCZ;AO7gCU;EACE;APghCZ;AOjhCU;EACE;APohCZ;AOrhCU;EACE;APwhCZ;AOzhCU;EACE;AP4hCZ;AO7hCU;EACE;APgiCZ;AOjiCU;EACE;APoiCZ;AOriCU;EACE;APwiCZ;AOziCU;EACE;AP4iCZ;AO7iCU;EACE;APgjCZ;AOjjCU;EACE;APojCZ;AOrjCU;EACE;APwjCZ;AOzjCU;EACE;AP4jCZ;AO7jCU;EACE;APgkCZ;AOjkCU;EACE;APokCZ;AOrkCU;EACE;APwkCZ;AOzkCU;EACE;AP4kCZ;AO7kCU;EACE;APglCZ;AOjlCU;EACE;APolCZ;AOrlCU;EACE;APwlCZ;AOzlCU;EACE;AP4lCZ;AO7lCU;EACE;APgmCZ;AOjmCU;EACE;APomCZ;AOrmCU;EACE;APwmCZ;AOzmCU;EACE;AP4mCZ;AO7mCU;EACE;APgnCZ;AOjnCU;EACE;APonCZ;AOrnCU;EACE;APwnCZ;AOznCU;EACE;AP4nCZ;AO7nCU;EACE;APgoCZ;AOjoCU;EACE;APooCZ;AOroCU;EACE;APwoCZ;AOzoCU;EACE;AP4oCZ;AO7oCU;EACE;APgpCZ;AOjpCU;EACE;APopCZ;AOrpCU;EACE;APwpCZ;AOroCM;EACE;APwoCR;AOzoCM;EACE;AP4oCR;AO7oCM;EACE;APgpCR;AOjpCM;EACE;APopCR;AOzqCU;EACE;AP4qCZ;AO7qCU;EACE;APgrCZ;AOjrCU;EACE;APorCZ;AOrrCU;EACE;APwrCZ;AOzrCU;EACE;AP4rCZ;AO7rCU;EACE;APgsCZ;AOjsCU;EACE;APosCZ;AOrsCU;EACE;APwsCZ;AOzsCU;EACE;AP4sCZ;AO7sCU;EACE;APgtCZ;AOjtCU;EACE;APotCZ;AOrtCU;EACE;APwtCZ;AOztCU;EACE;AP4tCZ;AO7tCU;EACE;APguCZ;AOjuCU;EACE;APouCZ;AOruCU;EACE;APwuCZ;AOzuCU;EACE;AP4uCZ;AO7uCU;EACE;APgvCZ;AOjvCU;EACE;APovCZ;AOrvCU;EACE;APwvCZ;AOzvCU;EACE;AP4vCZ;AO7vCU;EACE;APgwCZ;AOjwCU;EACE;APowCZ;AOrwCU;EACE;APwwCZ;AOzwCU;EACE;AP4wCZ;AO7wCU;EACE;APgxCZ;AOjxCU;EACE;APoxCZ;AOrxCU;EACE;APwxCZ;AOzxCU;EACE;AP4xCZ;AO7xCU;EACE;APgyCZ;AOjyCU;EACE;APoyCZ;AOryCU;EACE;APwyCZ;AOzyCU;EACE;AP4yCZ;AO7yCU;EACE;APgzCZ;AOjzCU;EACE;APozCZ;AOrzCU;EACE;APwzCZ;AOzzCU;EACE;AP4zCZ;AO7zCU;EACE;APg0CZ;AOj0CU;EACE;APo0CZ;AOr0CU;EACE;APw0CZ;AOz0CU;EACE;AP40CZ;AO70CU;EACE;APg1CZ;AOj1CU;EACE;APo1CZ;AOr1CU;EACE;APw1CZ;AOz1CU;EACE;AP41CZ;AO71CU;EACE;APg2CZ;AOj2CU;EACE;APo2CZ;AOr2CU;EACE;APw2CZ;AOz2CU;EACE;AP42CZ;AO72CU;EACE;APg3CZ;AOj3CU;EACE;APo3CZ;AOr3CU;EACE;APw3CZ;AOz3CU;EACE;AP43CZ;AO73CU;EACE;APg4CZ;AOj4CU;EACE;APo4CZ;AOr4CU;EACE;APw4CZ;AOz4CU;EACE;AP44CZ;AO74CU;EACE;APg5CZ;AOj5CU;EACE;APo5CZ;AOr5CU;EACE;APw5CZ;AOz5CU;EACE;AP45CZ;AO75CU;EACE;APg6CZ;AOj6CU;EACE;APo6CZ;AOr6CU;EACE;APw6CZ;AOz6CU;EACE;AP46CZ;AO76CU;EACE;APg7CZ;AOj7CU;EACE;APo7CZ;AOr7CU;EACE;APw7CZ;AOz7CU;EACE;AP47CZ;AO77CU;EACE;APg8CZ;AOj8CU;EACE;APo8CZ;AOr8CU;EACE;APw8CZ;AOz8CU;EACE;AP48CZ;AO78CU;EACE;APg9CZ;AOj9CU;EACE;APo9CZ;AOr9CU;EACE;APw9CZ;AOz9CU;EACE;AP49CZ;AO79CU;EACE;APg+CZ;AOj+CU;EACE;APo+CZ;AOr+CU;EACE;APw+CZ;AOz+CU;EACE;AP4+CZ;AO7+CU;EACE;APg/CZ;AOj/CU;EACE;APo/CZ;AOr/CU;EACE;APw/CZ;AOz/CU;EACE;AP4/CZ;AO7/CU;EACE;APggDZ;AOjgDU;EACE;APogDZ;AOrgDU;EACE;APwgDZ;AOzgDU;EACE;AP4gDZ;AO7gDU;EACE;APghDZ;AOjhDU;EACE;APohDZ;AOrhDU;EACE;APwhDZ;AOzhDU;EACE;AP4hDZ;AO7hDU;EACE;APgiDZ;AOjiDU;EACE;APoiDZ;AOriDU;EACE;APwiDZ;AOziDU;EACE;AP4iDZ;AO7iDU;EACE;APgjDZ;AOjjDU;EACE;APojDZ;AOrjDU;EACE;APwjDZ;AOzjDU;EACE;AP4jDZ;AO7jDU;EACE;APgkDZ;AOjkDU;EACE;APokDZ;AOrkDU;EACE;APwkDZ;AOzkDU;EACE;AP4kDZ;AO7kDU;EACE;APglDZ;AOjlDU;EACE;APolDZ;AOrlDU;EACE;APwlDZ;AOzlDU;EACE;AP4lDZ;AO7lDU;EACE;APgmDZ;AOjmDU;EACE;APomDZ;AOrmDU;EACE;APwmDZ;AOzmDU;EACE;AP4mDZ;AO7mDU;EACE;APgnDZ;AOjnDU;EACE;APonDZ;AOrnDU;EACE;APwnDZ;AOznDU;EACE;AP4nDZ;AO7nDU;EACE;APgoDZ;AOjoDU;EACE;APooDZ;AOroDU;EACE;APwoDZ;AOzoDU;EACE;AP4oDZ;AO7oDU;EACE;APgpDZ;AOjpDU;EACE;APopDZ;AOrpDU;EACE;APwpDZ;AOzpDU;EACE;AP4pDZ;AO7pDU;EACE;APgqDZ;AOjqDU;EACE;APoqDZ;AOrqDU;EACE;APwqDZ;AOzqDU;EACE;AP4qDZ;AO7qDU;EACE;APgrDZ;AOjrDU;EACE;APorDZ;AOrrDU;EACE;APwrDZ;AOzrDU;EACE;AP4rDZ;AO7rDU;EACE;APgsDZ;AOjsDU;EACE;APosDZ;AOrsDU;EACE;APwsDZ;AOzsDU;EACE;AP4sDZ;AO7sDU;EACE;APgtDZ;AOjtDU;EACE;APotDZ;AOrtDU;EACE;APwtDZ;AOztDU;EACE;AP4tDZ;AO7tDU;EACE;APguDZ;AOjuDU;EACE;APouDZ;AOruDU;EACE;APwuDZ;AOzuDU;EACE;AP4uDZ;AO7uDU;EACE;APgvDZ;AOjvDU;EACE;APovDZ;AOrvDU;EACE;APwvDZ;AOzvDU;EACE;AP4vDZ;AO7vDU;EACE;APgwDZ;AOjwDU;EACE;APowDZ;AOrwDU;EACE;APwwDZ;AOzwDU;EACE;AP4wDZ;AO7wDU;EACE;APgxDZ;AOjxDU;EACE;APoxDZ;AOrxDU;EACE;APwxDZ;AOzxDU;EACE;AP4xDZ;AO7xDU;EACE;APgyDZ;AOjyDU;EACE;APoyDZ;AOryDU;EACE;APwyDZ;AOzyDU;EACE;AP4yDZ;AO7yDU;EACE;APgzDZ;AOjzDU;EACE;APozDZ;AOrzDU;EACE;APwzDZ;AOzzDU;EACE;AP4zDZ;AO7zDU;EACE;APg0DZ;AOj0DU;EACE;APo0DZ;AOr0DU;EACE;APw0DZ;AOz0DU;EACE;AP40DZ;AO70DU;EACE;APg1DZ;AOj1DU;EACE;APo1DZ;AOr1DU;EACE;APw1DZ;AOz1DU;EACE;AP41DZ;AO71DU;EACE;APg2DZ;AOj2DU;EACE;APo2DZ;AOr2DU;EACE;APw2DZ;AOz2DU;EACE;AP42DZ;AO72DU;EACE;APg3DZ;AOj3DU;EACE;APo3DZ;AOr3DU;EACE;APw3DZ;AOz3DU;EACE;AP43DZ;AO73DU;EACE;APg4DZ;AOj4DU;EACE;APo4DZ;AOr4DU;EACE;APw4DZ;AOz4DU;EACE;AP44DZ;AO74DU;EACE;APg5DZ;AOj5DU;EACE;APo5DZ;AOr5DU;EACE;APw5DZ;AOz5DU;EACE;AP45DZ;AO75DU;EACE;APg6DZ;AOj6DU;EACE;APo6DZ;AOr6DU;EACE;APw6DZ;AOz6DU;EACE;AP46DZ;AO76DU;EACE;APg7DZ;AOj7DU;EACE;APo7DZ;AOr7DU;EACE;APw7DZ;AOz7DU;EACE;AP47DZ;AO77DU;EACE;APg8DZ;AOj8DU;EACE;APo8DZ;AOr8DU;EACE;APw8DZ;AOz8DU;EACE;AP48DZ;AO78DU;EACE;APg9DZ;AOj9DU;EACE;APo9DZ;AOr9DU;EACE;APw9DZ;AOz9DU;EACE;AP49DZ;AO79DU;EACE;APg+DZ;AOj+DU;EACE;APo+DZ;AOr+DU;EACE;APw+DZ;AOz+DU;EACE;AP4+DZ;AO7+DU;EACE;APg/DZ;AOj/DU;EACE;APo/DZ;AOr/DU;EACE;APw/DZ;AOz/DU;EACE;AP4/DZ;AO7/DU;EACE;APggEZ;AOjgEU;EACE;APogEZ;AOrgEU;EACE;APwgEZ;AOzgEU;EACE;AP4gEZ;AO7gEU;EACE;APghEZ;AOjhEU;EACE;APohEZ;AOrhEU;EACE;APwhEZ;AOzhEU;EACE;AP4hEZ;AO7hEU;EACE;APgiEZ;AOjiEU;EACE;APoiEZ;AOriEU;EACE;APwiEZ;AOziEU;EACE;AP4iEZ;AO7iEU;EACE;APgjEZ;AOjjEU;EACE;APojEZ;AOrjEU;EACE;APwjEZ;AOzjEU;EACE;AP4jEZ;AO7jEU;EACE;APgkEZ;AOjkEU;EACE;APokEZ;AOrkEU;EACE;APwkEZ;AOzkEU;EACE;AP4kEZ;AO7kEU;EACE;APglEZ;AOjlEU;EACE;APolEZ;AOrlEU;EACE;APwlEZ;AOzlEU;EACE;AP4lEZ;AO7lEU;EACE;APgmEZ;AOjmEU;EACE;APomEZ;AOrmEU;EACE;APwmEZ;AOzmEU;EACE;AP4mEZ;AO7mEU;EACE;APgnEZ;AOjnEU;EACE;APonEZ;AOrnEU;EACE;APwnEZ;AOznEU;EACE;AP4nEZ;AO7nEU;EACE;APgoEZ;AOjoEU;EACE;APooEZ;AOroEU;EACE;APwoEZ;AOzoEU;EACE;AP4oEZ;AO7oEU;EACE;APgpEZ;AOjpEU;EACE;APopEZ;AOrpEU;EACE;APwpEZ;AOzpEU;EACE;AP4pEZ;AO7pEU;EACE;APgqEZ;AOjqEU;EACE;APoqEZ;AOrqEU;EACE;APwqEZ;AOzqEU;EACE;AP4qEZ;AO7qEU;EACE;APgrEZ;AOjrEU;EACE;APorEZ;AOrrEU;EACE;APwrEZ;AOzrEU;EACE;AP4rEZ;AO7rEU;EACE;APgsEZ;AOjsEU;EACE;APosEZ;AOrsEU;EACE;APwsEZ;AOzsEU;EACE;AP4sEZ;AO7sEU;EACE;APgtEZ;AO7rEM;EACE;APgsER;AOjsEM;EACE;APosER;AOrsEM;EACE;APwsER;AOzsEM;EACE;AP4sER;AO/rEA;EACE;APksEF;AO/rEA;EACE;EACA;EACA;EACA;APksEF;AO/rEA;EACE;EACA;EACA;APksEF;AO/rEA;EACE;EACA;EACA;APksEF;AO9rEA;EACE,4LACE;EAeF;EACA;EACA;EACA;APkrEF;AO/qEA;EACE;EACA;APkrEF;AO/qEA;EACE;EACA;EACA;EACA;EACA;APkrEF;AO/qEA;EACE;EACA;EACA;EACA;EACA;APkrEF;AO/qEA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;APkrEF;AO7qEA;EACE,4LACE;EAeF;EACA;EACA;EACA;APiqEF;AO9pEA;EACE;EACA;APiqEF;AO9pEA;EACE;EACA;EACA;EACA;EACA;APiqEF;AO9pEA;EACE;EACA;EACA;EACA;EACA;APiqEF;AO9pEA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;APiqEF;AO7pEA;EACE,4LACE;EAeF;EACA;EACA;EACA;APipEF;AO9oEA;EACE;EACA;APipEF;AO9oEA;EACE;EACA;EACA;EACA;EACA;APipEF;AO9oEA;EACE;EACA;EACA;EACA;EACA;APipEF;AO9oEA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;APipEF;AO5oEA;EACE,4OACE;EAmBF;EACA;EACA;EACA;AP4nEF;AOznEA;EACE;EACA;AP4nEF;AOznEA;EACE;EACA;EACA;EACA;EACA;AP4nEF;AOznEA;EACE;EACA;EACA;EACA;EACA;AP4nEF;AOznEA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;AP4nEF;ACrlBA;AA+IA;AAobA;AAmwDA;AA6CA;AO1rIA;;;;;;;;;;;;;EAAA;AAeA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;;;EAGE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;;;EAGE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;;;EAGE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;;;EAGE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;ARm6EF;AQz5EA;EACE;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;ARm6EF;AQ55EA;;;EAGE;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQv5EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;ARm6EF;AQh6EA;EACE;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;EACA;EACA;EACA;EACA;EACA;ARm6EF;AQh6EA;EACE;IACE;ERm6EF;EQj6EA;IACE;ERm6EF;AACF;AQh6EA;EACE;IACE;ERk6EF;EQh6EA;IACE;ERk6EF;AACF;AS94FE;EACE;ATg5FJ;AS74FE;EACE;EACA;EACA;AT+4FJ;AChlCA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAn3EA;AA+IA;AAobA;AAmwDA;AA6CA;AAx+CE;EACE,gBAvLoB;EAwLpB,eAzLkB;EA0LlB;ADyQJ;ACtQE;EAEE;ADwQJ;ACrQE;EACE;ADwQJ;AC1lBE;EA/VE;EAYF;EAqVE;AD8lBJ;AC3lBE;EApWE;EAYF;EA0VE;AD+lBJ;AC5lBE;EAzWE;EAYF;EA+VE;ADgmBJ;AC7lBE;EA9WE;EAYF;EAoWE;ADimBJ;AC3lBE;EAtXE;EA+XA;ADulBJ;ACplBE;EAlYE;EA2YA;ADglBJ;AC7kBE;EA9YE;EAYF;ADo9BF;AC9kBE;EAlZE;EAYF;ADy9BF;AChlBI;EACE;ADklBN;AC9kBE;EA1ZE;EAYF;ADi+BF;AC/kBE;EA9ZE;EAYF;EAoZE;ADmlBJ;AChlBE;EAnaE;EAYF;EAyZE;ADolBJ;ACjlBE;EAxaE;EAYF;EA8ZE;ADqlBJ;ACllBE;EA7aE;EAYF;EAmaE;ADslBJ;ACxSE;EA7tBE;EAYF;AD8/BF;AC/GE;;EAGI;EACA;EACA;ADiHN;ACeE;EACE;ADZJ;AC4EE;EACE;ADzEJ;AC4EE;EAEI;EACA;AD1EN;AC8EE;EACE;AD3EJ;AC8EE;;EAEE;AD3EJ;ACuME;EACE;ADpMJ;ACwME;EACE;ADrMJ;ACwTE;EACE;EACA;ADrTJ;ACuTI;;EAEE,eA3FsB;AD1N5B;AC4ZE;EACE;ADzZJ;AC4ZE;EACE;EACA;ADzZJ;AC4ZE;EACE;ADzZJ;ACwmBE;EACE;ADrmBJ;ACwmBE;EACE,eAjL0B;ADpb9B;ACwmBE;;EAGI;EACA;ADtmBN;AC0mBE;EAEI,eA7LiC;EA8LjC;ADxmBN;AC0rBE;EAlxDE;EAYF;ADilCF;ACizBE;EAEI;EACA;EACA;AD/yBN;ACmzBE;EAt5DE;EAYF;AD4lCF;ACo+GE;EArlJE,kBAeU;EAdV,gBAeY;EAdZ,kBAeY;EAdZ,iDAeY;EAGd;ADomCF;ACg+GE;EACE,yBAPuB;ADt9G3B;ACm+GI;;EACE,eAvB2B;EAwB3B,kBAtCU;ADz7GhB;ACm+GI;;EACE;EACA;ADh+GN;ACk+GM;;EACE;EACA,kBAhDQ;AD/6GhB;ACo+GE;EACE;EAEA;ADl+GJ;ACs+GI;;EAtEF;EAEA;AD55GF;ACw+GI;EA9EF;EAEA;ADx5GF;AC2+GE;EACE;EACA,sBAnEiB;ADr6GrB;AC2+GE;EACE;ADx+GJ;AC2+GE;EAGE,iBAhEuB;AD16G3B;AC6+GE;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;AD7+GJ;AC+9FI;EACE,sBAJqB;ADx9F3B;AC+9FI;EACE;AD79FN;ACi+FM;;EA1DJ;EAIA;EAGA;ADx6FF;ACk+FM;EAjEJ;EAIA;EAGA;ADn6FF;ACq+FM;EAzEJ;EAIA;EAGA;AD95FF;ACu+FI;EACE;ADr+FN;ACw+FI;EAGE,cAzCqB;AD/7F3B;AC2+FI;EACE,0BAjDmB;EAqDnB;AD5+FN;ACk/FE;EAGM;;IAxFN;EDv5FA;ECs/FM;IA/FN;EDp5FA;EC2/FM;IAvGN;EDj5FA;AACF;AC+xFI;EACE;AD7xFN;ACgyFI;EACE;EACA,kBAT2B;ADrxFjC;ACkyFM;;EAjCJ;EAEA;AD9vFF;ACsyFM;EA1CJ;EAEA;AD1vFF;AC8mGI;EACE;AD3mGN;AC8mGI;EACE;EACA,mBAT8B;ADnmGpC;ACgnGM;;EAxCJ;EAEA;ADrkGF;AConGM;EAjDJ;EAEA;ADjkGF;ACuwBE;;EAGE;ADrwBJ;ACotBE;;EARA;EACA;EACA;EAQE;EACA;AD/sBJ;ACktBI;;EACE,eAyCqB;ADxvB3B;AC28BE;EACE;ADx8BJ;ACmoCE;EAEI;EACA;EACA;ADjoCN;ACotCE;;EAGI;EACA;ADltCN;ACq7CE;EACE;ADl7CJ;ACihDE;EACE;AD9gDJ;ACihDE;EACE;AD9gDJ;ACqtDE;EACE;ADltDJ;ACm5DE;EAEI;EACA;EACA;ADj5DN;ACojEE;EACE;ADjjEJ;ACojEE;EAEI;EACA;ADljEN;ACsjEE;EACE;ADnjEJ;ACsjEE;EACE;ADnjEJ;ACsjEE;EAEI;EACA;ADpjEN;AC4yEE;EACE;ADzyEJ;AC4yEE;EAEI;EACA;EACA;AD1yEN;ACu6EE;;;;;;;EAnvHE;EAYF;EA+uHE;ADn6EJ;ACs+EE;EACE;EACA,eArBoB;EAsBpB,gBArB2B;EAsB3B,mBAtB2B;AD78E/B;ACs+EE;EACE,eAvB4B;EAwB5B,gBAtBA;EAuBA,mBAvBA;AD58EJ;ACs7BE;EACE,iDAHY;ADh7BhB;ACs7BE;EACE,iDAPY;AD56BhB;ACw7BI;EACE;ADr7BN;AC6lBE;EARA;EACA;EACA;EAQE;EACA;ADzlBJ;AC4lBI;EACE,eAkVuB;AD56B7B;AC+6BI;EACE;AD76BN;ACglBE;EARA;EACA;EACA;EAQE;EACA;AD5kBJ;AC+kBI;EACE,eAuVuB;ADp6B7B;ACu6BI;EACE;EACA;EACA;ADr6BN;AC26BI;EACE;ADx6BN;AC6jBE;EARA;EACA;EACA;EAQE;EACA;ADzjBJ;AC4jBI;EACE,eAqWuB;AD/5B7B;ACk6BI;EACE;ADh6BN;ACgjBE;EARA;EACA;EACA;EAQE;EACA;AD5iBJ;AC+iBI;EACE,eA0WuB;ADv5B7B;AC05BI;EACE,iDA1CU;EA2CV;EACA;ADx5BN;AC/2CE;EAEI;EACA;ADi3CN;ACp0CE;EA9GE;EAYF;AD26CF;ACq8EE;EAEI;EACA;ADn8EN;ACu8EE;EACE;EAEE;EACA;EACA;ADr8EN;ACyxGE;EACE;ADtxGJ;ACyxGE;;EAEE;EACA;ADtxGJ;ACvtDE;EACE;EAIA;ADutDJ;AChtDI;EACE;ADktDN;AC9sDE;EACE;ADitDJ;AC9sDE;EACE;EACA;EACA;EAEA;EACA;ADgtDJ;AC31GI;EA+oDE;AD+sDN;AC73GE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAGA;EAGA;EACA;ADy3GJ;AC5gHE;EAEE;EAGA;EACA;EACA;EACA;AD4gHJ;ACxgHE;EACE;EACA,aA3B4B;ADsiHhC;ACzgHI;EAGE;ADygHN;ACjgHE;EACE;EACA;EACA,aA1CkB;AD8iHtB;AChgHE;EAGE;EACA;EACA;EACA,aApDkB;EAwDlB;EACA;EACA;AD8/GJ;AC3/GE;EAEE;EACA;EACA;EACA;EACA;EAEA,aApE2B;EAqE3B;EACA;EACA;EACA;AD4/GJ;AC1/GI;EACE;AD4/GN;ACv/GM;EAGE;ADu/GR;ACl/GE;EACE,+BAtFmC;AD2kHvC;AC7+GI;EACE;ADg/GN;AC1+GE;EACE;EACA,aA3GkB;EAgHlB;EAIA;EAGA;EACA;ADo+GJ;ACh+GE;EACE;EAKA;EAKA;AD29GJ;AC53GE;EAA0C;ADg4G5C;ACh4GE;EAA0C;ADg4G5C;AC/3GE;EAAwC;ADk4G1C;ACl4GE;EAAwC;ADk4G1C;ACh4GE;EAEE;UAAA;ADi4GJ;AC93GE;EAEE;UAAA;ADg4GJ;AC33GE;EACE;AD83GJ;ACx3GE;EAqBA;EACA;EApBE;EACA;AD43GJ;ACn3GE;EASA;EACA;EARE;ADu3GJ;AC/pDE;EACE;ADkqDJ;ACsyGE;EACE;ADnyGJ;ACp0DE;EAII;ADo0DN;AChlDE;EACE;ADmlDJ;ACjlDI;EAEE;ADklDN;AC9kDI;EACE;ADglDN;AC7kDI;EACE;EACA;AD+kDN;AC5kDI;EACE;AD8kDN;AC1kDE;EACE;AD6kDJ;AC1kDE;EACE;AD6kDJ;AC1kDE;EACE;AD6kDJ;ACliDE;EACE;ADqiDJ;ACliDE;EACE;ADqiDJ;ACn/CE;EACE;ADs/CJ;ACp/CI;EACE;ADs/CN;ACl/CE;EACE,cAZe;ADigDnB;ACl/CE;;EAEE;ADq/CJ;AC7+CE;;;;EAIE;ADg/CJ;AC7+CE;;EAEE;ADg/CJ;AC3+CI;;EACE,mBAxCa;ADuhDnB;ACmqGE;EAIE;EACA;ADnqGJ;AC0qGI;EAx4MF;ADkuGF;ACsqGI;EAx4MF;ADsuGF;ACkqGI;EAx4MF;AD0uGF;AC8pGI;EAx4MF;AD8uGF;AC0pGI;EAx4MF;ADkvGF;ACspGI;EAx4MF;ADsvGF;ACkpGI;EAx4MF;AD0vGF;AC8oGI;EAx4MF;AD8vGF;AC0oGI;EAx4MF;ADkwGF;ACsoGI;EAx4MF;ADswGF;ACkoGI;EAx4MF;AD0wGF;AC8nGI;EAx4MF;AD8wGF;AC0nGI;EAx4MF;ADkxGF;ACsnGI;EAx4MF;ADsxGF;ACknGI;EAx4MF;AD0xGF;AC8mGI;EAx4MF;AD8xGF;AC0mGI;EAx4MF;ADkyGF;ACsmGI;EAx4MF;ADsyGF;ACkmGI;EAx4MF;AD0yGF;AC8lGI;EAx4MF;AD8yGF;AC0lGI;EAx4MF;ADkzGF;ACslGI;EAx4MF;ADszGF;ACklGI;EAx4MF;AD0zGF;AC8kGI;EAx4MF;AD8zGF;AC0kGI;EAx4MF;ADk0GF;AC6kGI;EACE;AD1kGN;ACh2CE;EAEE;EACA;ADk2CJ;ACh0GE;EAXA;AD80GF;AC91CI;EACE;ADg2CN;AC91CM;EACE;ADg2CR;ACluCE;EACE;EACA;ADquCJ;ACxqHI;EAs8EE;EACA;ADquCN;AChuCI;EACE;EACA;ADmuCN;AC9tCI;EACE;EACA;ADiuCN;AC7tCE;EACE;ADguCJ;AC5tCI;EACE;AD+tCN;AC1tCI;EAWI;EAMF;AD8sCN;AC1sCE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AD6sCJ;AC1sCE;;EAEE;AD6sCJ;ACxsCE;EAEE;AD0sCJ;ACz2CE;EACE,WANmB;EAOnB,YAPmB;EAQnB,iBARmB;ADo3CvB;ACx2CI;EACE;AD02CN;ACr2CI;EACE;ADu2CN;ACl2CI;EACE;ADo2CN;AC/1CI;EACE;EACA;ADi2CN;AC51CI;EACE;AD81CN;ACz1CI;EACE;EACA;AD21CN;ACr1CM;EACE;ADu1CR;ACl1CM;EACE;EACA;ADo1CR;AC/0CM;EACE;ADi1CR;AC50CM;EACE;EACA;AD80CR;ACj5CE;EACE,WAPqB;EAQrB,YARqB;EASrB,iBATqB;AD65CzB;ACh5CI;EACE;ADk5CN;AC74CI;EACE;AD+4CN;AC14CI;EACE;AD44CN;ACv4CI;EACE;EACA;ADy4CN;ACp4CI;EACE;ADs4CN;ACj4CI;EACE;EACA;ADm4CN;AC73CM;EACE;AD+3CR;AC13CM;EACE;EACA;AD43CR;ACv3CM;EACE;ADy3CR;ACp3CM;EACE;EACA;ADs3CR;ACz7CE;EACE,WALmB;EAMnB,YANmB;EAOnB,iBAPmB;ADm8CvB;ACx7CI;EACE;AD07CN;ACr7CI;EACE;ADu7CN;ACl7CI;EACE;ADo7CN;AC/6CI;EACE;EACA;ADi7CN;AC56CI;EACE;AD86CN;ACz6CI;EACE;EACA;AD26CN;ACr6CM;EACE;ADu6CR;ACl6CM;EACE;EACA;ADo6CR;AC/5CM;EACE;ADi6CR;AC55CM;EACE;EACA;AD85CR;ACnwCE;EA/vEA;EAiwEE;EACA;ADswCJ;ACzoCE;EAKE;EACA;ADwoCJ;ACxqCE;EACE;AD0qCJ;ACxqCE;EACE;AD0qCJ;ACxqCE;EACE;AD0qCJ;ACtqCI;EAEE;ADuqCN;AC1uCE;EACE;AD4uCJ;ACzuCE;EACE;AD2uCJ;ACxuCE;EACE;AD0uCJ;ACvuCE;EACE;ADyuCJ;ACxpCI;EACE,YAxGuB;EAyGvB;AD0pCN;ACtpCE;EACE;ADypCJ;ACppCE;EACE;ADupCJ;ACppCE;EAEE;EACA;ADspCJ;ACjtCE;EACE;ADmtCJ;ACjtCE;EACE;ADmtCJ;ACjtCE;EACE;ADmtCJ;AC/sCI;EAEE;ADgtCN;AC7tCE;EACE;AD+tCJ;AC7tCE;EACE;AD+tCJ;AC7tCE;EACE;AD+tCJ;AC3tCI;EAEE;AD4tCN;AC9vCE;EAXA,0CADmB;AD6wCrB;AC7vCE;EAfA,0CADmB;ADgxCrB;AC5vCE;EAnBA,0CADmB;ADmxCrB;AC5kHE;EAXA;AD2lHF;AChlHE;EAXA;AD+lHF;ACplHE;EAXA;ADkmHF;ACvlHE;EAXA;ADqmHF;AC1lHE;EAXA;ADymHF;AC9lHE;EAXA;AD4mHF;ACjmHE;EAXA;AD+mHF;AC9mCE;;EAjgFA;ADonHF;AC9mCE;;EAEE;ADinCJ;AC9mCE;EACE;ADinCJ;AC/mCI;EACE;ADinCN;AC7mCE;EACE;EACA;ADgnCJ;AC9mCI;EACE;ADgnCN;AC5mCE;EACE;AD+mCJ;AC5mCE;EACE;EACA;AD+mCJ;AC3mCI;EACE;EACA;EACA;AD8mCN;AC1mCE;EACE;EACA;AD6mCJ;AC3mCI;EACE;AD6mCN;ACzmCE;EACE;EACA;AD4mCJ;AC1mCI;EACE;AD4mCN;ACzmCI;EACE;AD2mCN;ACvmCE;;EAEE;AD0mCJ;ACzlCI;EACE,iBALc;ADimCpB;ACzjCE;EAEE;EACA;AD2jCJ;AC7qHE;EAXA;AD2rHF;AChrHE;EAXA;AD8rHF;ACzjCE;EACE;AD4jCJ;ACp/BE;EACE;ADu/BJ;ACp/BE;EACE,aAdoB;ADqgCxB;ACp/BE;EAGE;ADq/BJ;ACl/BE;EACE,yBAxBoB;AD6gCxB;ACj/BI;EACE;ADo/BN;ACj/BI;EACE;ADm/BN;ACh/BI;EACE;ADk/BN;AC3+BM;EACE,yBAtCW;ADohCnB;ACz+BM;EACE,qBA5CW;ADuhCnB;ACv+BI;EACE;ADy+BN;ACn+BE;EACE;ADs+BJ;ACj+BI;;EACE;ADq+BN;ACl+BI;;EACE;ADq+BN;ACl+BI;;EACE;ADq+BN;AC54BE;EA3CA,yBAwCwB;EAvCxB,0BAwCwB;ADm5B1B;ACz7BE;EACE,0BAqCsB;EApCtB;AD27BJ;ACj5BM;EA/2FJ;ADmwHF;ACh5BM;EACE;ADk5BR;AC94BI;EACE;ADg5BN;AC74BI;EACE;AD+4BN;AC14BI;EAlEF,yBAwBwE;EAvBxE,YAuBiC;ADy7BnC;AC98BE;EACE,YAoB+B;EAnB/B;ADg9BJ;AC37BE;EATA,0CADmB;ADw8BrB;ACl5BI;EAtEF,yBAwBwE;EAvBxE,YAuBiC;ADo8BnC;ACz9BE;EACE,YAoB+B;EAnB/B;AD29BJ;ACt8BE;EATA,0CADmB;ADm9BrB;ACz5BI;EA1EF,yBAwBwE;EAvBxE,YAuBiC;AD+8BnC;ACp+BE;EACE,YAoB+B;EAnB/B;ADs+BJ;ACj9BE;EATA,0CADmB;AD89BrB;AC10BE;EACE;AD60BJ;AC10BE;;;;EAIE;AD60BJ;AC10BE;;EAEE;AD60BJ;AC10BE;EACE;AD60BJ;AC10BE;EACE;AD60BJ;ACpuBE;EACE;ADuuBJ;ACluBE;;;EAGE;ADquBJ;ACluBE;EACE;ADquBJ;ACluBE;EACE;ADquBJ;ACluBE;EACE;ADquBJ;ACluBE;;EAEE;EACA;ADquBJ;AC3wBE;EA2CI,0BAlCa;ADswBnB;AChuBE;EACE,0BAvCe;AD0wBnB;AChuBE;EAOI;AD6tBN;ACvxBE;EAqEI;ADstBN;AC3xBE;EA8EM;ADitBR;AChoBE;EACE,kCAtMA;ADy0BJ;AChoBE;;EAEE,kCAViB;AD6oBrB;AChoBE;;EAEE;ADmoBJ;AChoBE;;EAEE;ADmoBJ;AChoBE;;EAEE,mBAxBc;AD2pBlB;AChoBE;;EAEE,mBA5BuB;AD+pB3B;ACh2BE;EACE;EACA;ADm2BJ;ACh2BE;EAII;ADg2BN;ACv1BE;EACE;AD01BJ;ACz0BE;;;EARM;ADu1BR;ACnvBE;EAnrGA;EAqrGE;EACA;ADsvBJ;ACtrBE;EACE,mCAtMA;AD83BJ;ACrrBE;;EAEE,kCAViB;ADisBrB;ACprBE;;EAEE;ADsrBJ;ACnrBE;;EAEE;ADqrBJ;AClrBE;;EAEE,mBAxBc;AD4sBlB;ACjrBE;;EAEE,mBA5BuB;AD+sB3B;ACh5BE;EACE;EACA;ADk5BJ;AC/4BE;EAII;AD84BN;ACr4BE;EACE;ADu4BJ;ACt3BE;;;EARM;ADm4BR;AC5tBE;EACE,kCAtMA;ADo6BJ;AC3tBE;;EAEE,kCAViB;ADuuBrB;AC1tBE;;EAEE;AD4tBJ;ACztBE;;EAEE;AD2tBJ;ACxtBE;;EAEE,mBAxBc;ADkvBlB;ACvtBE;;EAEE,mBA5BuB;ADqvB3B;ACt7BE;EACE;EACA;ADw7BJ;ACr7BE;EAII;ADo7BN;AC36BE;EACE;AD66BJ;AC55BE;;;EARM;ADy6BR;ACvzBE;EAjsGA;AD4/HF;ACvzBE;EACE;AD0zBJ;ACxzBI;EACE;AD0zBN;ACvzBI;EACE;ADyzBN;ACrzBE;EACE;ADwzBJ;ACttBE;EApzGA;EAszGE;EACA;ADytBJ;ACrlCE;EACE;ADwlCJ;ACrlCE;EACE;ADwlCJ;AC3oBE;EAEE;EACA;AD6oBJ;AClhIE;EAXA;ADgiIF;AC7oBE;EACE;ADgpBJ;ACpqBM;EAwBF;ADgpBJ;AC3oBE;EACE;IAEE;ED6oBJ;AACF;AC1oBE;EACE;AD4oBJ;ACzoBE;;EAEE;AD4oBJ;ACzoBE;EACE;AD4oBJ;AC1oBI;;EAEE;AD4oBN;AChnBI;EACE,YALe;ADwnBrB;ACjnBM;EACE,YAVY;AD6nBpB;ACk7DE;EACE,yBAXY;ADp6DhB;ACk7DE;EACE,yBAfY;ADh6DhB;ACk7DE;EACE,cAlBoB;AD75DxB;ACi7DI;EACE,cAhBqB;AD/5D3B;ACk7DI;EACE,cAnBmB;AD75DzB;ACo7DE;EACE,cA7BqB;ADp5DzB;ACo7DE;EACE,qCA9BqB;ADn5DzB;ACq7DI;EACE,yBAhCsB;ADl5D5B;ACo7DM;EACE,yBArCmB;AD74D3B;ACq7DM;EACE,yBAxCiB;AD34DzB;ACy7DI;EACE,cA9CsB;ADx4D5B;ACy7DI;EACE,cApDqB;ADn4D3B;AC07DI;EACE,cAvDmB;ADj4DzB;ACg8DI;EACE,cAhEmB;AD73DzB;AC+7DM;;EAEE,cApEiB;ADz3DzB;ACi8DI;;EAEE,yBA1EmB;ADr3DzB;ACm8DE;EACE,cA/EqB;ADj3DzB;AC89CI;EACE,0BALU;ADt9ChB;AC89CI;EACE,0BATU;ADn9ChB;AC+9CI;EACE,qCAZc;ADj9CpB;ACg+CI;EAj/DF;EACA;EACA;ADohBF;AC8yDI;EACE,qCAJc;ADvyDpB;AC8yDI;EAx0EF;EACA;EACA;AD6hBF;AC40CI;EACE,qCAPc;ADl0CpB;AC40CI;EACE,qCAVuB;ADh0C7B;AC60CI;EACE,qCAbc;AD9zCpB;AC+0CM;EACE,0BAjBiB;AD5zCzB;ACg1CM;EACE;AD90CR;ACmoDI;EACE,0BATY;ADvnDlB;ACmoDI;EACE,0BAZkB;ADrnDxB;ACqoDM;EACE,cAhBkB;ADnnD1B;ACsoDM;EACE,cAnBiB;ADjnDzB;ACuoDM;EACE,cAtBe;AD/mDvB;AC2oDM;EACE,cA7Be;AD5mDvB;AC8oDM;EACE,0BAxCiB;ADpmDzB;AC+oDM;EACE,0BAtCmB;ADvmD3B;ACtnBI;EACE;ADynBN;ACtnBI;EACE;ADwnBN;ACrnBI;EACE;ADunBN;AC3gBE;EACE;AD8gBJ;AC3gBE;;EAEE;AD8gBJ;AC3gBE;EACE;AD8gBJ;ACvkBE;EA4DI;AD8gBN;AC1kBE;EA4DI;AD8gBN;ACtkBE;EAwDI;ADihBN;ACrkBE;EAoDI;ADohBN;ACpkBE;EAgDI;ADuhBN;ACpgBE;EACE;ADugBJ;ACpgBE;;EAEE;ADugBJ;ACpgBE;EACE;ADugBJ;ACldI;EACE;ADqdN;ACldI;EACE;ADodN;ACjdI;EACE;ADmdN;AC/cE;EACE;ADkdJ;AC5cI;;;;;EACE;ADmdN;AC9cI;EACE;ADidN;ACzXE;EAEE;AD2XJ;ACvwIE;EAXA;ADqxIF;AC3XE;EACE;EACA;AD8XJ;AC3XM;;EAGE;AD4XR;ACvXE;;EAEE;AD0XJ;ACnXI;;;;EACE;ADyXN;AC3TE;EACE;AD8TJ;AC3TE;;EAEE;AD8TJ;AC3TE;;EAEE;EACA;AD8TJ;AC3TE;;EAEE;AD8TJ;AC1TI;;;;EAIE;AD6TN;ACxSI;EACE,gBAJK;AD+SX;AC1QE;EACE;AD6QJ;AC1QE;EACE;AD6QJ;AC1QE;EACE;AD6QJ;ACzQI;EACE;AD4QN;ACzQI;EACE;AD2QN;ACxQI;EACE;AD0QN;ACrQI;EACE;ADwQN;ACrQI;EACE;ADuQN;ACpQI;EACE;ADsQN;AC/NI;EACE;ADkON;AC/NI;EACE;ADiON;AC9NI;EACE;ADgON;AC3KE;EACE;AD8KJ;ACnME;EACE;ADsMJ;ACnME;;EAIE;ADmMJ;AC3ME;EACE;AD6MJ;AC1ME;;EAIE;AD0MJ;AClNE;EACE;ADoNJ;ACjNE;;EAIE;ADiNJ;AChLM;;EAEE;ADkLR;AC/KM;;EAEE;ADiLR;AC9KM;EACE;ADgLR;AC1KI;EACE;AD4KN;AC5HE;EACE;AD+HJ;AC5HE;EACE;AD+HJ;AC5HE;EACE;AD+HJ;AC5HE;EACE;AD+HJ;AC5HE;EACE;AD+HJ;ACp6IE;EAXA;ADk7IF;AC/HI;EACE;ADiIN;AC3HM;EACE;AD8HR;AC3HM;EACE;AD6HR;AC1HM;EACE;AD4HR;ACxHI;EACE;AD0HN;ACvHI;EACE;ADyHN;AChEE;EACE,yBALmC;EAMnC;ADmEJ;AChEE;EACE,uBAXwB;EAYxB;ADmEJ;ACjEI;EACE,uBAb2B;ADgFjC;AChEI;EAl5IF;ADq9IF;AC5DE;EACE,2CAvBmB;ADsFvB;AC7DI;EACE,0CA1BiB;EA2BjB;AD+DN;AC3DE;EACE,0CAhCmB;EAiCnB;AD8DJ;AC5DI;EACE;EACA,2CArCiB;ADmGvB;AC1DE;EAQI;ADsDN;ACbI;EACE;ADgBN;ACbI;EAGE;ADaN;ACVI;EAGE;ADUN;ACvBI;EACE;ADyBN;ACtBI;EAGE;ADsBN;ACnBI;EAGE;ADmBN;AChCI;EACE;ADkCN;AC/BI;EAGE;AD+BN;AC5BI;EAGE;AD4BN;ACSI;EAGE,uBAhBqB;ADO3B;ACaE;EAthJA;EAwhJE;ADVJ;ACaE;EACE,qCA3BoB;ADiBxB;ACwFE;EACE,qCAVqB;AD3EzB;AC4CE;;;EAGE;ADzCJ;AC4CE;EACE;AD1CJ;AC6CE;EAGE,wCADQ;AD5CZ;ACgCE;;;EAGE;AD7BJ;ACgCE;EACE;AD9BJ;ACiCE;EAGE,yCADQ;ADhCZ;ACoBE;;;EAGE;ADjBJ;ACoBE;EACE;ADlBJ;ACqBE;EAGE,wCADQ;ADpBZ;ACkEI;;EACE,qCA3B2B;ADnCjC;ACmEI;;;EAGE,qCAlCwB;AD9B9B;ACoEM;EACE,qCAvCsB;AD3B9B;ACwEI;EAGE,qCADQ;ADtEd;ACiFM;;EAEE,qCA3DqC;ADpB7C;ACmFQ;;EAEE,qCAhEyC;ADjBnD;ACuFM;EACE,iCA3EiB;EA4EjB;ADrFR;AC0FQ;EACE,iCAjFuB;ADPjC;AC2FQ;EACE,iCApFoB;ADL9B;AC+FE;EACE,gCAvFsB;ADL1B;ACqGE;EACE;EAIA;ADrGJ;AC+GE;EACE;AD5GJ;ACmMI;EAGE;ADlMN;ACwMI;EACE;IACE;EDtMN;AACF;ACyMI;;EAIE;ADzMN;AC4MI;EAGE;EACA;AD5MN;AC+MI;;;EAGE;EACA;AD7MN;ACiNM;EACE;AD/MR;ACkNM;;;EAGE;EACA;ADhNR;ACqNM;EACE;ADnNR;ACsNM;;;EAGE;EACA;ADpNR;ACwNI;EACE;EACA;ADtNN;ACyNI;EACE;ADvNN;AC0NI;EACE;ADxNN;AC4NE;EACE;ADzNJ;AC4NE;EACE;ADzNJ;AC4NE;;;EAGE;ADzNJ;ACgQI;EACE,YALK;ADxPX;ACgQI;;EAEE;AD7PN;ACkQI;EACE;EACA;AD/PN;ACoQM;EACE;ADjQR;ACsQI;EACE;ADnQN;ACkSE;EAYI;AD1SN;ACsVE;;EAEE,4CAJc;AD/UlB;ACuVI;;EAEE,yCAVY;EAWZ;ADpVN;ACwVE;EACE;ADrVJ;ACuVI;EACE;ADrVN;ACyVE;EACE;ADtVJ;ACyVE;EACE;ADtVJ;AC0VE;;EAEE;EACA;ADvVJ;ACqYM;;;;;EACE;AD9XR;ACmXE;EACE;ADjXJ;ACgXE;EACE;AD9WJ;ACuXM;;;;;EACE;ADjXR;ACsWE;EACE;ADpWJ;ACmWE;EACE;ADjWJ;AC0WM;;;;;EACE;ADpWR;ACyVE;EACE;ADvVJ;ACsVE;EACE;ADpVJ;AC6VM;;;;;EACE;ADvVR;ACkWE;EACE;ADhWJ;ACoWE;EACE;ADlWJ;ACoWI;EACE;ADlWN;ACuWE;;;;;EAGE;ADnWJ;ACsWE;EACE;ADpWJ;ACyWE;;;EAEE;ADtWJ;AC8TM;;;;;EACE;ADxTR;ACmUE;EACE;ADjUJ;ACqUE;EACE;ADnUJ;ACqUI;EACE;ADnUN;ACwUE;;;;;EAGE;ADpUJ;ACuUE;EACE;ADrUJ;AC0UE;;;EAEE;ADvUJ;AC+RM;;;;;EACE;ADzRR;ACoSE;EACE;ADlSJ;ACsSE;EACE;ADpSJ;ACsSI;EACE;ADpSN;ACySE;;;;;EAGE;ADrSJ;ACwSE;EACE;ADtSJ;AC2SE;;;EAEE;ADxSJ;AC6ZE;EACE;EACA;AD1ZJ;AC4ZI;EApCF;EACA;ADrXF;AC4ZI;EAxCF;EACA;ADjXF;AC4ZI;EA5CF;EACA;AD7WF;ACiXE;;;EAGE;AD/WJ;ACkXE;;;;;EAKE;ADhXJ;ACmXE;EACE;ADjXJ;ACoVE;EACE,gBA4Ee;AD7ZnB;ACmVE;EACE,YAyEe;ADzZnB;ACqaI;EAzFF;IACE,gBA8Ec;EDtZhB;;EC0UA;IACE,YA2Ec;EDlZhB;AACF;ACqcE;EACE;ADncJ;AC21CE;EACE;ADx1CJ;AC21CE;;EAEE;ADx1CJ;AC82CI;EACE,gBAJK;ADv2CX;AC0eE;EAGE;EACA;EA35KF;ADm7JF;AC6eE;EACE;AD1eJ;AUp7KE;EACE;AVu7KJ;AUp7KE;EACE;EACA;EACA;AVu7KJ;AUp7KE;EACE;EACA;EACA;AVu7KJ;AUp7KE;EACE;EACA;EACA;AVu7KJ;AUp7KE;EACE;EACA;EACA;AVu7KJ;AW58KE;EACE;AX+8KJ;AW78KI;;EAEE;AX+8KN;AW18KQ;EACE;AX48KV;AWv8KQ;EACE;AXy8KV;AWn8KM;EAEE;AXo8KR;AW/7KM;EACE;AXi8KR;AW57KM;EACE;EACA;EACA;AX87KR;AW17KI;EACE;AX47KN;AWx7KE;EACE;AX27KJ;AWx7KE;EACE;AX27KJ;AWx7KE;EACE;AX27KJ;AWx7KE;EACE;AX27KJ;AWx7KE;;EAEE;EACA;AX27KJ;AWx7KE;EACE;AX27KJ;AWx7KE;EACE;AX27KJ;AYngLE;EACE;AZsgLJ;AYlgLI;;EAEE;EACA;AZqgLN;AYjgLE;EACE;AZogLJ;AYjgLE;EACE;AZogLJ;AYjgLE;;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;AZogLJ;AYjgLE;EACE;AZogLJ;AYjgLE;;EAEE;EACA;AZogLJ;AYhgLI;EACE,+BAhD0B;AZmjLhC;AYhgLI;EACE,mBAnDsB;AZqjL5B;AY9/KE;EACE;EACA;AZigLJ;AY9/KE;;EAEE,mBA7DyB;EA8DzB;AZigLJ;AY9/KE;EACE;EACA;EACA;EACA;EXikIF,yBWhkIuB;EXikIvB,sBWjkIuB;EXmkIvB,iBWnkIuB;EAErB;AZmgLJ;AYjgLI;EACE,oHACE;EASF;AZ0/KN;AajlLE;EACE;AbolLJ;ActlLE;EACE;EACA;AdylLJ;AcplLM;EACE;AdulLR;AcplLM;EACE;AdslLR;Ac/kLM;EACE;AdklLR;Ac/kLM;EACE;AdilLR;Ae1mLE;EACE;Af6mLJ;Ae1mLE;EACE;EACA;Af6mLJ;Ae1mLE;EACE;EACA;Af6mLJ;Ae1mLE;EACE;EACA;Af6mLJ;Ae1mLE;EACE;EACA;Af6mLJ;AgB/nLI;EACE;AhBkoLN;AgB/nLQ;EACE;AhBioLV;AgB7nLU;EACE;AhB+nLZ;AgBxnLM;EACE;AhB0nLR;AgBnnLU;EACE;EACA;AhBqnLZ;AgBnnLY;EACE;AhBqnLd;AgBjnLc;EACE;AhBmnLhB;AgB3mLI;EACE;AhB6mLN;AgB3mLM;EACE;AhB6mLR;AgBzmLI;EACE;AhB2mLN;AgBvmLM;EACE;AhBymLR;AgBpmLM;EACE;AhBsmLR;AgBjmLM;EACE;AhBmmLR;AgB9lLE;EACE;AhBimLJ;AgB7lLQ;EACE;AhB+lLV;AgB5lLQ;EACE;AhB8lLV;AgBzlLI;EACE;AhB2lLN;AgBxlLI;EACE;AhB0lLN;AgBtlLM;EACE;AhBwlLR;AgBtlLQ;EACE;AhBwlLV;AgBrlLQ;EACE;AhBulLV;AgBnlLM;EACE;AhBqlLR;AgBnlLQ;EACE;AhBqlLV;AgBllLQ;EACE;AhBolLV;AgBjlLQ;EACE;AhBmlLV;AgBhlLQ;EACE;AhBklLV;AiBjtLI;EACE;AjBotLN;AiBltLM;EACE;AjBotLR;AkBhtLE;EACE;AlBmtLJ;AkB9sLE;EACE,gBAlB2B;EAmB3B,mBAnB2B;EAoB3B,eArBoB;AlBsuLxB;AkB9sLE;EACE,gBAnBA;EAoBA,mBApBA;EAqBA,eAvB4B;AlBwuLhC;AmBvuLE;EACE;AnB0uLJ;AmBtuLI;EACE;EACA;AnByuLN;AmBtuLI;EACE;AnBwuLN;AmBpuLM;EACE;AnBsuLR;AmBnuLM;EACE;AnBquLR;AmBhuLE;EACE;AnBmuLJ;AmBhuLE;EACE;AnBmuLJ;AmBjuLI;EACE;AnBmuLN;AmB9tLI;EACE;AnBiuLN;AoB5wLE;EACE;ApB+wLJ;AoB7wLI;EACE;ApB+wLN;AoB3wLE;EACE;ApB8wLJ;AqBrxLM;EACE;ArBwxLR;AqBnxLE;EACE;ArBsxLJ;AsB7xLE;EACE;EACA;EACA;AtBgyLJ;AsB7xLE;EACE;AtBgyLJ;AuBlyLM;EACE;AvBqyLR;AuBnyLQ;EACE;AvBqyLV;AuBhyLQ;EACE;EACA;AvBkyLV;AuBhyLU;EACE;AvBkyLZ;AuB7xLM;EACE;AvB+xLR;AuBxxLU;EACE;AvB0xLZ;AuBxxLY;EACE;AvB0xLd;AuBrxLQ;EACE;AvBuxLV;AwBh0LE;EACE;EACA;AxBm0LJ;AwBh0LM;EACE;AxBk0LR;AwB7zLE;EACE;AxBg0LJ;AyB/0LE;EACE;EACA;AzBk1LJ;AyB90LI;EACE;AzBi1LN;A0Bt1LE;EACE;A1By1LJ;A2Bh1LQ;EACE;A3Bm1LV;A2B70LU;EACE;A3B+0LZ;A2Bz0LQ;EACE;A3B20LV;AC7hIE;EAII;AD6hIN;ACzyHE;EACE;AD2yHJ;ACzyHI;EAEE;AD0yHN;ACtyHI;EACE;ADwyHN;ACryHI;EACE;EACA;ADuyHN;ACpyHI;EACE;ADsyHN;AClyHE;EACE;ADoyHJ;ACjyHE;EACE;ADmyHJ;AChyHE;EACE;ADkyHJ;ACvvHE;EACE;ADyvHJ;ACtvHE;EACE;ADwvHJ;ACtsHE;EACE;ADwsHJ;ACtsHI;EACE;ADwsHN;ACpsHE;EACE,cAZe;ADktHnB;ACnsHE;;EAEE;ADqsHJ;AC7rHE;;;;EAIE;AD+rHJ;AC5rHE;;EAEE;AD8rHJ;ACzrHI;;EACE,mBAxCa;ADouHnB;ACs9BE;EAIE;EACA;ADv9BJ;AC89BI;EAx4MF;AD66KF;AC29BI;EAx4MF;ADg7KF;ACw9BI;EAx4MF;ADm7KF;ACq9BI;EAx4MF;ADs7KF;ACk9BI;EAx4MF;ADy7KF;AC+8BI;EAx4MF;AD47KF;AC48BI;EAx4MF;AD+7KF;ACy8BI;EAx4MF;ADk8KF;ACs8BI;EAx4MF;ADq8KF;ACm8BI;EAx4MF;ADw8KF;ACg8BI;EAx4MF;AD28KF;AC67BI;EAx4MF;AD88KF;AC07BI;EAx4MF;ADi9KF;ACu7BI;EAx4MF;ADo9KF;ACo7BI;EAx4MF;ADu9KF;ACi7BI;EAx4MF;AD09KF;AC86BI;EAx4MF;AD69KF;AC26BI;EAx4MF;ADg+KF;ACw6BI;EAx4MF;ADm+KF;ACq6BI;EAx4MF;ADs+KF;ACk6BI;EAx4MF;ADy+KF;AC+5BI;EAx4MF;AD4+KF;AC45BI;EAx4MF;AD++KF;ACy5BI;EAx4MF;ADk/KF;ACs5BI;EAx4MF;ADq/KF;AC05BI;EACE;ADx5BN;AClhHE;EAEE;EACA;ADohHJ;ACl/KE;EAXA;ADggLF;AChhHI;EACE;ADkhHN;AChhHM;EACE;ADkhHR;ACp5GE;EACE;EACA;ADs5GJ;ACz1LI;EAs8EE;EACA;ADs5GN;ACj5GI;EACE;EACA;ADo5GN;AC/4GI;EACE;EACA;ADi5GN;AC74GE;EACE;AD+4GJ;AC34GI;EACE;AD64GN;ACx4GI;EAWI;EAMF;AD23GN;ACv3GE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ADy3GJ;ACt3GE;;EAEE;ADw3GJ;ACn3GE;EAEE;ADo3GJ;ACnhHE;EACE,WANmB;EAOnB,YAPmB;EAQnB,iBARmB;AD6hHvB;ACjhHI;EACE;ADmhHN;AC9gHI;EACE;ADghHN;AC3gHI;EACE;AD6gHN;ACxgHI;EACE;EACA;AD0gHN;ACrgHI;EACE;ADugHN;AClgHI;EACE;EACA;ADogHN;AC9/GM;EACE;ADggHR;AC3/GM;EACE;EACA;AD6/GR;ACx/GM;EACE;AD0/GR;ACr/GM;EACE;EACA;ADu/GR;AC1jHE;EACE,WAPqB;EAQrB,YARqB;EASrB,iBATqB;ADqkHzB;ACxjHI;EACE;AD0jHN;ACrjHI;EACE;ADujHN;ACljHI;EACE;ADojHN;AC/iHI;EACE;EACA;ADijHN;AC5iHI;EACE;AD8iHN;ACziHI;EACE;EACA;AD2iHN;ACriHM;EACE;ADuiHR;ACliHM;EACE;EACA;ADoiHR;AC/hHM;EACE;ADiiHR;AC5hHM;EACE;EACA;AD8hHR;ACjmHE;EACE,WALmB;EAMnB,YANmB;EAOnB,iBAPmB;AD0mHvB;AC/lHI;EACE;ADimHN;AC5lHI;EACE;AD8lHN;ACzlHI;EACE;AD2lHN;ACtlHI;EACE;EACA;ADwlHN;ACnlHI;EACE;ADqlHN;AChlHI;EACE;EACA;ADklHN;AC5kHM;EACE;AD8kHR;ACzkHM;EACE;EACA;AD2kHR;ACtkHM;EACE;ADwkHR;ACnkHM;EACE;EACA;ADqkHR;AC16GE;EA/vEA;EAiwEE;EACA;AD46GJ;AC/yGE;EAKE;EACA;AD6yGJ;AC70GE;EACE;AD+0GJ;AC70GE;EACE;AD+0GJ;AC70GE;EACE;AD+0GJ;AC30GI;EAEE;AD40GN;AC/4GE;EACE;ADi5GJ;AC94GE;EACE;ADg5GJ;AC74GE;EACE;AD+4GJ;AC54GE;EACE;AD84GJ;AC7zGI;EACE,YAxGuB;EAyGvB;AD+zGN;AC3zGE;EACE;AD6zGJ;ACxzGE;EACE;AD0zGJ;ACvzGE;EAEE;EACA;ADwzGJ;ACn3GE;EACE;ADq3GJ;ACn3GE;EACE;ADq3GJ;ACn3GE;EACE;ADq3GJ;ACj3GI;EAEE;ADk3GN;AC/3GE;EACE;ADi4GJ;AC/3GE;EACE;ADi4GJ;AC/3GE;EACE;ADi4GJ;AC73GI;EAEE;AD83GN;ACh6GE;EAXA,0CADmB;AD+6GrB;AC/5GE;EAfA,oCADmB;ADk7GrB;AC95GE;EAnBA,0CADmB;ADq7GrB;AC9uLE;EAXA;AD4vLF;ACjvLE;EAXA;AD+vLF;ACpvLE;EAXA;ADkwLF;ACvvLE;EAXA;ADqwLF;AC1vLE;EAXA;ADwwLF;AC7vLE;EAXA;AD2wLF;AChwLE;EAXA;AD8wLF;AC7wGE;;EAjgFA;ADkxLF;AC5wGE;;EAEE;AD8wGJ;AC3wGE;EACE;AD6wGJ;AC3wGI;EACE;AD6wGN;ACzwGE;EACE;EACA;AD2wGJ;ACzwGI;EACE;AD2wGN;ACvwGE;EACE;ADywGJ;ACtwGE;EACE;EACA;ADwwGJ;ACpwGI;EACE;EACA;EACA;ADswGN;AClwGE;EACE;EACA;ADowGJ;AClwGI;EACE;ADowGN;AChwGE;EACE;EACA;ADkwGJ;AChwGI;EACE;ADkwGN;AC/vGI;EACE;ADiwGN;AC7vGE;;EAEE;AD+vGJ;AC1sGE;EAEE;EACA;AD2sGJ;AC7zLE;EAXA;AD20LF;ACh0LE;EAXA;AD80LF;ACzsGE;EACE;AD2sGJ;ACnoGE;EACE;ADqoGJ;ACloGE;EACE,aAdoB;ADkpGxB;ACjoGE;EAGE;ADioGJ;AC9nGE;EACE,yBAxBoB;ADwpGxB;AC5nGI;EACE;AD8nGN;AC3nGI;EACE;AD6nGN;AC1nGI;EACE;AD4nGN;ACrnGM;EACE,yBAtCW;AD6pGnB;AClnGM;EACE,qBA5CW;ADgqGnB;AChnGI;EACE;ADknGN;AC5mGE;EACE;AD8mGJ;ACzmGI;;EACE;AD4mGN;ACzmGI;;EACE;AD4mGN;ACzmGI;;EACE;AD4mGN;ACnhGE;EA3CA,yBAwCwB;EAvCxB,YAwCwB;ADyhG1B;AC/jGE;EACE,YAqCsB;EApCtB;ADikGJ;ACvhGM;EA/2FJ;ADy4LF;ACthGM;EACE;ADwhGR;ACphGI;EACE;ADshGN;ACnhGI;EACE;ADqhGN;AChhGI;EAlEF,yBAwBwE;EAvBxE,YAuBiC;AD8jGnC;ACnlGE;EACE,YAoB+B;EAnB/B;ADqlGJ;AChkGE;EATA,0CADmB;AD6kGrB;ACvhGI;EAtEF,yBAwBwE;EAvBxE,YAuBiC;ADykGnC;AC9lGE;EACE,YAoB+B;EAnB/B;ADgmGJ;AC3kGE;EATA,0CADmB;ADwlGrB;AC9hGI;EA1EF,yBAwBwE;EAvBxE,0BAuBiC;ADolGnC;ACzmGE;EACE,0BAoB+B;EAnB/B;AD2mGJ;ACtlGE;EATA,oCADmB;ADmmGrB;AC/8FE;EACE;ADi9FJ;AC98FE;;;;EAIE;ADg9FJ;AC78FE;;EAEE;AD+8FJ;AC58FE;EACE;AD88FJ;AC38FE;EACE;AD68FJ;ACp2FE;EACE;ADs2FJ;ACj2FE;;;EAGE;ADm2FJ;ACh2FE;EACE;ADk2FJ;AC/1FE;EACE;ADi2FJ;AC91FE;EACE;ADg2FJ;AC71FE;;EAEE;EACA;AD+1FJ;ACr4FE;EA2CI,+BAlCa;AD+3FnB;ACz1FE;EACE,+BAvCe;ADk4FnB;ACx1FE;EAOI;ADo1FN;AC94FE;EAqEI;AD40FN;ACj5FE;EA8EM;ADs0FR;ACrvFE;EACE,mCAtMA;AD67FJ;ACpvFE;;EAEE,kCAViB;ADgwFrB;ACnvFE;;EAEE;ADqvFJ;AClvFE;;EAEE;ADovFJ;ACjvFE;;EAEE,mBAxBc;AD2wFlB;AChvFE;;EAEE,mBA5BuB;AD8wF3B;AC/8FE;EACE;EACA;ADi9FJ;AC98FE;EAII;AD68FN;ACp8FE;EACE;ADs8FJ;ACr7FE;;;EARM;ADk8FR;AC91FE;EAnrGA;EAqrGE;EACA;ADg2FJ;AChyFE;EACE,mCAtMA;ADw+FJ;AC/xFE;;EAEE,kCAViB;AD2yFrB;AC9xFE;;EAEE;ADgyFJ;AC7xFE;;EAEE;AD+xFJ;AC5xFE;;EAEE,mBAxBc;ADszFlB;AC3xFE;;EAEE,mBA5BuB;ADyzF3B;AC1/FE;EACE;EACA;AD4/FJ;ACz/FE;EAII;ADw/FN;AC/+FE;EACE;ADi/FJ;ACh+FE;;;EARM;AD6+FR;ACt0FE;EACE,kCAtMA;AD8gGJ;ACr0FE;;EAEE,kCAViB;ADi1FrB;ACp0FE;;EAEE;ADs0FJ;ACn0FE;;EAEE;ADq0FJ;ACl0FE;;EAEE,mBAxBc;AD41FlB;ACj0FE;;EAEE,mBA5BuB;AD+1F3B;AChiGE;EACE;EACA;ADkiGJ;AC/hGE;EAII;AD8hGN;ACrhGE;EACE;ADuhGJ;ACtgGE;;;EARM;ADmhGR;ACj6FE;EAjsGA;ADqmMF;ACh6FE;EACE;ADk6FJ;ACh6FI;EACE;ADk6FN;AC/5FI;EACE;ADi6FN;AC75FE;EACE;AD+5FJ;AC7zFE;EApzGA;EAszGE;EACA;AD+zFJ;AC3rGE;EACE;AD6rGJ;AC1rGE;EACE;AD4rGJ;AC/uFE;EAEE;EACA;ADgvFJ;ACrnME;EAXA;ADmoMF;AChvFE;EACE;ADkvFJ;ACtwFM;EAwBF;ADivFJ;AC5uFE;EACE;IAEE;ED6uFJ;AACF;AC1uFE;EACE;AD4uFJ;ACzuFE;;EAEE;AD2uFJ;ACxuFE;EACE;AD0uFJ;ACxuFI;;EAEE;AD0uFN;ACrKE;EACE,+BAXY;ADkLhB;ACpKE;EACE,+BAfY;ADqLhB;ACnKE;EACE,cAlBoB;ADuLxB;ACnKI;EACE,cAhBqB;ADqL3B;AClKI;EACE,cAnBmB;ADuLzB;AChKE;EACE,cA7BqB;AD+LzB;AC/JE;EACE,uBA9BqB;AD+LzB;AC7JI;EACE,yBAhCsB;AD+L5B;AC7JM;EACE,yBArCmB;ADoM3B;AC5JM;EACE,yBAxCiB;ADsMzB;ACxJI;EACE,cA9CsB;ADwM5B;ACvJI;EACE,cApDqB;AD6M3B;ACtJI;EACE,cAvDmB;AD+MzB;AChJI;EACE,cAhEmB;ADkNzB;AChJM;;EAEE,cApEiB;ADsNzB;AC9II;;EAEE,yBA1EmB;AD0NzB;AC5IE;EACE,cA/EqB;AD6NzB;AChnBI;EACE,+BALU;ADunBhB;AC/mBI;EACE,+BATU;AD0nBhB;AC9mBI;EACE,0CAZc;AD4nBpB;AC7mBI;EAj/DF;EACA;EACA;ADimFF;AC/RI;EACE,0CAJc;ADqSpB;AC9RI;EAx0EF;EACA;EACA;ADymFF;AChwBI;EACE,0CAPc;ADywBpB;AC/vBI;EACE,2CAVuB;AD2wB7B;AC9vBI;EACE,0CAbc;AD6wBpB;AC5vBM;EACE,+BAjBiB;AD+wBzB;AC3vBM;EACE;AD6vBR;ACxcI;EACE,+BATY;ADmdlB;ACvcI;EACE,YAZkB;ADqdxB;ACrcM;EACE,cAhBkB;ADud1B;ACpcM;EACE,cAnBiB;ADydzB;ACncM;EACE,cAtBe;AD2dvB;AC/bM;EACE,cA7Be;AD8dvB;AC5bM;EACE,+BAxCiB;ADsezB;AC3bM;EACE,gCAtCmB;ADme3B;AChsFI;EACE;ADksFN;AC/rFI;EACE;ADisFN;AC9rFI;EACE;ADgsFN;ACplFE;EACE;ADslFJ;ACnlFE;;EAEE;ADqlFJ;ACllFE;EACE;ADolFJ;AC7oFE;EA4DI;ADolFN;AChpFE;EA4DI;ADolFN;AC5oFE;EAwDI;ADulFN;AC3oFE;EAoDI;AD0lFN;AC1oFE;EAgDI;AD6lFN;ACplFM;EACE,0BA9mHY;ADosMpB;ACnlFM;EACE,0BAhnHa;ADqsMrB;AChlFE;EACE;ADklFJ;AC/kFE;;EAEE;ADilFJ;AC9kFE;EACE;ADglFJ;AC3hFI;EACE;AD6hFN;AC1hFI;EACE;AD4hFN;ACzhFI;EACE;AD2hFN;ACvhFE;EACE;ADyhFJ;ACnhFI;;;;;EACE;ADyhFN;ACphFI;EACE;ADshFN;AC97EE;EAEE;AD+7EJ;AC30ME;EAXA;ADy1MF;AC/7EE;EACE;EACA;ADi8EJ;AC97EM;;EAGE;AD+7ER;AC17EE;;EAEE;AD47EJ;ACr7EI;;;;EACE;AD07EN;AC53EE;EACE;AD83EJ;AC33EE;;EAEE;AD63EJ;AC13EE;;EAEE;EACA;AD43EJ;ACz3EE;;EAEE;AD23EJ;ACv3EI;;;;EAIE;ADy3EN;ACl0EE;EACE;ADo0EJ;ACj0EE;EACE;ADm0EJ;ACh0EE;EACE;ADk0EJ;AC9zEI;EACE;ADg0EN;AC7zEI;EACE;AD+zEN;AC5zEI;EACE;AD8zEN;ACzzEI;EACE;AD2zEN;ACxzEI;EACE;AD0zEN;ACvzEI;EACE;ADyzEN;AClxEI;EACE;ADoxEN;ACjxEI;EACE;ADmxEN;AChxEI;EACE;ADkxEN;AC7tEE;EACE;AD+tEJ;ACpvEE;EACE;ADsvEJ;ACnvEE;;EAIE;ADmvEJ;AC3vEE;EACE;AD6vEJ;AC1vEE;;EAIE;AD0vEJ;AClwEE;EACE;ADowEJ;ACjwEE;;EAIE;ADiwEJ;AChuEM;;EAEE;ADkuER;AC/tEM;;EAEE;ADiuER;AC9tEM;EACE;ADguER;AC1tEI;EACE;AD4tEN;AC5qEE;EACE;AD8qEJ;AC3qEE;EACE;AD6qEJ;AC1qEE;EACE;AD4qEJ;ACzqEE;EACE;AD2qEJ;ACxqEE;EACE;AD0qEJ;AC/8ME;EAXA;AD69MF;AC1qEI;EACE;AD4qEN;ACtqEM;EACE;ADwqER;ACrqEM;EACE;ADuqER;ACpqEM;EACE;ADsqER;AClqEI;EACE;ADoqEN;ACjqEI;EACE;ADmqEN;AC1mEE;EACE,yBALmC;EAMnC;AD4mEJ;ACzmEE;EACE,yBAXwB;EAYxB;AD2mEJ;ACzmEI;EACE,yBAb2B;ADwnEjC;ACxmEI;EAl5IF;AD6/MF;ACpmEE;EACE,iDAvBmB;AD6nEvB;ACpmEI;EACE,gDA1BiB;EA2BjB;ADsmEN;AClmEE;EACE,gDAhCmB;EAiCnB;ADomEJ;AClmEI;EACE;EACA,iDArCiB;ADyoEvB;AChmEE;EAQI;AD2lEN;ACljEI;EACE;ADojEN;ACjjEI;EAGE;ADijEN;AC9iEI;EAGE;AD8iEN;AC3jEI;EACE;AD6jEN;AC1jEI;EAGE;AD0jEN;ACvjEI;EAGE;ADujEN;ACpkEI;EACE;ADskEN;ACnkEI;EAGE;ADmkEN;AChkEI;EAGE;ADgkEN;AC3hEI;EAGE,uBAhBqB;AD2iE3B;ACvhEE;EAthJA;EAwhJE;ADyhEJ;ACthEE;EACE,0CA3BoB;ADmjExB;AC18DE;EACE,0CAVqB;ADs9DzB;ACr/DE;;;EAGE;ADu/DJ;ACp/DE;EACE;ADs/DJ;ACn/DE;EAGE,yCADQ;ADo/DZ;AChgEE;;;EAGE;ADkgEJ;AC//DE;EACE;ADigEJ;AC9/DE;EAGE,yCADQ;AD+/DZ;AC3gEE;;;EAGE;AD6gEJ;AC1gEE;EACE;AD4gEJ;ACzgEE;EAGE,wCADQ;AD0gEZ;AC59DI;;EACE,0CA3B2B;AD0/DjC;AC19DI;;;EAGE,0CAlCwB;AD8/D9B;ACx9DM;EACE,0CAvCsB;ADigE9B;ACp9DI;EAGE,2CADQ;ADq9Dd;AC18DM;;EAEE,uBA3DqC;ADugE7C;ACx8DQ;;EAEE,0CAhEyC;AD0gEnD;ACp8DM;EACE,sCA3EiB;EA4EjB;ADs8DR;ACj8DQ;EACE,sCAjFuB;ADohEjC;ACh8DQ;EACE,sCApFoB;ADshE9B;AC57DE;EACE,sCAvFsB;ADqhE1B;ACr7DE;EACE;EAIA;ADo7DJ;AC16DE;EACE;AD46DJ;ACr1DI;EAGE;ADq1DN;AC/0DI;EACE;IACE;EDi1DN;AACF;AC90DI;;EAIE;AD80DN;AC30DI;EAGE;EACA;AD20DN;ACx0DI;;;EAGE;EACA;AD00DN;ACt0DM;EACE;ADw0DR;ACr0DM;;;EAGE;EACA;ADu0DR;ACl0DM;EACE;ADo0DR;ACj0DM;;;EAGE;EACA;ADm0DR;AC/zDI;EACE;EACA;ADi0DN;AC9zDI;EACE;ADg0DN;AC7zDI;EACE;AD+zDN;AC3zDE;EACE;AD6zDJ;AC1zDE;EACE;AD4zDJ;ACzzDE;;;EAGE;AD2zDJ;AC5tDE;EAYI;ADmtDN;ACvqDE;;EAEE,kDAJc;AD6qDlB;ACrqDI;;EAEE,+CAVY;EAWZ;ADuqDN;ACnqDE;EACE;ADqqDJ;ACnqDI;EACE;ADqqDN;ACjqDE;EACE;ADmqDJ;AChqDE;EACE;ADkqDJ;AC9pDE;;EAEE;EACA;ADgqDJ;AClnDM;;;;;EACE;ADwnDR;ACnoDE;EACE;ADqoDJ;ACtoDE;EACE;ADwoDJ;AC/nDM;;;;;EACE;ADqoDR;AChpDE;EACE;ADkpDJ;ACnpDE;EACE;ADqpDJ;AC5oDM;;;;;EACE;ADkpDR;AC7pDE;EACE;AD+pDJ;AChqDE;EACE;ADkqDJ;ACzpDM;;;;;EACE;AD+pDR;ACppDE;EACE;ADspDJ;AClpDE;EACE;ADopDJ;AClpDI;EACE;ADopDN;AC/oDE;;;;;EAGE;ADmpDJ;AChpDE;EACE;ADkpDJ;AC7oDE;;;EAEE;ADgpDJ;ACxrDM;;;;;EACE;AD8rDR;ACnrDE;EACE;ADqrDJ;ACjrDE;EACE;ADmrDJ;ACjrDI;EACE;ADmrDN;AC9qDE;;;;;EAGE;ADkrDJ;AC/qDE;EACE;ADirDJ;AC5qDE;;;EAEE;AD+qDJ;ACvtDM;;;;;EACE;AD6tDR;ACltDE;EACE;ADotDJ;AChtDE;EACE;ADktDJ;AChtDI;EACE;ADktDN;AC7sDE;;;;;EAGE;ADitDJ;AC9sDE;EACE;ADgtDJ;AC3sDE;;;EAEE;AD8sDJ;ACzlDE;EACE;EACA;AD2lDJ;ACzlDI;EApCF;EACA;ADgoDF;ACzlDI;EAxCF;EACA;ADooDF;ACzlDI;EA5CF;EACA;ADwoDF;ACpoDE;;;EAGE;ADsoDJ;ACnoDE;;;;;EAKE;ADqoDJ;ACloDE;EACE;ADooDJ;AC9hDE;EACE;ADgiDJ;ACxoBE;EACE;AD0oBJ;ACvoBE;;EAEE;ADyoBJ;ACn/CE;EAGE;EACA;EA35KF;AD+4NF;AC/+CE;EACE;ADi/CJ;AU/4OE;EACE;AVi5OJ;AU94OE;EACE;EACA;EACA;AVg5OJ;AU74OE;EACE;EACA;EACA;AV+4OJ;AU54OE;EACE;EACA;EACA;AV84OJ;AU34OE;EACE;EACA;EACA;AV64OJ;AWl6OE;EACE;AXo6OJ;AWl6OI;;EAEE;AXo6ON;AW/5OQ;EACE;AXi6OV;AW55OQ;EACE;AX85OV;AWx5OM;EAEE;AXy5OR;AWp5OM;EACE;AXs5OR;AWj5OM;EACE;EACA;EACA;AXm5OR;AW/4OI;EACE;AXi5ON;AW74OE;EACE;AX+4OJ;AW54OE;EACE;AX84OJ;AW34OE;EACE;AX64OJ;AW14OE;EACE;AX44OJ;AWz4OE;;EAEE;EACA;AX24OJ;AWx4OE;EACE;AX04OJ;AWv4OE;EACE;AXy4OJ;AYj9OE;EACE;AZm9OJ;AY/8OI;;EAEE;EACA;AZi9ON;AY78OE;EACE;AZ+8OJ;AY58OE;EACE;AZ88OJ;AY38OE;;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;AZ68OJ;AY18OE;EACE;AZ48OJ;AYz8OE;;EAEE;EACA;AZ28OJ;AYv8OI;EACE,qCAhD0B;AZy/OhC;AYt8OI;EACE,mBAnDsB;AZ2/O5B;AYp8OE;EACE;EACA;AZs8OJ;AYn8OE;;EAEE,mBA7DyB;EA8DzB;AZq8OJ;AYl8OE;EACE;EACA;EACA;EACA;EXikIF,yBWhkIuB;EXikIvB,sBWjkIuB;EXmkIvB,iBWnkIuB;EAErB;AZs8OJ;AYp8OI;EACE,oHACE;EASF;AZ67ON;AaphPE;EACE;AbshPJ;AcxhPE;EACE;EACA;Ad0hPJ;AcrhPM;EACE;AduhPR;AcphPM;EACE;AdshPR;Ac/gPM;EACE;AdihPR;Ac9gPM;EACE;AdghPR;AeziPE;EACE;Af2iPJ;AexiPE;EACE;EACA;Af0iPJ;AeviPE;EACE;EACA;AfyiPJ;AetiPE;EACE;EACA;AfwiPJ;AeriPE;EACE;EACA;AfuiPJ;AgBzjPI;EACE;AhB2jPN;AgBxjPQ;EACE;AhB0jPV;AgBtjPU;EACE;AhBwjPZ;AgBjjPM;EACE;AhBmjPR;AgB5iPU;EACE;EACA;AhB8iPZ;AgB5iPY;EACE;AhB8iPd;AgB1iPc;EACE;AhB4iPhB;AgBpiPI;EACE;AhBsiPN;AgBpiPM;EACE;AhBsiPR;AgBliPI;EACE;AhBoiPN;AgBhiPM;EACE;AhBkiPR;AgB7hPM;EACE;AhB+hPR;AgB1hPM;EACE;AhB4hPR;AgBvhPE;EACE;AhByhPJ;AgBrhPQ;EACE;AhBuhPV;AgBphPQ;EACE;AhBshPV;AgBjhPI;EACE;AhBmhPN;AgBhhPI;EACE;AhBkhPN;AgB9gPM;EACE;AhBghPR;AgB9gPQ;EACE;AhBghPV;AgB7gPQ;EACE;AhB+gPV;AgB3gPM;EACE;AhB6gPR;AgB3gPQ;EACE;AhB6gPV;AgB1gPQ;EACE;AhB4gPV;AgBzgPQ;EACE;AhB2gPV;AgBxgPQ;EACE;AhB0gPV;AiBzoPI;EACE;AjB2oPN;AiBzoPM;EACE;AjB2oPR;AkBvoPE;EACE;AlByoPJ;AkBpoPE;EACE,gBAlB2B;EAmB3B,mBAnB2B;EAoB3B,eArBoB;AlB2pPxB;AkBnoPE;EACE,gBAnBA;EAoBA,mBApBA;EAqBA,eAvB4B;AlB4pPhC;AmB3pPE;EACE;AnB6pPJ;AmBzpPI;EACE;EACA;AnB2pPN;AmBxpPI;EACE;AnB0pPN;AmBtpPM;EACE;AnBwpPR;AmBrpPM;EACE;AnBupPR;AmBlpPE;EACE;AnBopPJ;AmBjpPE;EACE;AnBmpPJ;AmBjpPI;EACE;AnBmpPN;AmB9oPI;EACE;AnBgpPN;AoB3rPE;EACE;ApB6rPJ;AoB3rPI;EACE;ApB6rPN;AoBzrPE;EACE;ApB2rPJ;AqBlsPM;EACE;ArBosPR;AqB/rPE;EACE;ArBisPJ;AsBxsPE;EACE;EACA;EACA;AtB0sPJ;AsBvsPE;EACE;AtBysPJ;AuB3sPM;EACE;AvB6sPR;AuB3sPQ;EACE;AvB6sPV;AuBxsPQ;EACE;EACA;AvB0sPV;AuBxsPU;EACE;AvB0sPZ;AuBrsPM;EACE;AvBusPR;AuBhsPU;EACE;AvBksPZ;AuBhsPY;EACE;AvBksPd;AuB7rPQ;EACE;AvB+rPV;AwBxuPE;EACE;EACA;AxB0uPJ;AwBvuPM;EACE;AxByuPR;AwBpuPE;EACE;AxBsuPJ;AyBrvPE;EACE;EACA;AzBuvPJ;AyBnvPI;EACE;AzBqvPN;A0B1vPE;EACE;A1B4vPJ;A2BnvPQ;EACE;A3BqvPV;A2B/uPU;EACE;A3BivPZ;A2B3uPQ;EACE;A3B6uPV;A4B1wPA;EACE;A5B6wPF;A4B1wPA;EACE;EACA,mBzBLO;AHkxPT;A4B1wPA;EACE;A5B6wPF;A4BzwPE;EACE;A5B4wPJ;A6B7xPA;AAGE;EACE;A7B8xPJ;A8B9xPA;EACE;EACA;EACA;EACA;A9BiyPF;A8B9xPA;EACE;EACA;A9BiyPF;A8B/xPE;;EAEE;EACA;A9BiyPJ;A+BtyPE;EACE;EACA;EACA;EACA;A/ByyPJ;A+BlyPE;EACE;EACA;EACA;A/BqyPJ;A+BjyPI;EACE;EACA;A/BoyPN;A+BjyPI;EACE;A/BoyPN;A+B1yPI;EACE;EACA;A/B6yPN;A+B1yPI;EACE;A/B6yPN;A+BnzPI;EACE;EACA;A/BszPN;A+BnzPI;EACE;A/BszPN;A+B5zPI;EACE;EACA;A/B+zPN;A+B5zPI;EACE;A/B+zPN;A+Br0PI;EACE;EACA;A/Bw0PN;A+Br0PI;EACE;A/Bw0PN;A+B90PI;EACE;EACA;A/Bi1PN;A+B90PI;EACE;A/Bi1PN;A+Bv1PI;EACE;EACA;A/B01PN;A+Bv1PI;EACE;A/B01PN;A+Bh2PI;EACE;EACA;A/Bm2PN;A+Bh2PI;EACE;A/Bm2PN;A+Bz2PI;EACE;EACA;A/B42PN;A+Bz2PI;EACE;A/B42PN;A+Bl3PI;EACE;EACA;A/Bq3PN;A+Bl3PI;EACE;A/Bq3PN;A+B33PI;EACE;EACA;A/B83PN;A+B33PI;EACE;A/B83PN;A+Bp4PI;EACE;EACA;A/Bu4PN;A+Bp4PI;EACE;A/Bu4PN;AgC/5PI;EDWF;IACE;IACA;IACA;E/Bw5PF;;E+Bp5PE;IACE;IACA;E/Bu5PJ;;E+Bp5PE;IACE;E/Bu5PJ;;E+B75PE;IACE;IACA;E/Bg6PJ;;E+B75PE;IACE;E/Bg6PJ;;E+Bt6PE;IACE;IACA;E/By6PJ;;E+Bt6PE;IACE;E/By6PJ;;E+B/6PE;IACE;IACA;E/Bk7PJ;;E+B/6PE;IACE;E/Bk7PJ;;E+Bx7PE;IACE;IACA;E/B27PJ;;E+Bx7PE;IACE;E/B27PJ;;E+Bj8PE;IACE;IACA;E/Bo8PJ;;E+Bj8PE;IACE;E/Bo8PJ;;E+B18PE;IACE;IACA;E/B68PJ;;E+B18PE;IACE;E/B68PJ;;E+Bn9PE;IACE;IACA;E/Bs9PJ;;E+Bn9PE;IACE;E/Bs9PJ;;E+B59PE;IACE;IACA;E/B+9PJ;;E+B59PE;IACE;E/B+9PJ;;E+Br+PE;IACE;IACA;E/Bw+PJ;;E+Br+PE;IACE;E/Bw+PJ;;E+B9+PE;IACE;IACA;E/Bi/PJ;;E+B9+PE;IACE;E/Bi/PJ;;E+Bv/PE;IACE;IACA;E/B0/PJ;;E+Bv/PE;IACE;E/B0/PJ;AACF;AgCnhQI;EDWF;IACE;IACA;IACA;E/B2gQF;;E+BvgQE;IACE;IACA;E/B0gQJ;;E+BvgQE;IACE;E/B0gQJ;;E+BhhQE;IACE;IACA;E/BmhQJ;;E+BhhQE;IACE;E/BmhQJ;;E+BzhQE;IACE;IACA;E/B4hQJ;;E+BzhQE;IACE;E/B4hQJ;;E+BliQE;IACE;IACA;E/BqiQJ;;E+BliQE;IACE;E/BqiQJ;;E+B3iQE;IACE;IACA;E/B8iQJ;;E+B3iQE;IACE;E/B8iQJ;;E+BpjQE;IACE;IACA;E/BujQJ;;E+BpjQE;IACE;E/BujQJ;;E+B7jQE;IACE;IACA;E/BgkQJ;;E+B7jQE;IACE;E/BgkQJ;;E+BtkQE;IACE;IACA;E/BykQJ;;E+BtkQE;IACE;E/BykQJ;;E+B/kQE;IACE;IACA;E/BklQJ;;E+B/kQE;IACE;E/BklQJ;;E+BxlQE;IACE;IACA;E/B2lQJ;;E+BxlQE;IACE;E/B2lQJ;;E+BjmQE;IACE;IACA;E/BomQJ;;E+BjmQE;IACE;E/BomQJ;;E+B1mQE;IACE;IACA;E/B6mQJ;;E+B1mQE;IACE;E/B6mQJ;AACF;AgCtoQI;EDWF;IACE;IACA;IACA;E/B8nQF;;E+B1nQE;IACE;IACA;E/B6nQJ;;E+B1nQE;IACE;E/B6nQJ;;E+BnoQE;IACE;IACA;E/BsoQJ;;E+BnoQE;IACE;E/BsoQJ;;E+B5oQE;IACE;IACA;E/B+oQJ;;E+B5oQE;IACE;E/B+oQJ;;E+BrpQE;IACE;IACA;E/BwpQJ;;E+BrpQE;IACE;E/BwpQJ;;E+B9pQE;IACE;IACA;E/BiqQJ;;E+B9pQE;IACE;E/BiqQJ;;E+BvqQE;IACE;IACA;E/B0qQJ;;E+BvqQE;IACE;E/B0qQJ;;E+BhrQE;IACE;IACA;E/BmrQJ;;E+BhrQE;IACE;E/BmrQJ;;E+BzrQE;IACE;IACA;E/B4rQJ;;E+BzrQE;IACE;E/B4rQJ;;E+BlsQE;IACE;IACA;E/BqsQJ;;E+BlsQE;IACE;E/BqsQJ;;E+B3sQE;IACE;IACA;E/B8sQJ;;E+B3sQE;IACE;E/B8sQJ;;E+BptQE;IACE;IACA;E/ButQJ;;E+BptQE;IACE;E/ButQJ;;E+B7tQE;IACE;IACA;E/BguQJ;;E+B7tQE;IACE;E/BguQJ;AACF;AgCzvQI;EDWF;IACE;IACA;IACA;E/BivQF;;E+B7uQE;IACE;IACA;E/BgvQJ;;E+B7uQE;IACE;E/BgvQJ;;E+BtvQE;IACE;IACA;E/ByvQJ;;E+BtvQE;IACE;E/ByvQJ;;E+B/vQE;IACE;IACA;E/BkwQJ;;E+B/vQE;IACE;E/BkwQJ;;E+BxwQE;IACE;IACA;E/B2wQJ;;E+BxwQE;IACE;E/B2wQJ;;E+BjxQE;IACE;IACA;E/BoxQJ;;E+BjxQE;IACE;E/BoxQJ;;E+B1xQE;IACE;IACA;E/B6xQJ;;E+B1xQE;IACE;E/B6xQJ;;E+BnyQE;IACE;IACA;E/BsyQJ;;E+BnyQE;IACE;E/BsyQJ;;E+B5yQE;IACE;IACA;E/B+yQJ;;E+B5yQE;IACE;E/B+yQJ;;E+BrzQE;IACE;IACA;E/BwzQJ;;E+BrzQE;IACE;E/BwzQJ;;E+B9zQE;IACE;IACA;E/Bi0QJ;;E+B9zQE;IACE;E/Bi0QJ;;E+Bv0QE;IACE;IACA;E/B00QJ;;E+Bv0QE;IACE;E/B00QJ;;E+Bh1QE;IACE;IACA;E/Bm1QJ;;E+Bh1QE;IACE;E/Bm1QJ;AACF;AiCv3QA;ECDE;EACA;EACA;EACA;AlC23QF;AiCz3QA;ECLE;EACA;EACA;EACA;AlCk4QF;AiC53QA;ECTE;EACA;EACA;EACA;AlCy4QF;AiC/3QA;ECbE;EACA;EACA;EACA;AlCg5QF;AmC/3QI;EAEI;KAAA;AnCi4QR;AmCn4QI;EAEI;KAAA;AnCq4QR;AmCv4QI;EAEI;KAAA;AnCy4QR;AmC34QI;EAEI;KAAA;AnC64QR;AmC/4QI;EAEI;KAAA;AnCi5QR;AmCn5QI;EAEI;AnCq5QR;AmCv5QI;EAEI;AnCy5QR;AmC35QI;EAEI;AnC65QR;AmC/5QI;EAEI;AnCi6QR;AmCn6QI;EAEI;AnCq6QR;AmCv6QI;EAEI;AnCy6QR;AmC36QI;EAEI;AnC66QR;AmC/6QI;EAEI;AnCi7QR;AmCn7QI;EAEI;AnCq7QR;AmCv7QI;EAEI;AnCy7QR;AmC37QI;EAEI;AnC67QR;AmC/7QI;EAEI;AnCi8QR;AmCn8QI;EAEI;AnCq8QR;AmCv8QI;EAEI;AnCy8QR;AmC38QI;EAEI;AnC68QR;AmC/8QI;EAEI;AnCi9QR;AmCn9QI;EAEI;AnCq9QR;AmCv9QI;EAEI;AnCy9QR;AmC39QI;EAEI;AnC69QR;AmC/9QI;EAEI;AnCi+QR;AmCn+QI;EAEI;AnCq+QR;AmCv+QI;EAEI;AnCy+QR;AmC3+QI;EAEI;AnC6+QR;AmC/+QI;EAEI;AnCi/QR;AmCn/QI;EAEI;AnCq/QR;AmCv/QI;EAEI;AnCy/QR;AmC3/QI;EAEI;AnC6/QR;AmC//QI;EAEI;AnCigRR;AmCngRI;EAEI;AnCqgRR;AmCvgRI;EAEI;AnCygRR;AmC3gRI;EAEI;AnC6gRR;AmC/gRI;EAEI;AnCihRR;AmCnhRI;EAEI;AnCqhRR;AmCvhRI;EAEI;AnCyhRR;AmC3hRI;EAEI;AnC6hRR;AmC/hRI;EAEI;AnCiiRR;AmCniRI;EAEI;AnCqiRR;AmCviRI;EAEI;AnCyiRR;AmC3iRI;EAEI;AnC6iRR;AmC/iRI;EAEI;AnCijRR;AmCnjRI;EAEI;AnCqjRR;AmCvjRI;EAEI;AnCyjRR;AmC3jRI;EAEI;AnC6jRR;AmC/jRI;EAEI;AnCikRR;AmCnkRI;EAEI;AnCqkRR;AmCvkRI;EAEI;AnCykRR;AmC3kRI;EAEI;AnC6kRR;AmC/kRI;EAEI;AnCilRR;AmCnlRI;EAEI;AnCqlRR;AmCvlRI;EAEI;AnCylRR;AmC3lRI;EAEI;AnC6lRR;AmC/lRI;EAEI;AnCimRR;AmCnmRI;EAEI;AnCqmRR;AmCvmRI;EAEI;AnCymRR;AmC3mRI;EAEI;AnC6mRR;AmC/mRI;EAEI;AnCinRR;AmCnnRI;EAEI;AnCqnRR;AmCvnRI;EAEI;AnCynRR;AmC3nRI;EAEI;AnC6nRR;AmC/nRI;EAEI;AnCioRR;AmCnoRI;EAEI;AnCqoRR;AmCvoRI;EAEI;AnCyoRR;AmC3oRI;EAEI;AnC6oRR;AmC/oRI;EAEI;AnCipRR;AmCnpRI;EAEI;AnCqpRR;AmCvpRI;EAEI;AnCypRR;AmC3pRI;EAEI;AnC6pRR;AmC/pRI;EAEI;AnCiqRR;AmCnqRI;EAEI;AnCqqRR;AmCvqRI;EAEI;AnCyqRR;AmC3qRI;EAEI;AnC6qRR;AmC/qRI;EAEI;AnCirRR;AmCnrRI;EAEI;AnCqrRR;AmCvrRI;EAEI;AnCyrRR;AmC3rRI;EAEI;AnC6rRR;AmC/rRI;EAEI;AnCisRR;AmCnsRI;EAEI;AnCqsRR;AmCvsRI;EAEI;AnCysRR;AmC3sRI;EAEI;AnC6sRR;AmC/sRI;EAEI;AnCitRR;AmCntRI;EAEI;AnCqtRR;AmCvtRI;EAEI;AnCytRR;AmC3tRI;EAEI;AnC6tRR;AmC/tRI;EAEI;AnCiuRR;AmCnuRI;EAEI;AnCquRR;AmCvuRI;EAEI;AnCyuRR;AmC3uRI;EAEI;AnC6uRR;AmC/uRI;EAEI;AnCivRR;AmCnvRI;EAEI;AnCqvRR;AmCvvRI;EAEI;AnCyvRR;AmC3vRI;EAEI;AnC6vRR;AmC/vRI;EAEI;AnCiwRR;AmCnwRI;EAEI;AnCqwRR;AmCvwRI;EAEI;AnCywRR;AmC3wRI;EAEI;AnC6wRR;AmC/wRI;EAEI;AnCixRR;AmCnxRI;EAEI;AnCqxRR;AmCvxRI;EAEI;AnCyxRR;AmC3xRI;EAEI;AnC6xRR;AmC/xRI;EAEI;AnCiyRR;AmCnyRI;EAEI;AnCqyRR;AmCvyRI;EAEI;AnCyyRR;AmC3yRI;EAEI;AnC6yRR;AmC/yRI;EAEI;AnCizRR;AmCnzRI;EAEI;AnCqzRR;AmCvzRI;EAEI;AnCyzRR;AmC3zRI;EAEI;AnC6zRR;AmC/zRI;EAEI;AnCi0RR;AmCn0RI;EAEI;EAAA;AnCs0RR;AmCx0RI;EAEI;EAAA;AnC20RR;AmC70RI;EAEI;EAAA;AnCg1RR;AmCl1RI;EAEI;EAAA;AnCq1RR;AmCv1RI;EAEI;EAAA;AnC01RR;AmC51RI;EAEI;EAAA;AnC+1RR;AmCj2RI;EAEI;EAAA;AnCo2RR;AmCt2RI;EAEI;EAAA;AnCy2RR;AmC32RI;EAEI;EAAA;AnC82RR;AmCh3RI;EAEI;EAAA;AnCm3RR;AmCr3RI;EAEI;EAAA;AnCw3RR;AmC13RI;EAEI;EAAA;AnC63RR;AmC/3RI;EAEI;EAAA;AnCk4RR;AmCp4RI;EAEI;EAAA;AnCu4RR;AmCz4RI;EAEI;EAAA;AnC44RR;AmC94RI;EAEI;EAAA;AnCi5RR;AmCn5RI;EAEI;EAAA;AnCs5RR;AmCx5RI;EAEI;EAAA;AnC25RR;AmC75RI;EAEI;AnC+5RR;AmCj6RI;EAEI;AnCm6RR;AmCr6RI;EAEI;AnCu6RR;AmCz6RI;EAEI;AnC26RR;AmC76RI;EAEI;AnC+6RR;AmCj7RI;EAEI;AnCm7RR;AmCr7RI;EAEI;AnCu7RR;AmCz7RI;EAEI;AnC27RR;AmC77RI;EAEI;AnC+7RR;AmCj8RI;EAEI;AnCm8RR;AmCr8RI;EAEI;AnCu8RR;AmCz8RI;EAEI;AnC28RR;AmC78RI;EAEI;AnC+8RR;AmCj9RI;EAEI;AnCm9RR;AmCr9RI;EAEI;AnCu9RR;AmCz9RI;EAEI;AnC29RR;AmC79RI;EAEI;AnC+9RR;AmCj+RI;EAEI;AnCm+RR;AmCr+RI;EAEI;AnCu+RR;AmCz+RI;EAEI;AnC2+RR;AmC7+RI;EAEI;AnC++RR;AmCj/RI;EAEI;AnCm/RR;AmCr/RI;EAEI;AnCu/RR;AmCz/RI;EAEI;AnC2/RR;AmC7/RI;EAEI;AnC+/RR;AmCjgSI;EAEI;AnCmgSR;AmCrgSI;EAEI;AnCugSR;AmCzgSI;EAEI;AnC2gSR;AmC7gSI;EAEI;AnC+gSR;AmCjhSI;EAEI;AnCmhSR;AmCrhSI;EAEI;AnCuhSR;AmCzhSI;EAEI;AnC2hSR;AmC7hSI;EAEI;AnC+hSR;AmCjiSI;EAEI;AnCmiSR;AmCriSI;EAEI;AnCuiSR;AmCziSI;EAEI;AnC2iSR;AmC7iSI;EAEI;AnC+iSR;AmCjjSI;EAEI;AnCmjSR;AmCrjSI;EAEI;AnCujSR;AmCzjSI;EAEI;AnC2jSR;AmC7jSI;EAEI;AnC+jSR;AmCjkSI;EAEI;AnCmkSR;AmCrkSI;EAEI;AnCukSR;AmCzkSI;EAEI;EAAA;AnC4kSR;AmC9kSI;EAEI;EAAA;AnCilSR;AmCnlSI;EAEI;EAAA;AnCslSR;AmCxlSI;EAEI;EAAA;AnC2lSR;AmC7lSI;EAEI;EAAA;AnCgmSR;AmClmSI;EAEI;EAAA;AnCqmSR;AmCvmSI;EAEI;EAAA;AnC0mSR;AmC5mSI;EAEI;EAAA;AnC+mSR;AmCjnSI;EAEI;EAAA;AnConSR;AmCtnSI;EAEI;EAAA;AnCynSR;AmC3nSI;EAEI;EAAA;AnC8nSR;AmChoSI;EAEI;EAAA;AnCmoSR;AmCroSI;EAEI;EAAA;AnCwoSR;AmC1oSI;EAEI;EAAA;AnC6oSR;AmC/oSI;EAEI;AnCipSR;AmCnpSI;EAEI;AnCqpSR;AmCvpSI;EAEI;AnCypSR;AmC3pSI;EAEI;AnC6pSR;AmC/pSI;EAEI;AnCiqSR;AmCnqSI;EAEI;AnCqqSR;AmCvqSI;EAEI;AnCyqSR;AmC3qSI;EAEI;AnC6qSR;AmC/qSI;EAEI;AnCirSR;AmCnrSI;EAEI;AnCqrSR;AmCvrSI;EAEI;AnCyrSR;AmC3rSI;EAEI;AnC6rSR;AmC/rSI;EAEI;AnCisSR;AmCnsSI;EAEI;AnCqsSR;AmCvsSI;EAEI;AnCysSR;AmC3sSI;EAEI;AnC6sSR;AmC/sSI;EAEI;AnCitSR;AmCntSI;EAEI;AnCqtSR;AmCvtSI;EAEI;AnCytSR;AmC3tSI;EAEI;AnC6tSR;AmC/tSI;EAEI;AnCiuSR;AmCnuSI;EAEI;AnCquSR;AmCvuSI;EAEI;AnCyuSR;AmC3uSI;EAEI;AnC6uSR;AmC/uSI;EAEI;AnCivSR;AmCnvSI;EAEI;AnCqvSR;AmCvvSI;EAEI;AnCyvSR;AmC3vSI;EAEI;AnC6vSR;AmC/vSI;EAEI;AnCiwSR;AmCnwSI;EAEI;AnCqwSR;AmCvwSI;EAEI;AnCywSR;AmC3wSI;EAEI;AnC6wSR;AmC/wSI;EAEI;AnCixSR;AmCnxSI;EAEI;AnCqxSR;AmCvxSI;EAEI;AnCyxSR;AmC3xSI;EAEI;AnC6xSR;AmC/xSI;EAEI;EAAA;AnCkySR;AmCpySI;EAEI;EAAA;AnCuySR;AmCzySI;EAEI;EAAA;AnC4ySR;AmC9ySI;EAEI;EAAA;AnCizSR;AmCnzSI;EAEI;EAAA;AnCszSR;AmCxzSI;EAEI;EAAA;AnC2zSR;AmC7zSI;EAEI;EAAA;AnCg0SR;AmCl0SI;EAEI;EAAA;AnCq0SR;AmCv0SI;EAEI;EAAA;AnC00SR;AmC50SI;EAEI;EAAA;AnC+0SR;AmCj1SI;EAEI;EAAA;AnCo1SR;AmCt1SI;EAEI;EAAA;AnCy1SR;AmC31SI;EAEI;EAAA;AnC81SR;AmCh2SI;EAEI;EAAA;AnCm2SR;AmCr2SI;EAEI;EAAA;AnCw2SR;AmC12SI;EAEI;EAAA;AnC62SR;AmC/2SI;EAEI;AnCi3SR;AmCn3SI;EAEI;AnCq3SR;AmCv3SI;EAEI;AnCy3SR;AmC33SI;EAEI;AnC63SR;AmC/3SI;EAEI;AnCi4SR;AmCn4SI;EAEI;AnCq4SR;AmCv4SI;EAEI;AnCy4SR;AmC34SI;EAEI;AnC64SR;AmC/4SI;EAEI;AnCi5SR;AmCn5SI;EAEI;AnCq5SR;AmCv5SI;EAEI;AnCy5SR;AmC35SI;EAEI;AnC65SR;AmC/5SI;EAEI;AnCi6SR;AmCn6SI;EAEI;AnCq6SR;AmCv6SI;EAEI;AnCy6SR;AmC36SI;EAEI;AnC66SR;AmC/6SI;EAEI;AnCi7SR;AmCn7SI;EAEI;AnCq7SR;AmCv7SI;EAEI;AnCy7SR;AmC37SI;EAEI;AnC67SR;AmC/7SI;EAEI;AnCi8SR;AmCn8SI;EAEI;AnCq8SR;AmCv8SI;EAEI;AnCy8SR;AmC38SI;EAEI;AnC68SR;AmC/8SI;EAEI;AnCi9SR;AmCn9SI;EAEI;AnCq9SR;AmCv9SI;EAEI;AnCy9SR;AmC39SI;EAEI;AnC69SR;AmC/9SI;EAEI;AnCi+SR;AmCn+SI;EAEI;AnCq+SR;AmCv+SI;EAEI;AnCy+SR;AmC3+SI;EAEI;AnC6+SR;AmC/+SI;EAEI;AnCi/SR;AmCn/SI;EAEI;AnCq/SR;AmCv/SI;EAEI;AnCy/SR;AmC3/SI;EAEI;AnC6/SR;AmC//SI;EAEI;AnCigTR;AmCngTI;EAEI;AnCqgTR;AmCvgTI;EAEI;AnCygTR;AmC3gTI;EAEI;AnC6gTR;AmC/gTI;EAEI;AnCihTR;AmCnhTI;EAEI;AnCqhTR;AmCvhTI;EAEI;AnCyhTR;AmC3hTI;EAEI;AnC6hTR;AmC/hTI;EAEI;AnCiiTR;AmCniTI;EAEI;AnCqiTR;AmCviTI;EAEI;AnCyiTR;AmC3iTI;EAEI;AnC6iTR;AmC/iTI;EAEI;AnCijTR;AmCnjTI;EAEI;AnCqjTR;AmCvjTI;EAEI;AnCyjTR;AmC3jTI;EAEI;AnC6jTR;AmC/jTI;EAEI;AnCikTR;AmCnkTI;EAEI;AnCqkTR;AmCvkTI;EAEI;AnCykTR;AmC3kTI;EAEI;AnC6kTR;AmC/kTI;EAEI;AnCilTR;AmCnlTI;EAEI;AnCqlTR;AmCvlTI;EAEI;AnCylTR;AmC3lTI;EAEI;AnC6lTR;AmC/lTI;EAEI;AnCimTR;AmCnmTI;EAEI;AnCqmTR;AmCvmTI;EAEI;AnCymTR;AoChoTA;AAEA;AACA;EACE;EACA;EACA;ApCkoTF;AoChoTA;EACE;EACA;EACA;ApCmoTF;AoCjoTA;EACE;EACA;EACA;ApCooTF;AoCloTA;EACE;EACA;EACA;ApCqoTF;AoCnoTA;EACE;EACA;EACA;ApCsoTF;AoCpoTA;EACE;EACA;ApCuoTF;AoCroTA;EACE;EACA;ApCwoTF;AoCtoTA;EACE;EACA;ApCyoTF;AoCvoTA;EACE;EACA;ApC0oTF;AoCvoTA;AACA;EACE;ApC0oTF;AoCxoTA;EACE;ApC2oTF;AoCzoTA;;EAEE;ApC4oTF;AoC1oTA;EACE;EACA;ApC6oTF;AoC3oTA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ApC8oTF;AoC5oTA;;EAEE;EACA;EACA;EACA;ApC+oTF;AoC7oTA;;yDAAA;AAGA;EACE;EACA;EACA;EACA;ApCgpTF;AoC9oTA;EACE;EACA;EACA;ApCipTF;AoC/oTA;EACE;ApCkpTF;AoChpTA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;ApCmpTF;AoCjpTA;EACE;EACA;EACA;ApCopTF;AoClpTA;AACA;EACE;ApCqpTF;AoCnpTA;AACA;EACE;ApCspTF;AoCppTA;AACA;EACE;ApCupTF;AoCrpTA;AACA;EACE;ApCwpTF;AoCtpTA;;EAEE;EACA;EACA;ApCypTF;AoCvpTA;;EAEE;EACA;EACA;ApC0pTF;AoCxpTA;EACE;EACA;ApC2pTF;AoCzpTA;EACE;ApC4pTF;AoC1pTA;EACE;ApC6pTF;AoC3pTA;EACE;ApC8pTF;AoC5pTA;EACE;ApC+pTF;AoC7pTA;EACE;EACA;EACA;EACA;EACA;EACA;ApCgqTF;AoC9pTA;AACA;EACE;IACE;IACA;EpCiqTF;;EoC/pTA;IACE;IACA;EpCkqTF;AACF;AoChqTA;EACE;IACE;IACA;EpCkqTF;;EoChqTA;IACE;IACA;EpCmqTF;AACF;AoCjqTA;EACE;IACE;IACA;EpCmqTF;AACF;AqC91TE;EACE;EACA;EACA;EACA;EACA;EpC0fF;ADu2SF;AqC71TI;EpCsfF;AD02SF;AqC31TE;;;;EAIE;EACA;ArC61TJ;AqC11TE;EACE;ArC41TJ;AqCz1TE;EACE;ArC21TJ;AqCx1TE;EACE;ArC01TJ;AqCv1TE;EACE;ArCy1TJ;AqCt1TE;EACE;EACA;ArCw1TJ;AqCt1TI;EACE;EACA;ArCw1TN,C","file":"styles.css","sourcesContent":["/* You can add global styles to this file, and also import other style files */\r\n@import 'app/theme/style';\r\n@import 'styles/themes';\r\n@import 'styles/custom';\r\n@import 'styles/grid';\r\n@import 'styles/helpers';\r\n@import 'styles/plugins';\r\n","// File for which all imports are resolved and bundled. This is the entry-point for\n// the `@angular/material` theming Sass bundle. See `//src/material:theming_bundle`.\n\n// Import all the theming functionality.\n// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$cdk-z-index-overlay-container: 1000 !default;\n$cdk-z-index-overlay: 1000 !default;\n$cdk-z-index-overlay-backdrop: 1000 !default;\n\n// Background color for all of the backdrops\n$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n\n@mixin cdk-overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $cdk-z-index-overlay-container;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $cdk-z-index-overlay;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $cdk-z-index-overlay-backdrop;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $cdk-overlay-dark-backdrop-background;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &, &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n    }\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n\n@mixin cdk-a11y {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param selector-context The selector under which to nest the mixin's content.\n@mixin _cdk-optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param target Which kind of high contrast setting to target. Defaults to `active`, can be\n///    `white-on-black` or `black-on-white`.\n/// @param encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin cdk-high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _cdk-optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _cdk-optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin cdk-text-field {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _cdk-textarea-autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _cdk-textarea-autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n@mixin _cdk-textarea-autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$cdk-text-field-autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin cdk-text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$cdk-text-field-autofill-color-frame-count} both;\n  }\n\n  $cdk-text-field-autofill-color-frame-count:\n      $cdk-text-field-autofill-color-frame-count + 1 !global;\n}\n\n\n// Core styles that can be used to apply material design treatments to any element.\n// Media queries\n// TODO(josephperrott): Change $mat-xsmall and $mat-small usages to rely on BreakpointObserver,\n$mat-xsmall: 'max-width: 599px';\n$mat-small: 'max-width: 959px';\n\n// TODO: Revisit all z-indices before beta\n// z-index master list\n\n$z-index-fab: 20 !default;\n$z-index-drawer: 100 !default;\n\n// Global constants\n$pi: 3.14159265;\n\n// Padding between input toggles and their labels\n$mat-toggle-padding: 8px !default;\n// Width and height of input toggles\n$mat-toggle-size: 20px !default;\n\n// Easing Curves\n// TODO(jelbourn): all of these need to be revisited\n\n// The default animation curves used by material design.\n$mat-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;\n$mat-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$mat-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n\n$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;\n\n$swift-ease-out-duration: 400ms !default;\n$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;\n\n$swift-ease-in-duration: 300ms !default;\n$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;\n$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;\n\n$swift-ease-in-out-duration: 500ms !default;\n$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;\n$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;\n\n$swift-linear-duration: 80ms !default;\n$swift-linear-timing-function: linear !default;\n$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;\n\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$mat-elevation-transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$mat-elevation-transition-timing-function: $mat-fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$mat-elevation-color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$mat-elevation-opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$mat-elevation-prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin mat-elevation($zValue, $color: $mat-elevation-color, $opacity: $mat-elevation-opacity) {\n  @if type-of($zValue) != number or not unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map-get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map-get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map-get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin mat-overridable-elevation(\n    $zValue,\n    $color: $mat-elevation-color,\n    $opacity: $mat-elevation-opacity) {\n  &:not([class*='#{$mat-elevation-prefix}']) {\n    @include mat-elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function mat-elevation-transition-property-value(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin mat-elevation-transition(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  transition: mat-elevation-transition-property-value($duration, $easing);\n}\n\n\n@mixin mat-private-theme-elevation($zValue, $config, $opacity: $mat-elevation-opacity) {\n  $foreground: map-get($config, foreground);\n  $elevation-color: map-get($foreground, elevation);\n  $elevation-color-or-default: if($elevation-color == null, $mat-elevation-color, $elevation-color);\n\n  @include mat-elevation($zValue, $elevation-color-or-default, $opacity);\n}\n\n@mixin mat-private-theme-overridable-elevation($zValue, $config, $opacity: $mat-elevation-opacity) {\n  $foreground: map-get($config, foreground);\n  $elevation-color: map-get($foreground, elevation);\n  $elevation-color-or-default: if($elevation-color == null, $mat-elevation-color, $elevation-color);\n\n  @include mat-overridable-elevation($zValue, $elevation-color-or-default, $opacity);\n}\n\n// If the mat-animation-noop class is present on the components root element,\n// prevent non css animations from running.\n// NOTE: Currently this mixin should only be used with components that do not\n// have any projected content.\n@mixin mat-private-animation-noop() {\n  // @at-root is used to steps outside of the hierarchy of the scss rules. This is\n  // done to allow a class to be added to be added to base of the scss nesting\n  // context.\n  // For example:\n  // .my-root {\n  //   .my-subclass {\n  //      @include mat-private-animation-noop();\n  //    }\n  // }\n  // results in:\n  // ._mat-animation-noopable.my-root .my-subclass { ... }\n  @at-root ._mat-animation-noopable#{&} {\n    transition: none;\n    animation: none;\n    @content;\n  }\n}\n\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$mat-red: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-pink: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-purple: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-deep-purple: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-indigo: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-blue: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-light-blue: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-cyan: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-teal: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-green: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-light-green: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-lime: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-yellow: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-amber: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$mat-orange: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$mat-deep-orange: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-brown: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$mat-grey: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$mat-gray: $mat-grey;\n\n$mat-blue-grey: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$mat-blue-gray: $mat-blue-grey;\n\n\n// Background palette for light themes.\n$mat-light-theme-background: (\n  status-bar: map-get($mat-grey, 300),\n  app-bar:    map-get($mat-grey, 100),\n  background: map-get($mat-grey, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map-get($mat-grey, 300),\n  selected-disabled-button: map-get($mat-grey, 400),\n  disabled-button-toggle: map-get($mat-grey, 200),\n  unselected-chip: map-get($mat-grey, 300),\n  disabled-list-option: map-get($mat-grey, 200),\n  tooltip: map-get($mat-grey, 700),\n);\n\n// Background palette for dark themes.\n$mat-dark-theme-background: (\n  status-bar: black,\n  app-bar:    map-get($mat-grey, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map-get($mat-grey, 800),\n  dialog:     map-get($mat-grey, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map-get($mat-grey, 800),\n  focused-button: $light-focused,\n  selected-button: map-get($mat-grey, 900),\n  selected-disabled-button: map-get($mat-grey, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map-get($mat-grey, 700),\n  disabled-list-option: black,\n  tooltip: map-get($mat-grey, 700),\n);\n\n// Foreground palette for light themes.\n$mat-light-theme-foreground: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$mat-dark-theme-foreground: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n\n// Note that this file is called `private`, because the APIs in it aren't public yet.\n// Once they're made available, the code should be moved out into an `index.scss`.\n\n// Taken from mat-density with small modifications to not rely on the new Sass module\n// system, and to support arbitrary properties in a density configuration.\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-density\n\n$_mat-density-interval: 4px !default;\n$_mat-density-minimum-scale: minimum !default;\n$_mat-density-maximum-scale: maximum !default;\n$_mat-density-supported-scales: (default, minimum, maximum) !default;\n$_mat-density-default-scale: 0 !default;\n\n// Whether density should be generated at root. This will be temporarily set to `true`\n// whenever density styles for legacy themes are generated.\n$mat-private-density-generate-at-root: false;\n// Whether density styles should be generated. This will be temporarily set to `false` if\n// duplicate density styles for a legacy theme would be generated. For legacy themes,\n// we always generate the default density **only once** at root.\n$mat-private-density-generate-styles: true;\n\n// Mixin that can be used to wrap density styles of given components. The mixin will\n// move the density styles to root if the `$mat-private-density-generate-at-root` global variable\n// is set. If `$mat-private-density-generate-styles` is set to `false`, generation of density\n// styles wrapped in this mixin is skipped. This mixin exists to improve backwards compatibility\n// of the new theming API where density styles are included as part of themes. Previously,\n// density styles of components were part of their base styles. With the new API, they are\n// part of the theming system. The `<..>-theme` mixins generate density by default unless\n// the density configuration is explicitly specified as per new API. This means, that projects\n// using `<..>-theme` mixins for separate themes (like `.dark-theme`) will cause duplicate\n// density styles. This is breaking as it increases specificity of density styles. This mixin\n// provides an API to control generation of density styles so that we can ensure they are only\n// created *once* and at root.\n@mixin mat-private-density-legacy-compatibility() {\n  @if $mat-private-density-generate-styles and $mat-private-density-generate-at-root {\n    @at-root {\n      @content;\n    }\n  }\n  @else if $mat-private-density-generate-styles {\n    @content;\n  }\n}\n\n@function mat-private-density-prop-value($density-config, $density-scale, $property-name) {\n  @if (type-of($density-scale) == 'string' and\n      index($list: $_mat-density-supported-scales, $value: $density-scale) == null) {\n    @error 'mat-density: Supported density scales #{$_mat-density-supported-scales}, '  +\n      'but received #{$density-scale}.';\n  }\n\n  $value: null;\n  $property-scale-map: map-get($density-config, $property-name);\n\n  @if map-has-key($property-scale-map, $density-scale) {\n    $value: map-get($property-scale-map, $density-scale);\n  }\n  @else {\n    $value: map-get($property-scale-map, default) + $density-scale * $_mat-density-interval;\n  }\n\n  $min-value: map-get($property-scale-map, $_mat-density-minimum-scale);\n  $max-value: map-get($property-scale-map, $_mat-density-maximum-scale);\n\n  @if ($value < $min-value or $value > $max-value) {\n    @error 'mat-density: #{$property-name} must be between #{$min-value} and ' +\n      '#{$max-value} (inclusive), but received #{$value}.';\n  }\n\n  @return $value;\n}\n\n\n// Whether duplication warnings should be disabled. Warnings enabled by default.\n$mat-theme-ignore-duplication-warnings: false !default;\n\n// Whether density should be generated by default.\n$_mat-theme-generate-default-density: true !default;\n\n// Warning that will be printed if duplicated styles are generated by a theme.\n$_mat-theme-duplicate-warning: 'Read more about how style duplication can be avoided in a ' +\n  'dedicated guide. https://github.com/angular/components/blob/master/guides/duplicate-theming-styles.md';\n\n// These variable are not intended to be overridden externally. They use `!default` to\n// avoid being reset every time this file is imported.\n$_mat-theme-emitted-color: () !default;\n$_mat-theme-emitted-typography: () !default;\n$_mat-theme-emitted-density: () !default;\n\n// For a given hue in a palette, return the contrast color from the map of contrast palettes.\n// @param $palette\n// @param $hue\n@function mat-contrast($palette, $hue) {\n  @return map-get(map-get($palette, contrast), $hue);\n}\n\n\n// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms\n// of the Material Design hues.\n// @param $base-palette\n// @param $default\n// @param $lighter\n// @param $darker\n// @param $text\n@function mat-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {\n  $result: map-merge($base-palette, (\n    default: map-get($base-palette, $default),\n    lighter: map-get($base-palette, $lighter),\n    darker: map-get($base-palette, $darker),\n    text: map-get($base-palette, $text),\n\n    default-contrast: mat-contrast($base-palette, $default),\n    lighter-contrast: mat-contrast($base-palette, $lighter),\n    darker-contrast: mat-contrast($base-palette, $darker)\n  ));\n\n  // For each hue in the palette, add a \"-contrast\" color to the map.\n  @each $hue, $color in $base-palette {\n    $result: map-merge($result, (\n      '#{$hue}-contrast': mat-contrast($base-palette, $hue)\n    ));\n  }\n\n  @return $result;\n}\n\n\n// Gets a color from a theme palette (the output of mat-palette).\n// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured\n// hues (default, lighter, darker), or any of the aforementioned prefixed with \"-contrast\".\n//\n// @param $palette The theme palette (output of mat-palette).\n// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will\n//     be treated as opacity.\n// @param $opacity The alpha channel value for the color.\n@function mat-color($palette, $hue: default, $opacity: null) {\n  // If hueKey is a number between zero and one, then it actually contains an\n  // opacity value, so recall this function with the default hue and that given opacity.\n  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {\n    @return mat-color($palette, default, $hue);\n  }\n\n  $color: map-get($palette, $hue);\n\n  @if (type-of($color) != color) {\n    // If the $color resolved to something different from a color (e.g. a CSS variable),\n    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can\n    // throw an error or output something invalid.\n    @return $color;\n  }\n\n  @return rgba($color, if($opacity == null, opacity($color), $opacity));\n}\n\n// Validates the specified theme by ensuring that the optional color config defines\n// a primary, accent and warn palette. Returns the theme if no failures were found.\n@function _mat-validate-theme($theme) {\n  @if map-get($theme, color) {\n    $color: map-get($theme, color);\n    @if not map-get($color, primary) {\n      @error 'Theme does not define a valid \"primary\" palette.';\n    }\n    @else if not map-get($color, accent) {\n      @error 'Theme does not define a valid \"accent\" palette.';\n    }\n    @else if not map-get($color, warn) {\n      @error 'Theme does not define a valid \"warn\" palette.';\n    }\n  }\n  @return $theme;\n}\n\n// Creates a light-themed color configuration from the specified\n// primary, accent and warn palettes.\n@function _mat-create-light-color-config($primary, $accent, $warn: null) {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: if($warn != null, $warn, mat-palette($mat-red)),\n    is-dark: false,\n    foreground: $mat-light-theme-foreground,\n    background: $mat-light-theme-background,\n  );\n}\n\n// Creates a dark-themed color configuration from the specified\n// primary, accent and warn palettes.\n@function _mat-create-dark-color-config($primary, $accent, $warn: null) {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: if($warn != null, $warn, mat-palette($mat-red)),\n    is-dark: true,\n    foreground: $mat-dark-theme-foreground,\n    background: $mat-dark-theme-background,\n  );\n}\n\n// Creates a container object for a light theme to be given to individual component theme mixins.\n// TODO: Remove legacy API and rename `$primary` to `$config`. Currently it cannot be renamed\n// as it would break existing apps that set the parameter by name.\n@function mat-light-theme($primary, $accent: null, $warn: mat-palette($mat-red)) {\n  // This function creates a container object for the individual component theme mixins. Consumers\n  // can construct such an object by calling this function, or by building the object manually.\n  // There are two possible ways to invoke this function in order to create such an object:\n  //\n  //    (1) Passing in a map that holds optional configurations for individual parts of the\n  //        theming system. For `color` configurations, the function only expects the palettes\n  //        for `primary` and `accent` (and optionally `warn`). The function will expand the\n  //        shorthand into an actual configuration that can be consumed in `-color` mixins.\n  //    (2) Legacy pattern: Passing in the palettes as parameters. This is not as flexible\n  //        as passing in a configuration map because only the `color` system can be configured.\n  //\n  // If the legacy pattern is used, we generate a container object only with a light-themed\n  // configuration for the `color` theming part.\n  @if $accent != null {\n    @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme((\n      _is-legacy-theme: true,\n      color: _mat-create-light-color-config($primary, $accent, $warn),\n    )));\n  }\n  // If the map pattern is used (1), we just pass-through the configurations for individual\n  // parts of the theming system, but update the `color` configuration if set. As explained\n  // above, the color shorthand will be expanded to an actual light-themed color configuration.\n  $result: $primary;\n  @if map-get($primary, color) {\n    $color-settings: map-get($primary, color);\n    $primary: map-get($color-settings, primary);\n    $accent: map-get($color-settings, accent);\n    $warn: map-get($color-settings, warn);\n    $result: map-merge($result, (color: _mat-create-light-color-config($primary, $accent, $warn)));\n  }\n  @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme($result));\n}\n\n// Creates a container object for a dark theme to be given to individual component theme mixins.\n// TODO: Remove legacy API and rename `$primary` to `$config`. Currently it cannot be renamed\n// as it would break existing apps that set the parameter by name.\n@function mat-dark-theme($primary, $accent: null, $warn: mat-palette($mat-red)) {\n  // This function creates a container object for the individual component theme mixins. Consumers\n  // can construct such an object by calling this function, or by building the object manually.\n  // There are two possible ways to invoke this function in order to create such an object:\n  //\n  //    (1) Passing in a map that holds optional configurations for individual parts of the\n  //        theming system. For `color` configurations, the function only expects the palettes\n  //        for `primary` and `accent` (and optionally `warn`). The function will expand the\n  //        shorthand into an actual configuration that can be consumed in `-color` mixins.\n  //    (2) Legacy pattern: Passing in the palettes as parameters. This is not as flexible\n  //        as passing in a configuration map because only the `color` system can be configured.\n  //\n  // If the legacy pattern is used, we generate a container object only with a dark-themed\n  // configuration for the `color` theming part.\n  @if $accent != null {\n    @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme((\n      _is-legacy-theme: true,\n      color: _mat-create-dark-color-config($primary, $accent, $warn),\n    )));\n  }\n  // If the map pattern is used (1), we just pass-through the configurations for individual\n  // parts of the theming system, but update the `color` configuration if set. As explained\n  // above, the color shorthand will be expanded to an actual dark-themed color configuration.\n  $result: $primary;\n  @if map-get($primary, color) {\n    $color-settings: map-get($primary, color);\n    $primary: map-get($color-settings, primary);\n    $accent: map-get($color-settings, accent);\n    $warn: map-get($color-settings, warn);\n    $result: map-merge($result, (color: _mat-create-dark-color-config($primary, $accent, $warn)));\n  }\n  @return mat-private-create-backwards-compatibility-theme(_mat-validate-theme($result));\n}\n\n/// Gets the color configuration from the given theme or configuration.\n@function mat-get-color-config($theme, $default: null) {\n  // If a configuration has been passed, return the config directly.\n  @if not mat-private-is-theme-object($theme) {\n    @return $theme;\n  }\n  // If the theme has been constructed through the legacy theming API, we use the theme object\n  // as color configuration instead of the dedicated `color` property. We do this because for\n  // backwards compatibility, we copied the color configuration from `$theme.color` to `$theme`.\n  // Hence developers could customize the colors at top-level and want to respect these changes\n  // TODO: Remove when legacy theming API is removed.\n  @if mat-private-is-legacy-constructed-theme($theme) {\n    @return $theme;\n  }\n  @if map-has-key($theme, color) {\n    @return map-get($theme, color);\n  }\n  @return $default;\n}\n\n/// Gets the density configuration from the given theme or configuration.\n@function mat-get-density-config($theme-or-config, $default: 0) {\n  // If a configuration has been passed, return the config directly.\n  @if not mat-private-is-theme-object($theme-or-config) {\n    @return $theme-or-config;\n  }\n  // In case a theme has been passed, extract the configuration if present,\n  // or fall back to the default density config.\n  @if map-has-key($theme-or-config, density) {\n    @return map-get($theme-or-config, density);\n  }\n  @return $default;\n}\n\n/// Gets the typography configuration from the given theme or configuration.\n/// For backwards compatibility, typography is not included by default.\n@function mat-get-typography-config($theme-or-config, $default: null) {\n  // If a configuration has been passed, return the config directly.\n  @if not mat-private-is-theme-object($theme-or-config) {\n    @return $theme-or-config;\n  }\n  // In case a theme has been passed, extract the configuration if present,\n  // or fall back to the default typography config.\n  @if (map-has-key($theme-or-config, typography)) {\n    @return map-get($theme-or-config, typography);\n  }\n  @return $default;\n}\n\n\n//\n// Private APIs\n//\n\n// Checks if configurations that have been declared in the given theme have been generated\n// before. If so, warnings will be reported. This should notify developers in case duplicate\n// styles are accidentally generated due to wrong usage of the all-theme mixins.\n//\n// Additionally, this mixin controls the default value for the density configuration. By\n// default, density styles are generated at scale zero. If the same density styles would be\n// generated a second time though, the default value will change to avoid duplicate styles.\n//\n// The mixin keeps track of all configurations in a list that is scoped to the specified\n// id. This is necessary because a given theme can be passed to multiple disjoint theme mixins\n// (e.g. `angular-material-theme` and `angular-material-mdc-theme`) without causing any\n// style duplication.\n@mixin mat-private-check-duplicate-theme-styles($theme-or-color-config, $id) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  $color-config: mat-get-color-config($theme);\n  $density-config: mat-get-density-config($theme);\n  $typography-config: mat-get-typography-config($theme);\n  // Lists of previous `color`, `density` and `typography` configurations.\n  $previous-color: map-get($_mat-theme-emitted-color, $id) or ();\n  $previous-typography: map-get($_mat-theme-emitted-typography, $id) or ();\n  $previous-density: map-get($_mat-theme-emitted-density, $id) or ();\n  // Whether duplicate legacy density styles would be generated.\n  $duplicate-legacy-density: false;\n\n  // Check if the color configuration has been generated before.\n  @if $color-config != null {\n    @if index($previous-color, $color-config) != null and\n        not $mat-theme-ignore-duplication-warnings {\n      @warn 'The same color styles are generated multiple times. ' +\n          $_mat-theme-duplicate-warning;\n    }\n    $previous-color: append($previous-color, $color-config);\n  }\n\n  // Check if the typography configuration has been generated before.\n  @if $typography-config != null {\n    @if index($previous-typography, $typography-config) != null and\n        not $mat-theme-ignore-duplication-warnings {\n      @warn 'The same typography styles are generated multiple times. ' +\n          $_mat-theme-duplicate-warning;\n    }\n    $previous-typography: append($previous-typography, $typography-config);\n  }\n\n  // Check if the density configuration has been generated before.\n  @if $density-config != null {\n    @if index($previous-density, $density-config) != null {\n      // Only report a warning if density styles would be duplicated for non-legacy theme\n      // definitions. For legacy themes, we have compatibility logic that avoids duplication\n      // of default density styles. We don't want to report a warning in those cases.\n      @if mat-private-is-legacy-constructed-theme($theme) {\n        $duplicate-legacy-density: true;\n      }\n      @else if not $mat-theme-ignore-duplication-warnings {\n        @warn 'The same density styles are generated multiple times. ' +\n           $_mat-theme-duplicate-warning;\n      }\n    }\n    $previous-density: append($previous-density, $density-config);\n  }\n\n  $_mat-theme-emitted-color: map-merge(\n      $_mat-theme-emitted-color, ($id: $previous-color)) !global;\n  $_mat-theme-emitted-density: map-merge(\n      $_mat-theme-emitted-density, ($id: $previous-density)) !global;\n  $_mat-theme-emitted-typography: map-merge(\n      $_mat-theme-emitted-typography, ($id: $previous-typography)) !global;\n\n  // Optionally, consumers of this mixin can wrap contents inside so that nested\n  // duplicate style checks do not report another warning. e.g. if developers include\n  // the `angular-material-theme` mixin twice, only the top-level duplicate styles check\n  // should report a warning. Not all individual components should report a warning too.\n  $orig-mat-theme-ignore-duplication-warnings: $mat-theme-ignore-duplication-warnings;\n  $mat-theme-ignore-duplication-warnings: true !global;\n\n  // If duplicate default density styles would be generated for a legacy constructed theme,\n  // we adjust the density generation so that no density styles are generated by default.\n  // If no default density styles have been generated yet, we ensure that the styles\n  // are generated at root. For legacy themes our goal is to generate default density\n  // styles **once** and at root. This matches the old behavior where density styles were\n  // part of the base component styles (that did not use view encapsulation).\n  // TODO: Remove this compatibility logic when the legacy theming API is removed.\n  $mat-private-density-generate-at-root: mat-private-is-legacy-constructed-theme($theme) !global;\n  $mat-private-density-generate-styles: not $duplicate-legacy-density !global;\n\n  @content;\n  $mat-theme-ignore-duplication-warnings: $orig-mat-theme-ignore-duplication-warnings !global;\n\n  $mat-private-density-generate-at-root: false !global;\n  $mat-private-density-generate-styles: true !global;\n}\n\n// Checks whether the given value resolves to a theme object. Theme objects are always\n// of type `map` and can optionally only specify `color`, `density` or `typography`.\n@function mat-private-is-theme-object($value) {\n  @return type-of($value) == 'map' and (\n    map-has-key($value, color) or\n    map-has-key($value, density) or\n    map-has-key($value, typography) or\n    length($value) == 0\n  );\n}\n\n// Checks whether a given value corresponds to a legacy constructed theme.\n@function mat-private-is-legacy-constructed-theme($value) {\n  @return type-of($value) == 'map' and map-get($value, '_is-legacy-theme');\n}\n\n// Creates a backwards compatible theme. Previously in Angular Material, theme objects\n// contained the color configuration directly. With the recent refactoring of the theming\n// system to allow for density and typography configurations, this is no longer the case.\n// To ensure that constructed themes which will be passed to custom theme mixins do not break,\n// we copy the color configuration and put its properties at the top-level of the theme object.\n// Here is an example of a pattern that should still work until it's officially marked as a\n// breaking change:\n//\n//    @mixin my-custom-component-theme($theme) {\n//      .my-comp {\n//        background-color: mat-color(map-get($theme, primary));\n//      }\n//    }\n//\n// Note that the `$theme.primary` key does usually not exist since the color configuration\n// is stored in `$theme.color` which contains a property for `primary`. This method copies\n// the map from `$theme.color` to `$theme` for backwards compatibility.\n@function mat-private-create-backwards-compatibility-theme($theme) {\n  @if not map-get($theme, color) {\n    @return $theme;\n  }\n  $color: map-get($theme, color);\n  @return map-merge($theme, $color);\n}\n\n// Gets the theme from the given value that is either already a theme, or a color configuration.\n// This handles the legacy case where developers pass a color configuration directly to the\n// theme mixin. Before we introduced the new pattern for constructing a theme, developers passed\n// the color configuration directly to the theme mixins. This can be still the case if developers\n// construct a theme manually and pass it to a theme. We support this for backwards compatibility.\n// TODO(devversion): remove this in the future. Constructing themes manually is rare,\n// and the code can be easily updated to the new API.\n@function mat-private-legacy-get-theme($theme-or-color-config) {\n  @if mat-private-is-theme-object($theme-or-color-config) {\n    @return $theme-or-color-config;\n  }\n  @return mat-private-create-backwards-compatibility-theme((\n    _is-legacy-theme: true,\n    color: $theme-or-color-config\n  ));\n}\n\n\n\n$mat-ripple-color-opacity: 0.1;\n\n@mixin mat-ripple() {\n\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk-high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n\n/* Colors for the ripple elements.*/\n@mixin mat-ripple-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $foreground-base: map-get($foreground, base);\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $mat-ripple-color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $mat-ripple-color-opacity;\n    }\n  }\n}\n\n@mixin mat-ripple-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: mat-get-color-config($theme);\n    @if $color != null {\n      @include mat-ripple-color($color);\n    }\n  }\n}\n\n\n// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin mat-fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n\n\n/// Mixin that turns on strong focus indicators.\n///\n/// @example\n///   .my-app {\n///     @include mat-strong-focus-indicators($config);\n///   }\n@mixin mat-strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n    border-style: solid,\n    border-width: 3px,\n    border-radius: 4px,\n  );\n\n  // Merge default config with user config.\n  $config: map-merge($default-config, $config);\n  $border-style: map-get($config, border-style);\n  $border-width: map-get($config, border-width);\n  $border-radius: map-get($config, border-radius);\n\n  // Base styles for focus indicators.\n  .mat-focus-indicator::before {\n    @include mat-fill();\n    box-sizing: border-box;\n    pointer-events: none;\n    border: $border-width $border-style transparent;\n    border-radius: $border-radius;\n  }\n\n  // By default, all focus indicators are flush with the bounding box of their\n  // host element. For particular elements (listed below), default inset/offset\n  // values are necessary to ensure that the focus indicator is sufficiently\n  // contrastive and renders appropriately.\n\n  .mat-focus-indicator.mat-flat-button::before,\n  .mat-focus-indicator.mat-raised-button::before,\n  .mat-focus-indicator.mat-fab::before,\n  .mat-focus-indicator.mat-mini-fab::before,\n  .mat-focus-indicator.mat-chip::before,\n  .mat-focus-indicator.mat-sort-header-container::before {\n    margin: -($border-width + 2px);\n  }\n\n  .mat-focus-indicator.mat-stroked-button::before,\n  .mat-focus-indicator.mat-calendar-body-cell-content::before {\n    margin: -($border-width + 3px);\n  }\n\n  .mat-focus-indicator.mat-tab-link::before,\n  .mat-focus-indicator.mat-tab-label::before {\n    margin: 5px;\n  }\n\n  // Render the focus indicator on focus. Defining a pseudo element's\n  // content will cause it to render.\n\n  // Checkboxes, radios, and slide toggles render focus indicators when the\n  // associated visually-hidden input is focused.\n  .mat-checkbox-input:focus ~ .mat-focus-indicator::before,\n  .mat-radio-input:focus ~ .mat-focus-indicator::before,\n  .mat-slide-toggle-input:focus ~ .mat-slide-toggle-thumb-container .mat-focus-indicator::before,\n\n  // For options, render the focus indicator when the class .mat-active\n  // is present.\n  .mat-focus-indicator.mat-option.mat-active::before,\n\n  // For calendar cells, render the focus indicator when the parent cell is\n  // focused.\n  .mat-calendar-body-cell:focus .mat-focus-indicator::before,\n\n  // For all other components, render the focus indicator on focus.\n  .mat-focus-indicator:focus::before {\n    content: '';\n  }\n}\n\n// Mixin that applies the border color for the focus indicators.\n@mixin _mat-strong-focus-indicators-border-color($color) {\n  .mat-focus-indicator::before {\n    border-color: $color;\n  }\n}\n\n@mixin mat-strong-focus-indicators-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  @include _mat-strong-focus-indicators-border-color(mat-color(map-get($config, primary)));\n}\n\n/// Mixin that sets the color of the focus indicators.\n///\n/// @param {color|map} $theme-or-color\n///   If theme, focus indicators are set to the primary color of the theme. If\n///   color, focus indicators are set to that color.\n///\n/// @example\n///   .demo-dark-theme {\n///     @include mat-strong-focus-indicators-theme($dark-theme-map);\n///   }\n///\n/// @example\n///   .demo-red-theme {\n///     @include mat-strong-focus-indicators-theme(#f00);\n///   }\n/* stylelint-disable-next-line material/theme-mixin-api */\n@mixin mat-strong-focus-indicators-theme($theme-or-color) {\n  @if type-of($theme-or-color) != 'map' {\n    @include _mat-strong-focus-indicators-border-color($theme-or-color);\n  }\n  @else {\n    $theme: mat-private-legacy-get-theme($theme-or-color);\n    @include mat-private-check-duplicate-theme-styles($theme, 'mat-strong-focus-indicators') {\n      $color: mat-get-color-config($theme);\n      @if $color != null {\n        @include mat-strong-focus-indicators-color($color);\n      }\n    }\n  }\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `mat-core`.\n@mixin mat-private-strong-focus-indicators-positioning() {\n  .mat-focus-indicator {\n    position: relative;\n  }\n}\n\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map-get(map-get($config, $level), $name);\n}\n\n// Gets the font size for a level inside a typography config.\n@function mat-font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n// Gets the line height for a level inside a typography config.\n@function mat-line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n// Gets the font weight for a level inside a typography config.\n@function mat-font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n// Gets the letter spacing for a level inside a typography config.\n@function mat-letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n// Gets the font-family from a typography config and removes the quotes around it.\n@function mat-font-family($config, $level: null) {\n  $font-family: map-get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(type-of($font-family) == string, unquote($font-family), $font-family);\n}\n\n// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n// the individual properties if a value that isn't allowed in the shorthand is passed in.\n@mixin mat-typography-font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note\n    // that we need to use interpolation for `font-size/line-height` in order to prevent\n    // Sass from dividing the two values.\n    font: $font-weight #{$font-size}/#{$line-height} $font-family;\n  }\n}\n\n// Converts a typography level into CSS styles.\n@mixin mat-typography-level-to-styles($config, $level) {\n  $font-size: mat-font-size($config, $level);\n  $font-weight: mat-font-weight($config, $level);\n  $line-height: mat-line-height($config, $level);\n  $font-family: mat-font-family($config, $level);\n\n  @include mat-typography-font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: mat-letter-spacing($config, $level);\n}\n\n\n@mixin mat-option-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-option {\n    color: mat-color($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    &.mat-active {\n      background: mat-color($background, hover);\n      color: mat-color($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: mat-color($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: mat-color($warn, text);\n  }\n}\n\n@mixin mat-option-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-option {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _mat-option-density($config-or-theme) {}\n\n@mixin mat-option-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-option-color($color);\n    }\n    @if $density != null {\n      @include _mat-option-density($density);\n    }\n    @if $typography != null {\n      @include mat-option-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-optgroup-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n\n  .mat-optgroup-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: mat-color($foreground, hint-text);\n  }\n}\n\n@mixin mat-optgroup-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-optgroup-label {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n}\n\n@mixin _mat-optgroup-density($config-or-theme) {}\n\n@mixin mat-optgroup-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-optgroup-color($color);\n    }\n    @if $density != null {\n      @include _mat-optgroup-density($density);\n    }\n    @if $typography != null {\n      @include mat-optgroup-typography($typography);\n    }\n  }\n}\n\n\n\n@mixin mat-pseudo-checkbox-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: mat-color(map-get($config, foreground), secondary-text);\n\n    &::after {\n      color: mat-color($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: mat-color(map-get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin mat-pseudo-checkbox-typography($config-or-theme) {}\n\n@mixin _mat-pseudo-checkbox-density($config-or-theme) {}\n\n@mixin mat-pseudo-checkbox-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-pseudo-checkbox-color($color);\n    }\n    @if $density != null {\n      @include _mat-pseudo-checkbox-density($density);\n    }\n    @if $typography != null {\n      @include mat-pseudo-checkbox-typography($typography);\n    }\n  }\n}\n\n\n\n// Represents a typography level from the Material design spec.\n@function mat-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n// Represents a collection of typography levels.\n// Defaults come from https://material.io/guidelines/style/typography.html\n// Note: The spec doesn't mention letter spacing. The values here come from\n// eyeballing it until it looked exactly like the spec examples.\n@function mat-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     mat-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     mat-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     mat-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     mat-typography-level(34px, 40px, 400),\n  $headline:      mat-typography-level(24px, 32px, 400),\n  $title:         mat-typography-level(20px, 32px, 500),\n  $subheading-2:  mat-typography-level(16px, 28px, 400),\n  $subheading-1:  mat-typography-level(15px, 24px, 400),\n  $body-2:        mat-typography-level(14px, 24px, 500),\n  $body-1:        mat-typography-level(14px, 20px, 400),\n  $caption:       mat-typography-level(12px, 20px, 400),\n  $button:        mat-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         mat-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map-get($level, font-family) == null {\n      $new-level: map-merge($level, (font-family: $font-family));\n      $config: map-merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map-merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function mat-private-typography-is-2018-config($config) {\n  @return map-get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function mat-private-typography-is-2014-config($config) {\n  @return map-get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function mat-private-typography-to-2014-config($config) {\n  @if mat-private-typography-is-2018-config($config) {\n    @return mat-typography-config(\n        $display-4: map-get($config, headline-1),\n        $display-3: map-get($config, headline-2),\n        $display-2: map-get($config, headline-3),\n        $display-1: map-get($config, headline-4),\n        $headline: map-get($config, headline-5),\n        $title: map-get($config, headline-6),\n        $subheading-2: map-get($config, subtitle-1),\n        $subheading-1: map-get($config, subtitle-2),\n        $body-2: map-get($config, body-1),\n        $body-1: map-get($config, body-2),\n        $button: map-get($config, button),\n        $caption: map-get($config, caption),\n    );\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function mat-private-typography-to-2018-config($config) {\n  @if mat-private-typography-is-2014-config($config) {\n    @return (\n        headline-1: map-get($config, display-4),\n        headline-2: map-get($config, display-3),\n        headline-3: map-get($config, display-2),\n        headline-4: map-get($config, display-1),\n        headline-5: map-get($config, headline),\n        headline-6: map-get($config, title),\n        subtitle-1: map-get($config, subheading-2),\n        subtitle-2: map-get($config, subheading-1),\n        body-1: map-get($config, body-2),\n        body-2: map-get($config, body-1),\n        button: map-get($config, button),\n        caption: map-get($config, caption),\n    );\n  }\n  @return $config;\n}\n\n// Adds the base typography styles, based on a config.\n/* stylelint-disable-next-line material/theme-mixin-api */\n@mixin mat-base-typography($config, $selector: '.mat-typography') {\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include mat-typography-level-to-styles($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include mat-typography-level-to-styles($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include mat-typography-level-to-styles($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    @include mat-typography-font-shorthand(\n       // calc is used here to support css variables\n      calc(#{mat-font-size($config, body-1)} * 0.83),\n      mat-font-weight($config, body-1),\n      mat-line-height($config, body-1),\n      mat-font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    @include mat-typography-font-shorthand(\n       // calc is used here to support css variables\n      calc(#{mat-font-size($config, body-1)} * 0.67),\n      mat-font-weight($config, body-1),\n      mat-line-height($config, body-1),\n      mat-font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include mat-typography-level-to-styles($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include mat-typography-level-to-styles($config, caption);\n  }\n\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include mat-typography-level-to-styles($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include mat-typography-level-to-styles($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include mat-typography-level-to-styles($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include mat-typography-level-to-styles($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n\n\n\n\n@mixin mat-autocomplete-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n\n  .mat-autocomplete-panel {\n    @include mat-private-theme-overridable-elevation(4, $config);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: mat-color($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: mat-color($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin mat-autocomplete-typography($config-or-theme) {}\n\n@mixin _mat-autocomplete-density($config-or-theme) {}\n\n@mixin mat-autocomplete-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-autocomplete-color($color);\n    }\n    @if $density != null {\n      @include _mat-autocomplete-density($density);\n    }\n    @if $typography != null {\n      @include mat-autocomplete-typography($typography);\n    }\n  }\n}\n\n// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n\n\n\n\n\n$mat-badge-font-size: 12px;\n$mat-badge-font-weight: 600;\n$mat-badge-default-size: 22px !default;\n$mat-badge-small-size: $mat-badge-default-size - 6;\n$mat-badge-large-size: $mat-badge-default-size + 6;\n\n// Mixin for building offset given different sizes\n@mixin _mat-badge-size($size) {\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: -$size / 2;\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: -$size / 2;\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: -$size / 2;\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: -$size / 2;\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: -$size / 2;\n      }\n    }\n  }\n}\n\n@mixin mat-badge-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $primary: map-get($config, primary);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-badge-content {\n    color: mat-color($primary, default-contrast);\n    background: mat-color($primary);\n\n    @include cdk-high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: mat-color($accent);\n      color: mat-color($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: mat-color($warn, default-contrast);\n      background: mat-color($warn);\n    }\n  }\n\n  .mat-badge {\n    position: relative;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: mat-color($background, 'background');\n      $badge-color: mat-color($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (type-of($badge-color) == color and type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _mat-badge-size($mat-badge-small-size);\n  }\n  .mat-badge-medium {\n    @include _mat-badge-size($mat-badge-default-size);\n  }\n  .mat-badge-large {\n    @include _mat-badge-size($mat-badge-large-size);\n  }\n}\n\n@mixin mat-badge-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-badge-content {\n    font-weight: $mat-badge-font-weight;\n    font-size: $mat-badge-font-size;\n    font-family: mat-font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $mat-badge-font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $mat-badge-font-size * 2;\n  }\n}\n\n@mixin _mat-badge-density($config-or-theme) {}\n\n@mixin mat-badge-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-badge-color($color);\n    }\n    @if $density != null {\n      @include _mat-badge-density($density);\n    }\n    @if $typography != null {\n      @include mat-badge-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-bottom-sheet-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include mat-private-theme-elevation(16, $config);\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-bottom-sheet-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-bottom-sheet-container {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n@mixin _mat-bottom-sheet-density($config-or-theme) {}\n\n@mixin mat-bottom-sheet-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-bottom-sheet-color($color);\n    }\n    @if $density != null {\n      @include _mat-bottom-sheet-density($density);\n    }\n    @if $typography != null {\n      @include mat-bottom-sheet-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$_mat-button-ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _mat-button-focus-overlay-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: mat-color($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: mat-color($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: mat-color($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _mat-button-ripple-background($palette, $hue, $opacity) {\n  $background-color: mat-color($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _mat-button-ripple-color($theme, $hue, $opacity: $_mat-button-ripple-opacity) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _mat-button-ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _mat-button-ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _mat-button-ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _mat-button-theme-property($theme, $property, $hue) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: mat-color($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: mat-color($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: mat-color($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: mat-color($palette, disabled-button);\n    }\n  }\n}\n\n@mixin mat-button-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _mat-button-theme-property($config, 'color', text);\n    @include _mat-button-focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_mat-button-ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map-get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: mat-color($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: mat-color($foreground, text);\n    background-color: mat-color($background, raised-button);\n\n    @include _mat-button-theme-property($config, 'color', default-contrast);\n    @include _mat-button-theme-property($config, 'background-color', default);\n    @include _mat-button-ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include mat-private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include mat-private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include mat-private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include mat-private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include mat-private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include mat-private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include mat-private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin mat-button-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: mat-font-family($config, button);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n@mixin _mat-button-density($config-or-theme) {}\n\n@mixin mat-button-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-button-color($color);\n    }\n    @if $density != null {\n      @include _mat-button-density($density);\n    }\n    @if $typography != null {\n      @include mat-button-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n$mat-button-toggle-standard-height: 48px !default;\n// Minimum height for highest density can vary based on the content that developers\n// project into button-toggle's. We use a minimum of `24px` though because commonly\n// icons or text are displayed. Icons by default have a size of `24px`.\n$mat-button-toggle-standard-minimum-height: 24px !default;\n$mat-button-toggle-standard-maximum-height: $mat-button-toggle-standard-height !default;\n\n$mat-button-toggle-standard-density-config: (\n  height: (\n    default: $mat-button-toggle-standard-height,\n    maximum: $mat-button-toggle-standard-maximum-height,\n    minimum: $mat-button-toggle-standard-minimum-height,\n  )\n) !default;\n\n\n@mixin mat-button-toggle-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $divider-color: mat-color($foreground, divider);\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include mat-private-theme-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    box-shadow: none;\n  }\n\n  .mat-button-toggle {\n    color: mat-color($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: mat-color($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: mat-color($foreground, text);\n    background: mat-color($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: mat-color($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: mat-color($background, selected-button);\n    color: mat-color($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: mat-color($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: mat-color($foreground, disabled-button);\n    background-color: mat-color($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: mat-color($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: mat-color($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin mat-button-toggle-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-button-toggle {\n    font-family: mat-font-family($config);\n  }\n}\n\n@mixin mat-button-toggle-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $standard-height: mat-private-density-prop-value(\n      $mat-button-toggle-standard-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin mat-button-toggle-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-button-toggle-color($color);\n    }\n    @if $density != null {\n      @include mat-button-toggle-density($density);\n    }\n    @if $typography != null {\n      @include mat-button-toggle-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-card-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-card {\n    @include mat-private-theme-overridable-elevation(1, $config);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include mat-private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: mat-color($foreground, secondary-text);\n  }\n}\n\n@mixin mat-card-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-card {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: mat-font-size($config, headline);\n      weight: mat-font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: mat-font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin _mat-card-density($config-or-theme) {}\n\n@mixin mat-card-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-card-color($color);\n    }\n    @if $density != null {\n      @include _mat-card-density($density);\n    }\n    @if $typography != null {\n      @include mat-card-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-checkbox-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: mat-color($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: mat-color($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: mat-color($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: mat-color($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: mat-color($foreground, secondary-text);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map-get(map-get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: mat-color($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: mat-color($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-checkbox-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-checkbox {\n    font-family: mat-font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: mat-line-height($config, body-2);\n  }\n}\n\n@mixin _mat-checkbox-density($config-or-theme) {}\n\n@mixin mat-checkbox-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-checkbox-color($color);\n    }\n    @if $density != null {\n      @include _mat-checkbox-density($density);\n    }\n    @if $typography != null {\n      @include mat-checkbox-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n$mat-chip-remove-font-size: 18px;\n\n@mixin _mat-chip-element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _mat-chips-ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: mat-color($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _mat-chip-theme-color($palette) {\n  @include _mat-chip-element-color(mat-color($palette, default-contrast), mat-color($palette));\n\n  .mat-ripple-element {\n    @include _mat-chips-ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin mat-chips-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  $unselected-background: mat-color($background, unselected-chip);\n  $unselected-foreground: mat-color($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _mat-chip-element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include mat-private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map-get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _mat-chip-theme-color($primary);\n    }\n\n    &.mat-warn {\n      @include _mat-chip-theme-color($warn);\n    }\n\n    &.mat-accent {\n      @include _mat-chip-theme-color($accent);\n    }\n  }\n}\n\n@mixin mat-chips-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-chip {\n    font-size: mat-font-size($config, body-2);\n    font-weight: mat-font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $mat-chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _mat-chips-density($config-or-theme) {}\n\n@mixin mat-chips-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-chips-color($color);\n    }\n    @if $density != null {\n      @include _mat-chips-density($density);\n    }\n    @if $typography != null {\n      @include mat-chips-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-divider-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n\n  .mat-divider {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: mat-color($foreground, divider);\n  }\n}\n\n@mixin mat-divider-typography($config-or-theme) {}\n\n@mixin _mat-divider-density($config-or-theme) {}\n\n@mixin mat-divider-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-divider-color($color);\n    }\n    @if $density != null {\n      @include _mat-divider-density($density);\n    }\n    @if $typography != null {\n      @include mat-divider-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-table-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-table {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: mat-color($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-table-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-table {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: mat-font-size($config, caption);\n    font-weight: mat-font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin _mat-table-density($config-or-theme) {}\n\n@mixin mat-table-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-table-color($color);\n    }\n    @if $density != null {\n      @include _mat-table-density($density);\n    }\n    @if $typography != null {\n      @include mat-table-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n$mat-datepicker-selected-today-box-shadow-width: 1px;\n$mat-datepicker-selected-fade-amount: 0.6;\n$mat-datepicker-range-fade-amount: 0.2;\n$mat-datepicker-today-fade-amount: 0.2;\n$mat-calendar-body-font-size: 13px !default;\n$mat-calendar-weekday-table-font-size: 11px !default;\n\n@mixin _mat-datepicker-color($palette) {\n  @include mat-date-range-colors(\n    mat-color($palette, default, $mat-datepicker-range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: mat-color($palette);\n    color: mat-color($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: mat-color($palette);\n\n    @if (type-of($background) == color) {\n      background-color: fade-out($background, $mat-datepicker-selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $mat-datepicker-today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $mat-datepicker-selected-today-box-shadow-width\n                mat-color($palette, default-contrast);\n  }\n\n  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content {\n      @include _mat-datepicker-unselected-cell {\n        background-color: mat-color($palette, 0.3);\n      }\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _mat-datepicker-unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n@mixin mat-datepicker-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $disabled-color: mat-color($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    border-top-color: mat-color($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: mat-color($foreground, icon);\n  }\n\n  .mat-calendar-table-header {\n    color: mat-color($foreground, hint-text);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: mat-color($foreground, divider);\n  }\n\n  .mat-calendar-body-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: mat-color($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _mat-datepicker-unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: mat-color($foreground, divider);\n\n    @if type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _mat-datepicker-unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: mat-color($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _mat-datepicker-unselected-cell {\n      $color: mat-color($foreground, hint-text);\n\n      @if (type-of($color) == color) {\n        border-color: fade-out($color, $mat-datepicker-today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _mat-datepicker-color(map-get($config, primary));\n\n  .mat-datepicker-content {\n    @include mat-private-theme-elevation(4, $config);\n    background-color: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    &.mat-accent {\n      @include _mat-datepicker-color(map-get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _mat-datepicker-color(map-get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include mat-private-theme-elevation(0, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: mat-color(map-get($config, primary), text);\n\n    &.mat-accent {\n      color: mat-color(map-get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: mat-color(map-get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: mat-color($foreground, disabled-text);\n  }\n}\n\n@mixin mat-datepicker-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-calendar {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $mat-calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $mat-calendar-weekday-table-font-size;\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin mat-date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $mat-datepicker-range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: darken($overlap-color, 30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _mat-datepicker-density($config-or-theme) {}\n\n@mixin mat-datepicker-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-datepicker-color($color);\n    }\n    @if $density != null {\n      @include _mat-datepicker-density($density);\n    }\n    @if $typography != null {\n      @include mat-datepicker-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-dialog-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-dialog-container {\n    @include mat-private-theme-elevation(24, $config);\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-dialog-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-dialog-title {\n    @include mat-typography-level-to-styles($config, title);\n  }\n}\n\n@mixin _mat-dialog-density($config-or-theme) {}\n\n@mixin mat-dialog-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-dialog-color($color);\n    }\n    @if $density != null {\n      @include _mat-dialog-density($density);\n    }\n    @if $typography != null {\n      @include mat-dialog-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n// Default minimum and maximum height for collapsed panel headers.\n$mat-expansion-panel-header-collapsed-height: 48px !default;\n$mat-expansion-panel-header-collapsed-minimum-height: 36px !default;\n$mat-expansion-panel-header-collapsed-maximum-height:\n    $mat-expansion-panel-header-collapsed-height !default;\n\n// Default minimum and maximum height for expanded panel headers.\n$mat-expansion-panel-header-expanded-height: 64px !default;\n$mat-expansion-panel-header-expanded-minimum-height: 48px !default;\n$mat-expansion-panel-header-expanded-maximum-height:\n    $mat-expansion-panel-header-expanded-height !default;\n\n// Density configuration for the expansion panel. Captures the\n// height for both expanded and collapsed panel headers.\n$mat-expansion-panel-header-density-config: (\n  collapsed-height: (\n    default: $mat-expansion-panel-header-collapsed-height,\n    maximum: $mat-expansion-panel-header-collapsed-maximum-height,\n    minimum: $mat-expansion-panel-header-collapsed-minimum-height,\n  ),\n  expanded-height: (\n    default: $mat-expansion-panel-header-expanded-height,\n    maximum: $mat-expansion-panel-header-expanded-maximum-height,\n    minimum: $mat-expansion-panel-header-expanded-minimum-height,\n  )\n) !default;\n\n// Note: Keep this in sync with the animation timing for the toggle indicator\n// and body expansion. These are animated using Angular animations.\n$mat-expansion-panel-header-transition: 225ms cubic-bezier(0.4, 0, 0.2, 1);\n\n@mixin mat-private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n\n\n@mixin mat-expansion-panel-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-expansion-panel {\n    @include mat-private-theme-overridable-elevation(2, $config);\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  @include mat-private-expansion-focus {\n    background: mat-color($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: mat-color($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: mat-color($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin mat-expansion-panel-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-expansion-panel-header {\n    font: {\n      family: mat-font-family($config, subheading-1);\n      size: mat-font-size($config, subheading-1);\n      weight: mat-font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n@mixin mat-expansion-panel-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $expanded-height: mat-private-density-prop-value(\n        $mat-expansion-panel-header-density-config, $density-scale, expanded-height);\n  $collapsed-height: mat-private-density-prop-value(\n      $mat-expansion-panel-header-density-config, $density-scale, collapsed-height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin mat-expansion-panel-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-expansion-panel') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-expansion-panel-color($color);\n    }\n    @if $density != null {\n      @include mat-expansion-panel-density($density);\n    }\n    @if $typography != null {\n      @include mat-expansion-panel-typography($typography);\n    }\n  }\n}\n\n\n\n\n// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin mat-truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin mat-line-base($secondary-font-size) {\n  .mat-line {\n    @include mat-truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin mat-normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin mat-line-wrapper-base() {\n  @include mat-normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin mat-grid-list-color($config-or-theme) {}\n\n@mixin mat-grid-list-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include mat-line-base(mat-font-size($config, caption));\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin _mat-grid-list-density($config-or-theme) {}\n\n@mixin mat-grid-list-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-grid-list-color($color);\n    }\n    @if $density != null {\n      @include _mat-grid-list-density($density);\n    }\n    @if $typography != null {\n      @include mat-grid-list-typography($typography);\n    }\n  }\n}\n\n\n\n@mixin mat-icon-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: mat-color($primary, text);\n    }\n\n    &.mat-accent {\n      color: mat-color($accent, text);\n    }\n\n    &.mat-warn {\n      color: mat-color($warn, text);\n    }\n  }\n}\n\n@mixin mat-icon-typography($config-or-theme) {}\n\n@mixin _mat-icon-density($config-or-theme) {}\n\n@mixin mat-icon-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-icon-color($color);\n    }\n    @if $density != null {\n      @include _mat-icon-density($density);\n    }\n    @if $typography != null {\n      @include mat-icon-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin mat-private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function mat-private-control-placeholder-color($config) {\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n  @return mat-color($foreground, secondary-text, if($is-dark-theme, 0.5, 0.42));\n}\n\n\n/* stylelint-disable material/no-prefixes */\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  -moz-user-select: $value;\n  -ms-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin position-sticky($important: false) {\n  position: -webkit-sticky #{if($important, '!important', '')};\n  position: sticky #{if($important, '!important', '')};\n}\n/* stylelint-enable */\n\n\n\n@mixin mat-input-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $foreground: map-get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: mat-color($primary, text);\n\n    @include input-placeholder {\n      color: mat-private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map-get($config, is-dark)) {\n      option {\n        color: $dark-primary-text;\n      }\n\n      option:disabled {\n        color: $dark-disabled-text;\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: mat-color($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: mat-color($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: mat-color($warn, text);\n  }\n}\n\n@mixin mat-input-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: -$line-spacing * 1em;\n  }\n}\n\n@mixin _mat-input-density($config-or-theme) {}\n\n@mixin mat-input-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-input-color($color);\n    }\n    @if $density != null {\n      @include _mat-input-density($density);\n    }\n    @if $typography != null {\n      @include mat-input-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-list-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-list-option {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-subheader {\n      color: mat-color($foreground, secondary-text);\n    }\n  }\n\n  .mat-list-item-disabled {\n    background-color: mat-color($background, disabled-list-option);\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: mat-color($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: mat-color($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin mat-list-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  $font-family: mat-font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: mat-font-family($config, body-2);\n      font-size: mat-font-size($config, body-2);\n      font-weight: mat-font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: mat-font-size($config, caption);\n      font-weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _mat-list-density($config-or-theme) {}\n\n@mixin mat-list-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-list-color($color);\n    }\n    @if $density != null {\n      @include _mat-list-density($density);\n    }\n    @if $typography != null {\n      @include mat-list-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-menu-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-menu-panel {\n    @include mat-private-theme-overridable-elevation(4, $config);\n    background: mat-color($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: mat-color($foreground, 'text');\n\n    &[disabled] {\n      &,\n      &::after,\n      .mat-icon-no-color {\n        color: mat-color($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-item-submenu-trigger::after {\n    color: mat-color($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: mat-color($background, 'hover');\n    }\n  }\n}\n\n@mixin mat-menu-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-menu-item {\n    font: {\n      family: mat-font-family($config, body-1);\n      size: mat-font-size($config, body-1);\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _mat-menu-density($config-or-theme) {}\n\n@mixin mat-menu-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-menu-color($color);\n    }\n    @if $density != null {\n      @include _mat-menu-density($density);\n    }\n    @if $typography != null {\n      @include mat-menu-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n$mat-paginator-height: 56px !default;\n// Minimum height for paginator's in the highest density is determined based on how\n// much the paginator can shrink until the content exceeds (i.e. navigation buttons).\n$mat-paginator-minimum-height: 40px !default;\n$mat-paginator-maximum-height: $mat-paginator-height !default;\n\n$mat-paginator-density-config: (\n  height: (\n    default: $mat-paginator-height,\n    maximum: $mat-paginator-maximum-height,\n    minimum: $mat-paginator-minimum-height,\n  )\n) !default;\n\n\n@mixin mat-paginator-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n\n  .mat-paginator {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid mat-color($foreground, 'icon');\n    border-right: 2px solid mat-color($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid mat-color($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: mat-color($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin mat-paginator-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: mat-font-family($config, caption);\n      size: mat-font-size($config, caption);\n    }\n  }\n}\n\n@mixin mat-paginator-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height: mat-private-density-prop-value($mat-paginator-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin mat-paginator-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-paginator-color($color);\n    }\n    @if $density != null {\n      @include mat-paginator-density($density);\n    }\n    @if $typography != null {\n      @include mat-paginator-typography($typography);\n    }\n  }\n}\n\n\n\n\n@mixin mat-progress-bar-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-progress-bar-background {\n    fill: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: mat-color($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-bar-typography($config-or-theme) {}\n\n@mixin _mat-progress-bar-density($config-or-theme) {}\n\n@mixin mat-progress-bar-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-progress-bar-color($color);\n    }\n    @if $density != null {\n      @include _mat-progress-bar-density($density);\n    }\n    @if $typography != null {\n      @include mat-progress-bar-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-progress-spinner-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: mat-color($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: mat-color($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-spinner-typography($config-or-theme) {}\n\n@mixin _mat-progress-spinner-density($config-or-theme) {}\n\n@mixin mat-progress-spinner-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-progress-spinner-color($color);\n    }\n    @if $density != null {\n      @include _mat-progress-spinner-density($density);\n    }\n    @if $typography != null {\n      @include mat-progress-spinner-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin _mat-radio-color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: mat-color($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: mat-color($palette);\n  }\n}\n\n@mixin mat-radio-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _mat-radio-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-radio-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-radio-color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: mat-color($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: mat-color($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: mat-color($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map-get($foreground, base);\n    }\n  }\n}\n\n@mixin mat-radio-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-radio-button {\n    font-family: mat-font-family($config);\n  }\n}\n\n@mixin _mat-radio-density($config-or-theme) {}\n\n@mixin mat-radio-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-radio-color($color);\n    }\n    @if $density != null {\n      @include _mat-radio-density($density);\n    }\n    @if $typography != null {\n      @include mat-radio-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n@mixin mat-select-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-select-value {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: mat-private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: mat-color($background, card);\n    @include mat-private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: mat-color($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: mat-color($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: mat-color($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: mat-color($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: mat-color($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin mat-select-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  .mat-select {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: $line-height * 1em;\n  }\n}\n\n@mixin _mat-select-density($config-or-theme) {}\n\n@mixin mat-select-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-select-color($color);\n    }\n    @if $density != null {\n      @include _mat-select-density($density);\n    }\n    @if $typography != null {\n      @include mat-select-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-sidenav-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  $drawer-background-color: mat-color($background, dialog);\n  $drawer-container-background-color:  mat-color($background, background);\n  $drawer-push-background-color: mat-color($background, dialog);\n  $drawer-side-border: solid 1px mat-color($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: mat-color($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: mat-color($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include mat-private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: mat-color($background, card, $opacity);\n\n    @if (type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin mat-sidenav-typography($config-or-theme) {}\n\n@mixin _mat-sidenav-density($config-or-theme) {}\n\n@mixin mat-sidenav-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-sidenav-color($color);\n    }\n    @if $density != null {\n      @include _mat-sidenav-density($density);\n    }\n    @if $typography != null {\n      @include mat-sidenav-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin _mat-slide-toggle-checked($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: mat-color($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin mat-slide-toggle-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark: map-get($config, is-dark);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: mat-color($foreground, disabled);\n  $ripple-unchecked-color: mat-color($foreground, base);\n\n  .mat-slide-toggle {\n    @include _mat-slide-toggle-checked($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _mat-slide-toggle-checked($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _mat-slide-toggle-checked($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include mat-private-theme-elevation(1, $config);\n    background-color: mat-color($mat-grey, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin mat-slide-toggle-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-slide-toggle-content {\n    font-family: mat-font-family($config);\n  }\n}\n\n@mixin _mat-slide-toggle-density($config-or-theme) {}\n\n@mixin mat-slide-toggle-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-slide-toggle-color($color);\n    }\n    @if $density != null {\n      @include _mat-slide-toggle-density($density);\n    }\n    @if $typography != null {\n      @include mat-slide-toggle-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin _mat-slider-inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: mat-color($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: mat-color($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: mat-color($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin mat-slider-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  $mat-slider-off-color: mat-color($foreground, slider-off);\n  $mat-slider-off-focused-color: mat-color($foreground, slider-off-active);\n  $mat-slider-disabled-color: mat-color($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color: mat-color($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color: mat-color($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color: mat-color($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-primary {\n    @include _mat-slider-inner-content-theme($primary);\n  }\n\n  .mat-accent {\n    @include _mat-slider-inner-content-theme($accent);\n  }\n\n  .mat-warn {\n    @include _mat-slider-inner-content-theme($warn);\n  }\n\n  .mat-slider:hover,\n  .cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: mat-color($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin mat-slider-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-slider-thumb-label-text {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, caption);\n      weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _mat-slider-density($config-or-theme) {}\n\n@mixin mat-slider-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-slider-color($color);\n    }\n    @if $density != null {\n      @include _mat-slider-density($density);\n    }\n    @if $typography != null {\n      @include mat-slider-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$mat-stepper-header-height: 72px !default;\n// Minimum height for highest density stepper's is determined based on how much\n// stepper headers can shrink until the step icon or step label exceed. We can't use\n// a value below `42px` because the optional label for steps would otherwise exceed.\n$mat-stepper-header-minimum-height: 42px !default;\n$mat-stepper-header-maximum-height: $mat-stepper-header-height !default;\n\n$mat-stepper-density-config: (\n  height: (\n    default: $mat-stepper-header-height,\n    maximum: $mat-stepper-header-maximum-height,\n    minimum: $mat-stepper-header-minimum-height,\n  )\n) !default;\n\n// Note: These variables are not denoted with `!default` because they are used in the non-theme\n// component styles. Modifying these variables does not have the desired effect for consumers.\n$mat-stepper-label-header-height: 24px;\n$mat-stepper-label-position-bottom-top-gap: 16px;\n$mat-stepper-label-min-width: 50px;\n\n$mat-vertical-stepper-content-margin: 36px;\n\n$mat-stepper-side-gap: 24px;\n$mat-stepper-line-width: 1px;\n$mat-stepper-line-gap: 8px;\n\n$mat-step-sub-label-font-size: 12px;\n$mat-step-header-icon-size: 16px;\n\n\n@mixin mat-stepper-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $background: map-get($config, background);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover {\n      background-color: mat-color($background, hover);\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: mat-color($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: mat-color($foreground, secondary-text);\n      color: mat-color($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: mat-color($primary);\n      color: mat-color($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: mat-color($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: mat-color($accent);\n        color: mat-color($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: mat-color($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: mat-color($warn);\n        color: mat-color($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: mat-color($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: mat-color($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: mat-color($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: mat-color($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: mat-color($foreground, divider);\n  }\n}\n\n@mixin mat-stepper-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: mat-font-size($config, body-1);\n      weight: mat-font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: mat-font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: mat-font-size($config, body-2);\n      weight: mat-font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin mat-stepper-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height: mat-private-density-prop-value($mat-stepper-density-config, $density-scale, height);\n  $vertical-padding: ($height - $mat-stepper-label-header-height) / 2;\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding $mat-stepper-side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: $mat-stepper-line-gap - $vertical-padding;\n      bottom: $mat-stepper-line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + $mat-stepper-label-header-height / 2;\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + $mat-stepper-label-header-height / 2;\n    }\n  }\n}\n\n@mixin mat-stepper-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-stepper-color($color);\n    }\n    @if $density != null {\n      @include mat-stepper-density($density);\n    }\n    @if $typography != null {\n      @include mat-stepper-typography($typography);\n    }\n  }\n}\n\n\n\n@mixin mat-sort-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: mat-color($background, 'card');\n    $text-color: mat-color($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (type-of($table-background) == color and type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin mat-sort-typography($config-or-theme) {}\n\n@mixin _mat-sort-density($config-or-theme) {}\n\n@mixin mat-sort-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-sort-color($color);\n    }\n    @if $density != null {\n      @include _mat-sort-density($density);\n    }\n    @if $typography != null {\n      @include mat-sort-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-tabs-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n  $header-border: 1px solid mat-color($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: mat-color($foreground, text);\n\n    &.mat-tab-disabled {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: mat-color($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: mat-color($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _mat-tab-label-focus($color);\n        @include _mat-ink-bar($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _mat-ink-bar($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _mat-tab-label-focus($color);\n        @include _mat-tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _mat-ink-bar($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: mat-color($color, $hue);\n  }\n}\n\n@mixin _mat-tab-label-focus($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: mat-color($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _mat-tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: mat-color($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: mat-color($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: mat-color($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-links .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: mat-color($background-color, default-contrast);\n  }\n\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: mat-color($background-color, default-contrast, 0.4);\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element {\n    background-color: mat-color($background-color, default-contrast, 0.12);\n  }\n}\n\n@mixin mat-tabs-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-tab-group {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: mat-font-family($config, button);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n@mixin _mat-tabs-density($config-or-theme) {}\n\n@mixin mat-tabs-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-tabs-color($color);\n    }\n    @if $density != null {\n      @include _mat-tabs-density($density);\n    }\n    @if $typography != null {\n      @include mat-tabs-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n// Minimum height for toolbar's in the highest density is difficult to determine because\n// developers can project arbitrary content. We use a minimum value that ensures that most\n// common content (e.g. icon buttons) does not exceed the row boundaries in highest density.\n$mat-toolbar-minimum-height: 44px !default;\n\n$mat-toolbar-height-desktop: 64px !default;\n$mat-toolbar-maximum-height-desktop: $mat-toolbar-height-desktop !default;\n$mat-toolbar-minimum-height-desktop: $mat-toolbar-minimum-height !default;\n\n$mat-toolbar-height-mobile: 56px !default;\n$mat-toolbar-maximum-height-mobile: $mat-toolbar-height-mobile !default;\n$mat-toolbar-minimum-height-mobile: $mat-toolbar-minimum-height !default;\n\n$mat-toolbar-desktop-density-config: (\n  height: (\n    default: $mat-toolbar-height-desktop,\n    maximum: $mat-toolbar-maximum-height-desktop,\n    minimum: $mat-toolbar-minimum-height-desktop,\n  )\n) !default;\n\n$mat-toolbar-mobile-density-config: (\n  height: (\n    default: $mat-toolbar-height-mobile,\n    maximum: $mat-toolbar-maximum-height-mobile,\n    minimum: $mat-toolbar-minimum-height-mobile,\n  )\n) !default;\n\n\n@mixin _mat-toolbar-height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _mat-toolbar-color($palette) {\n  background: mat-color($palette);\n  color: mat-color($palette, default-contrast);\n}\n\n@mixin _mat-toolbar-form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin mat-toolbar-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-toolbar {\n    background: mat-color($background, app-bar);\n    color: mat-color($foreground, text);\n\n    &.mat-primary {\n      @include _mat-toolbar-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-toolbar-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-toolbar-color($warn);\n    }\n\n    @include _mat-toolbar-form-field-overrides;\n  }\n}\n\n@mixin mat-toolbar-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0;\n  }\n}\n\n@mixin mat-toolbar-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height-desktop: mat-private-density-prop-value(\n      $mat-toolbar-desktop-density-config, $density-scale, height);\n  $height-mobile: mat-private-density-prop-value(\n      $mat-toolbar-mobile-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _mat-toolbar-height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media ($mat-xsmall) {\n      @include _mat-toolbar-height($height-mobile);\n    }\n  }\n}\n\n@mixin mat-toolbar-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-toolbar-color($color);\n    }\n    @if $density != null {\n      @include mat-toolbar-density($density);\n    }\n    @if $typography != null {\n      @include mat-toolbar-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$mat-tooltip-target-height: 22px;\n$mat-tooltip-font-size: 10px;\n$mat-tooltip-vertical-padding: ($mat-tooltip-target-height - $mat-tooltip-font-size) / 2;\n\n$mat-tooltip-handset-target-height: 30px;\n$mat-tooltip-handset-font-size: 14px;\n$mat-tooltip-handset-vertical-padding:\n    ($mat-tooltip-handset-target-height - $mat-tooltip-handset-font-size) / 2;\n\n@mixin mat-tooltip-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n\n  .mat-tooltip {\n    background: mat-color($background, tooltip, 0.9);\n  }\n}\n\n@mixin mat-tooltip-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-tooltip {\n    font-family: mat-font-family($config);\n    font-size: $mat-tooltip-font-size;\n    padding-top: $mat-tooltip-vertical-padding;\n    padding-bottom: $mat-tooltip-vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $mat-tooltip-handset-font-size;\n    padding-top: $mat-tooltip-handset-vertical-padding;\n    padding-bottom: $mat-tooltip-handset-vertical-padding;\n  }\n}\n\n@mixin _mat-tooltip-density($config-or-theme) {}\n\n@mixin mat-tooltip-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-tooltip-color($color);\n    }\n    @if $density != null {\n      @include _mat-tooltip-density($density);\n    }\n    @if $typography != null {\n      @include mat-tooltip-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-snack-bar-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $is-dark-theme: map-get($config, is-dark);\n  $accent: map-get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, $dark-primary-text, $light-secondary-text);\n    background: if($is-dark-theme, map-get($mat-grey, 50), #323232);\n\n    @include mat-private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, mat-color($accent, text));\n  }\n}\n\n@mixin mat-snack-bar-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-simple-snackbar {\n    font: {\n      family: mat-font-family($config, body-1);\n      size: mat-font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n@mixin _mat-snack-bar-density($config-or-theme) {}\n\n@mixin mat-snack-bar-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-snack-bar-color($color);\n    }\n    @if $density != null {\n      @include _mat-snack-bar-density($density);\n    }\n    @if $typography != null {\n      @include mat-snack-bar-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin mat-form-field-fill-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $fill-background: mat-color($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background: mat-color($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: mat-color($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-fill-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-fill-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-fill-dedupe;\n\n  $mat-form-field-fill-dedupe: $mat-form-field-fill-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-fill-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-fill-label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-fill-label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin mat-private-form-field-fill-density($config-or-theme) {}\n\n@mixin mat-form-field-fill-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-fill-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-fill-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin mat-form-field-legacy-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $label-color: mat-color($foreground, secondary-text);\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include mat-private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-legacy-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $mat-form-field-legacy-dedupe);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  -ms-transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-legacy-dedupe)\n                  scale($font-scale);\n\n  width: 100% / $font-scale + $mat-form-field-legacy-dedupe;\n\n  $mat-form-field-legacy-dedupe: $mat-form-field-legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _mat-form-field-legacy-label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $mat-form-field-legacy-dedupe: $mat-form-field-legacy-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-legacy-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: 0.5em / $subscript-font-scale - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-legacy-label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _mat-form-field-legacy-label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin mat-private-form-field-legacy-density($config-or-theme) {}\n\n@mixin mat-form-field-legacy-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-legacy-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-legacy-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin mat-form-field-outline-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $label-disabled-color: mat-color($foreground, disabled-text);\n  $outline-color: mat-color($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover: mat-color($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: mat-color($primary);\n  $outline-color-accent: mat-color($accent);\n  $outline-color-warn: mat-color($warn);\n  $outline-color-disabled: mat-color($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-outline-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-outline-dedupe)\n  scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-outline-dedupe;\n\n  $mat-form-field-outline-dedupe: $mat-form-field-outline-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-outline-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _mat-form-field-outline-label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _mat-form-field-outline-label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin mat-private-form-field-outline-density($config-or-theme) {}\n\n@mixin mat-form-field-outline-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-outline-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-outline-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin mat-form-field-standard-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  $underline-color: mat-color($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include mat-private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin mat-form-field-standard-typography($config-or-theme) {}\n\n@mixin mat-private-form-field-standard-density($config-or-theme) {}\n\n@mixin mat-form-field-standard-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-standard-color($color);\n    }\n    @if $density != null {\n      @include mat-private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-standard-typography($typography);\n    }\n  }\n}\n\n\n// Color styles that apply to all appearances of the form-field.\n@mixin mat-form-field-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $accent: map-get($config, accent);\n  $warn: map-get($config, warn);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n  $is-dark-theme: map-get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color: mat-color($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: mat-color($primary, text);\n  $required-label-color: mat-color($accent, text);\n\n  // Underline colors.\n  $underline-color-base: mat-color($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: mat-color($accent, text);\n  $underline-color-warn: mat-color($warn, text);\n  $underline-focused-color: mat-color($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include mat-form-field-legacy-color($config);\n  @include mat-form-field-standard-color($config);\n  @include mat-form-field-fill-color($config);\n  @include mat-form-field-outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$mat-form-field-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _mat-form-field-label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $mat-form-field-dedupe)\n             scale($font-scale);\n  width: 100% / $font-scale + $mat-form-field-dedupe;\n\n  $mat-form-field-dedupe: $mat-form-field-dedupe + 0.00001 !global;\n}\n\n@mixin mat-form-field-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: 0.5em / $subscript-font-scale;\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include mat-typography-level-to-styles($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: $line-height * 1em;\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _mat-form-field-label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _mat-form-field-label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n  }\n\n  @include mat-form-field-legacy-typography($config);\n  @include mat-form-field-standard-typography($config);\n  @include mat-form-field-fill-typography($config);\n  @include mat-form-field-outline-typography($config);\n}\n\n@mixin mat-form-field-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  @include mat-private-form-field-legacy-density($density-scale);\n  @include mat-private-form-field-standard-density($density-scale);\n  @include mat-private-form-field-fill-density($density-scale);\n  @include mat-private-form-field-outline-density($density-scale);\n}\n\n@mixin mat-form-field-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-form-field-color($color);\n    }\n    @if $density != null {\n      @include mat-form-field-density($density);\n    }\n    @if $typography != null {\n      @include mat-form-field-typography($typography);\n    }\n  }\n}\n\n\n\n\n\n$mat-tree-node-height: 48px !default;\n// Minimum height for tree nodes in highest density is difficult to determine as\n// developers can display arbitrary content. We use a minimum height which ensures\n// that common content placed in tree nodes does not exceed (e.g. icons, checkboxes).\n$mat-tree-node-minimum-height: 24px !default;\n$mat-tree-node-maximum-height: $mat-tree-node-height !default;\n\n$mat-tree-density-config: (\n  height: (\n    default: $mat-tree-node-height,\n    maximum: $mat-tree-node-maximum-height,\n    minimum: $mat-tree-node-minimum-height,\n  )\n) !default;\n\n\n@mixin mat-tree-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n  $foreground: map-get($config, foreground);\n\n  .mat-tree {\n    background: mat-color($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-tree-typography($config-or-theme) {\n  $config: mat-get-typography-config($config-or-theme);\n  .mat-tree {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: mat-font-weight($config, body-1);\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n@mixin mat-tree-density($config-or-theme) {\n  $density-scale: mat-get-density-config($config-or-theme);\n  $height: mat-private-density-prop-value($mat-tree-density-config, $density-scale, height);\n\n  @include mat-private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin mat-tree-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-tree-color($color);\n    }\n    @if $density != null {\n      @include mat-tree-density($density);\n    }\n    @if $typography != null {\n      @include mat-tree-typography($typography);\n    }\n  }\n}\n\n\n\n\n// Includes all of the typographic styles.\n@mixin angular-material-typography($config-or-theme: null) {\n  $config: if(mat-private-is-theme-object($config-or-theme),\n      mat-get-typography-config($config-or-theme), $config-or-theme);\n\n  // If no actual color configuration has been specified, create a default one.\n  @if not $config {\n    $config: mat-typography-config();\n  }\n\n  // TODO: COMP-309: Do not use individual mixins. Instead, use the all-theme mixin and only\n  // specify a `typography` config while setting `color` and `density` to `null`. This is currently\n  // not possible as it would introduce a circular dependency for typography because the `mat-core`\n  // mixin that is transitively loaded by the `all-theme` file, imports `all-typography` which\n  // would then load `all-theme` again. This ultimately results a circular dependency.\n\n  @include mat-badge-typography($config);\n  @include mat-base-typography($config);\n  @include mat-autocomplete-typography($config);\n  @include mat-bottom-sheet-typography($config);\n  @include mat-button-typography($config);\n  @include mat-button-toggle-typography($config);\n  @include mat-card-typography($config);\n  @include mat-checkbox-typography($config);\n  @include mat-chips-typography($config);\n  @include mat-divider-typography($config);\n  @include mat-table-typography($config);\n  @include mat-datepicker-typography($config);\n  @include mat-dialog-typography($config);\n  @include mat-expansion-panel-typography($config);\n  @include mat-form-field-typography($config);\n  @include mat-grid-list-typography($config);\n  @include mat-icon-typography($config);\n  @include mat-input-typography($config);\n  @include mat-menu-typography($config);\n  @include mat-paginator-typography($config);\n  @include mat-progress-bar-typography($config);\n  @include mat-progress-spinner-typography($config);\n  @include mat-radio-typography($config);\n  @include mat-select-typography($config);\n  @include mat-sidenav-typography($config);\n  @include mat-slide-toggle-typography($config);\n  @include mat-slider-typography($config);\n  @include mat-stepper-typography($config);\n  @include mat-sort-typography($config);\n  @include mat-tabs-typography($config);\n  @include mat-toolbar-typography($config);\n  @include mat-tooltip-typography($config);\n  @include mat-list-typography($config);\n  @include mat-option-typography($config);\n  @include mat-optgroup-typography($config);\n  @include mat-snack-bar-typography($config);\n  @include mat-tree-typography($config);\n}\n\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin mat-core($typography-config: null) {\n  @include angular-material-typography($typography-config);\n  @include mat-ripple();\n  @include cdk-a11y();\n  @include cdk-overlay();\n  @include cdk-text-field();\n\n  @include mat-private-strong-focus-indicators-positioning();\n  @include _mat-mdc-core();\n}\n\n@mixin mat-core-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map-get($config, background);\n    $foreground: map-get($config, foreground);\n\n    background-color: mat-color($background, background);\n    color: mat-color($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{$mat-elevation-prefix}#{$zValue} {\n      @include mat-private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin mat-core-theme($theme-or-color-config) {\n  $theme: mat-private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include mat-private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include mat-ripple-theme($theme);\n    @include mat-option-theme($theme);\n    @include mat-optgroup-theme($theme);\n    @include mat-pseudo-checkbox-theme($theme);\n\n    $color: mat-get-color-config($theme);\n    @if $color != null {\n      @include mat-core-color($color);\n    }\n  }\n}\n\n// Mixin that renders all of the core MDC styles. Private mixin included with `mat-core`.\n@mixin _mat-mdc-core() {\n  @include _mat-mdc-strong-focus-indicators-positioning();\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `_mat-mdc-core`.\n@mixin _mat-mdc-strong-focus-indicators-positioning() {\n  .mat-mdc-focus-indicator {\n    position: relative;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Create a theme.\n@mixin angular-material-theme($theme-or-color-config) {\n  $dedupe-key: 'angular-material-theme';\n  @include mat-private-check-duplicate-theme-styles($theme-or-color-config, $dedupe-key) {\n    @include mat-core-theme($theme-or-color-config);\n    @include mat-autocomplete-theme($theme-or-color-config);\n    @include mat-badge-theme($theme-or-color-config);\n    @include mat-bottom-sheet-theme($theme-or-color-config);\n    @include mat-button-theme($theme-or-color-config);\n    @include mat-button-toggle-theme($theme-or-color-config);\n    @include mat-card-theme($theme-or-color-config);\n    @include mat-checkbox-theme($theme-or-color-config);\n    @include mat-chips-theme($theme-or-color-config);\n    @include mat-table-theme($theme-or-color-config);\n    @include mat-datepicker-theme($theme-or-color-config);\n    @include mat-dialog-theme($theme-or-color-config);\n    @include mat-divider-theme($theme-or-color-config);\n    @include mat-expansion-panel-theme($theme-or-color-config);\n    @include mat-form-field-theme($theme-or-color-config);\n    @include mat-grid-list-theme($theme-or-color-config);\n    @include mat-icon-theme($theme-or-color-config);\n    @include mat-input-theme($theme-or-color-config);\n    @include mat-list-theme($theme-or-color-config);\n    @include mat-menu-theme($theme-or-color-config);\n    @include mat-paginator-theme($theme-or-color-config);\n    @include mat-progress-bar-theme($theme-or-color-config);\n    @include mat-progress-spinner-theme($theme-or-color-config);\n    @include mat-radio-theme($theme-or-color-config);\n    @include mat-select-theme($theme-or-color-config);\n    @include mat-sidenav-theme($theme-or-color-config);\n    @include mat-slide-toggle-theme($theme-or-color-config);\n    @include mat-slider-theme($theme-or-color-config);\n    @include mat-stepper-theme($theme-or-color-config);\n    @include mat-sort-theme($theme-or-color-config);\n    @include mat-tabs-theme($theme-or-color-config);\n    @include mat-toolbar-theme($theme-or-color-config);\n    @include mat-tooltip-theme($theme-or-color-config);\n    @include mat-tree-theme($theme-or-color-config);\n    @include mat-snack-bar-theme($theme-or-color-config);\n  }\n}\n\n\n\n// Includes all of the color styles.\n@mixin angular-material-color($config-or-theme) {\n  // In case a theme object has been passed instead of a configuration for\n  // the color system, extract the color config from the theme object.\n  $config: if(mat-private-is-theme-object($config-or-theme),\n      mat-get-color-config($config-or-theme), $config-or-theme);\n\n  @if $config == null {\n    @error 'No color configuration specified.';\n  }\n\n  @include angular-material-theme((\n    color: $config,\n    typography: null,\n    density: null,\n  ));\n}\n\n\n\n\n\n\n\n\n\n\n// Includes all of the density styles.\n@mixin angular-material-density($config-or-theme) {\n  // In case a theme object has been passed instead of a configuration for\n  // the density system, extract the density config from the theme object.\n  $config: if(mat-private-is-theme-object($config-or-theme),\n      mat-get-density-config($config-or-theme), $config-or-theme);\n\n  @if $config == null {\n    @error 'No density configuration specified.';\n  }\n\n  // TODO: COMP-309: Do not use individual mixins. Instead, use the all-theme mixin and only\n  // specify a `density` config while setting `color` and `typography` to `null`. This is currently\n  // not possible as it would introduce a circular dependency for density because the `mat-core`\n  // mixin that is transitively loaded by the `all-theme` file, imports `all-density` which\n  // would then load `all-theme` again. This ultimately results a circular dependency.\n\n  @include mat-expansion-panel-density($config);\n  @include mat-stepper-density($config);\n  @include mat-toolbar-density($config);\n  @include mat-tree-density($config);\n  @include mat-paginator-density($config);\n  @include mat-form-field-density($config);\n  @include mat-button-toggle-density($config);\n}\n\n\n\n","// Reboot\r\n\r\nbody {\r\n  margin: 0;\r\n  line-height: normal;\r\n  font-family: $font-family-base;\r\n  -webkit-font-smoothing: antialiased;\r\n  -webkit-text-size-adjust: 100%;\r\n  -webkit-tap-highlight-color: transparent;\r\n  -webkit-touch-callout: none;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  position: relative; // 1\r\n  height: 100%;\r\n  overflow: auto; // 2\r\n}\r\n\r\n*,\r\n::after,\r\n::before {\r\n  box-sizing: border-box;\r\n}\r\n\r\ndl,\r\nol,\r\nul {\r\n  margin-top: 0;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\ninput,\r\nbutton,\r\nselect,\r\noptgroup,\r\ntextarea {\r\n  margin: 0;\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  line-height: inherit;\r\n}\r\n\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: $font-family-monospace;\r\n}\r\n\r\ncode {\r\n  padding: 3px;\r\n  font-size: 90%;\r\n  word-break: break-word;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n}\r\n","@import '~@angular/material/theming';\r\n\r\n// Layout\r\n$gutter: 16px !default;\r\n\r\n// Sidenav\r\n$sidenav-width: 240px !default;\r\n$sidenav-collapsed-width: 50px !default;\r\n$sidenav-width-mobile: 280px !default;\r\n\r\n// Toolbar\r\n$toolbar-height-desktop: 64px !default;\r\n$toolbar-height-mobile: 56px !default;\r\n\r\n// Topmenu\r\n$topmenu-sticky-position-desktop: $toolbar-height-desktop !default;\r\n$topmenu-sticky-position-mobile: $toolbar-height-mobile !default;\r\n\r\n// Typography\r\n$font-family-sans-serif: 'Roboto', 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif !default;\r\n$font-family-monospace: 'Roboto Mono', monospace !default;\r\n$font-family-base: $font-family-sans-serif !default;\r\n\r\n// Breakpoints\r\n//\r\n// Define the minimum dimensions at which your layout will change,\r\n// adapting to different screen sizes, for use in media queries.\r\n$breakpoints: (\r\n  xsmall: 0,\r\n  small:  600px,\r\n  medium: 960px,\r\n  large:  1280px,\r\n  xlarge: 1920px\r\n) !default;\r\n\r\n// Material colors\r\n$mat-colors: (\r\n  red: $mat-red,\r\n  pink: $mat-pink,\r\n  purple: $mat-purple,\r\n  deep-purple: $mat-deep-purple,\r\n  indigo: $mat-indigo,\r\n  blue: $mat-blue,\r\n  light-blue: $mat-light-blue,\r\n  cyan: $mat-cyan,\r\n  teal: $mat-teal,\r\n  green: $mat-green,\r\n  light-green: $mat-light-green,\r\n  lime: $mat-lime,\r\n  yellow: $mat-yellow,\r\n  amber: $mat-amber,\r\n  orange: $mat-orange,\r\n  deep-orange: $mat-deep-orange,\r\n  brown: $mat-brown,\r\n  gray: $mat-gray,\r\n  blue-gray: $mat-blue-gray,\r\n  white: white,\r\n  black: black,\r\n  light: $light-primary-text,\r\n  dark: $dark-primary-text,\r\n) !default;\r\n","// TODO: Grid row\r\n.matero-row {\r\n  margin-right: -$gutter/2;\r\n  margin-left: -$gutter/2;\r\n}\r\n\r\n// TODO: Grid col\r\n.matero-col {\r\n  padding-right: $gutter/2;\r\n  padding-left: $gutter/2;\r\n}\r\n\r\n.badge {\r\n  @include badge();\r\n}\r\n\r\n.scrollbar-thin {\r\n  @include scrollbar-thin();\r\n}\r\n\r\n.scrollbar-none {\r\n  @include scrollbar-none();\r\n}\r\n","@mixin badge() {\r\n  display: inline-block;\r\n  min-width: 18px;\r\n  padding: .35em .65em;\r\n  font-size: .75em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: baseline;\r\n  color: #fff;\r\n  background-color: #757575;\r\n  border-radius: 4px;\r\n}\r\n","@mixin scrollbar-thin() {\r\n  &::-webkit-scrollbar {\r\n    width: 4px;\r\n    height: 4px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track,\r\n  &::-webkit-scrollbar-thumb {\r\n    border-radius: 50rem;\r\n    border-width: 0;\r\n    border-style: solid;\r\n    border-color: transparent;\r\n    border-image: initial;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    box-shadow: rgba(0, 0, 0, .2) 1px 1px 5px inset;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    min-height: 20px;\r\n    background-color: rgba(0, 0, 0, .2);\r\n  }\r\n\r\n  &::-webkit-scrollbar-corner {\r\n    background: transparent;\r\n  }\r\n\r\n  & {\r\n    scrollbar-width: thin;\r\n  }\r\n}\r\n\r\n@mixin scrollbar-none {\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  & {\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n  }\r\n}\r\n","// Material color helpers including text color and background color\r\n\r\n@mixin generate-color($prefix, $property) {\r\n  @each $name, $value in $mat-colors {\r\n    // If the value is a map, continue to each\r\n    @if type-of($value) == 'map' {\r\n      @each $hue, $color in $value {\r\n        @if ($hue != 'contrast') {\r\n          .#{$prefix + '-' + $name + '-' + $hue} {\r\n            #{$property}: $color !important;\r\n          }\r\n        }\r\n        // alias\r\n        @if ($name == 'gray') {\r\n          .#{$prefix + '-grey-' + $hue} {\r\n            @extend .#{$prefix + '-gray-' + $hue} !optional;\r\n          }\r\n        }\r\n\r\n        @if ($name == 'blue-gray') {\r\n          .#{$prefix + '-blue-grey-' + $hue} {\r\n            @extend .#{$prefix + '-blue-gray-' + $hue} !optional;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    @if type-of($value) == 'color' {\r\n      .#{$prefix + '-' + $name} {\r\n        #{$property}: $value !important;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Generate text color helpers\r\n@include generate-color('text', 'color');\r\n\r\n// Generate background color helpers\r\n@include generate-color('bg', 'background-color');\r\n\r\n// start new css\r\n.bg-blue-500 {\r\n  background-color: #f00 !important;\r\n}\r\n\r\nmat-icon.mat-icon.notranslate.icon-set.material-icons.mat-icon-no-color {\r\n  position: absolute;\r\n  top: 23px;\r\n  right: 40px;\r\n  font-size: 40px;\r\n}\r\n\r\nh2.tl-c {\r\n  font-size: 17px;\r\n  font-weight: 500;\r\n  color: #218cfd;\r\n}\r\n\r\n.section-card {\r\n  width: 100%;\r\n  display: inline-block;\r\n  padding: 40px 10px;\r\n}\r\n\r\n// .pie-chart1\r\n.pie-chart1 {\r\n  background:\r\n    radial-gradient(\r\n      circle closest-side,\r\n      white 0,\r\n      white 50%,\r\n      #cdcdcd 40%,\r\n      transparent 63%,\r\n      transparent 70%,\r\n      white 0\r\n    ),\r\n    conic-gradient(\r\n      #2f3ad0 0,\r\n      #2f3ad0 50%,\r\n      #f28e2c 0,\r\n      #f28e2c 50%,\r\n    );\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 350px;\r\n  margin: 0;\r\n}\r\n\r\n.pie-chart1 h2 {\r\n  position: absolute;\r\n  margin: 1rem;\r\n}\r\n\r\n.pie-chart1 cite {\r\n  position: absolute;\r\n  bottom: 0;\r\n  font-size: 80%;\r\n  padding: 1rem;\r\n  color: gray;\r\n}\r\n\r\n.pie-chart1 figcaption {\r\n  position: absolute;\r\n  bottom: 1em;\r\n  right: 1em;\r\n  font-size: smaller;\r\n  text-align: right;\r\n}\r\n\r\n.pie-chart1 span::after {\r\n  display: inline-block;\r\n  content: \"\";\r\n  width: .8em;\r\n  height: .8em;\r\n  margin-left: .4em;\r\n  border-radius: .2em;\r\n  background: currentColor;\r\n}\r\n\r\n// pie chart2\r\n\r\n.pie-chart2 {\r\n  background:\r\n    radial-gradient(\r\n      circle closest-side,\r\n      white 0,\r\n      white 50%,\r\n      #cdcdcd 40%,\r\n      transparent 63%,\r\n      transparent 70%,\r\n      white 0\r\n    ),\r\n    conic-gradient(\r\n      #2f3ad0 0,\r\n      #2f3ad0 30%,\r\n      #e15759 0,\r\n      #e15759 70%,\r\n    );\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 350px;\r\n  margin: 0;\r\n}\r\n\r\n.pie-chart2 h2 {\r\n  position: absolute;\r\n  margin: 1rem;\r\n}\r\n\r\n.pie-chart2 cite {\r\n  position: absolute;\r\n  bottom: 0;\r\n  font-size: 80%;\r\n  padding: 1rem;\r\n  color: gray;\r\n}\r\n\r\n.pie-chart2 figcaption {\r\n  position: absolute;\r\n  bottom: 1em;\r\n  right: 1em;\r\n  font-size: smaller;\r\n  text-align: right;\r\n}\r\n\r\n.pie-chart2 span::after {\r\n  display: inline-block;\r\n  content: \"\";\r\n  width: .8em;\r\n  height: .8em;\r\n  margin-left: .4em;\r\n  border-radius: .2em;\r\n  background: currentColor;\r\n}\r\n\r\n// piechart3\r\n.pie-chart3 {\r\n  background:\r\n    radial-gradient(\r\n      circle closest-side,\r\n      white 0,\r\n      white 50%,\r\n      #cdcdcd 40%,\r\n      transparent 63%,\r\n      transparent 70%,\r\n      white 0\r\n    ),\r\n    conic-gradient(\r\n      #2f3ad0 0,\r\n      #2f3ad0 10%,\r\n      #59a14f 0,\r\n      #59a14f 90%\r\n    );\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 350px;\r\n  margin: 0;\r\n}\r\n\r\n.pie-chart3 h2 {\r\n  position: absolute;\r\n  margin: 1rem;\r\n}\r\n\r\n.pie-chart3 cite {\r\n  position: absolute;\r\n  bottom: 0;\r\n  font-size: 80%;\r\n  padding: 1rem;\r\n  color: gray;\r\n}\r\n\r\n.pie-chart3 figcaption {\r\n  position: absolute;\r\n  bottom: 1em;\r\n  right: 1em;\r\n  font-size: smaller;\r\n  text-align: right;\r\n}\r\n\r\n.pie-chart3 span::after {\r\n  display: inline-block;\r\n  content: \"\";\r\n  width: .8em;\r\n  height: .8em;\r\n  margin-left: .4em;\r\n  border-radius: .2em;\r\n  background: currentColor;\r\n}\r\n\r\n// piechart4\r\n\r\n.pie-chart4 {\r\n  background:\r\n    radial-gradient(\r\n      circle closest-side,\r\n      white 0,\r\n      white 50%,\r\n      #cdcdcd 40%,\r\n      transparent 63%,\r\n      transparent 70%,\r\n      white 0\r\n    ),\r\n    conic-gradient(\r\n      #2f3ad0 0,\r\n      #2f3ad0 20%,\r\n      #f28e2c 0,\r\n      #f28e2c 30%,\r\n      #e15759 0,\r\n      #e15759 20%,\r\n      #76b7b2 0,\r\n      #76b7b2 30%\r\n    );\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 350px;\r\n  margin: 0;\r\n}\r\n\r\n.pie-chart4 h2 {\r\n  position: absolute;\r\n  margin: 1rem;\r\n}\r\n\r\n.pie-chart4 cite {\r\n  position: absolute;\r\n  bottom: 0;\r\n  font-size: 80%;\r\n  padding: 1rem;\r\n  color: gray;\r\n}\r\n\r\n.pie-chart4 figcaption {\r\n  position: absolute;\r\n  bottom: 1em;\r\n  right: 1em;\r\n  font-size: smaller;\r\n  text-align: right;\r\n}\r\n\r\n.pie-chart4 span::after {\r\n  display: inline-block;\r\n  content: \"\";\r\n  width: .8em;\r\n  height: .8em;\r\n  margin-left: .4em;\r\n  border-radius: .2em;\r\n  background: currentColor;\r\n}\r\n","/*!\n *     ____  __  ______  __________ _    _____________       ____________ \n *    / __ \\/ / / / __ \\/_  __/ __ \\ |  / /  _/ ____/ |     / / ____/ __ \\\n *   / /_/ / /_/ / / / / / / / / / / | / // // __/  | | /| / / __/ / /_/ /\n *  / ____/ __  / /_/ / / / / /_/ /| |/ // // /___  | |/ |/ / /___/ _, _/\n * /_/   /_/ /_/\\____/ /_/  \\____/ |___/___/_____/  |__/|__/_____/_/ |_|     \n *\n * photoviewer - v3.5.8\n * A JS plugin to view images just like in Windows\n * https://nzbin.github.io/photoviewer/\n *\n * Copyright (c) 2018 nzbin\n * Released under MIT License\n */\n\n.photoviewer-modal {\n  position: absolute;\n  z-index: 1090;\n  width: 320px;\n  height: 320px;\n  cursor: default;\n  overflow: visible !important;\n  outline: none;\n  color: #333;\n}\n\n.photoviewer-inner {\n  position: absolute;\n  top: -1px;\n  left: -1px;\n  right: -1px;\n  bottom: -1px;\n  background-color: rgba(255, 255, 255, 0.92);\n  box-shadow: 0 2px 10px 2px rgba(0, 0, 0, 0.32);\n  border-radius: 6px;\n  border: 1px solid rgba(0, 0, 0, 0.64);\n  cursor: inherit;\n  overflow: hidden;\n}\n\n.photoviewer-maximize {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.photoviewer-maximize .photoviewer-inner {\n  border-radius: 0;\n}\n\n.photoviewer-maximize .photoviewer-resizable-handle {\n  display: none;\n}\n\n.photoviewer-toolbar {\n  font-size: 0;\n}\n\n.photoviewer-button {\n  display: inline-block;\n  min-width: 40px;\n  height: 40px;\n  box-sizing: border-box;\n  margin: 0;\n  font-size: 16px;\n  line-height: 1;\n  text-align: center;\n  background: none;\n  border-width: 0;\n  border-radius: 0;\n  color: inherit;\n  cursor: pointer;\n  outline: none;\n}\n\n.photoviewer-button:hover {\n  color: #111;\n}\n\n.photoviewer-button:focus {\n  background-color: rgba(0, 0, 0, 0.08);\n}\n\n.photoviewer-button svg {\n  display: inline-block;\n  font-size: inherit;\n  width: 1em;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em;\n}\n\n.photoviewer-header {\n  position: relative;\n  z-index: 2;\n  height: 30px;\n}\n\n.photoviewer-header .photoviewer-toolbar {\n  float: right;\n}\n\n[dir='rtl'] .photoviewer-header .photoviewer-toolbar {\n  float: left;\n}\n\n.photoviewer-header .photoviewer-button {\n  height: 30px;\n}\n\n.photoviewer-header .photoviewer-button:hover {\n  background-color: rgba(0, 0, 0, 0.08);\n}\n\n.photoviewer-header .photoviewer-button-close:hover {\n  color: #fff;\n  background-color: #ff4545;\n}\n\n.photoviewer-title {\n  padding: 8px 10px;\n  font-size: 14px;\n  line-height: 1;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  overflow: hidden;\n}\n\n.photoviewer-stage {\n  position: absolute;\n  top: 30px;\n  right: 0;\n  bottom: 40px;\n  left: 0;\n  z-index: 1;\n  border-top: 1px solid rgba(0, 0, 0, 0.64);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.64);\n  background-color: #fff;\n  overflow: hidden;\n}\n\n.photoviewer-stage.stage-ready {\n  text-align: center;\n  font-size: 0;\n}\n\n.photoviewer-stage.stage-ready::before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  overflow: hidden;\n}\n\n.photoviewer-image {\n  position: absolute;\n  display: inline-block;\n  min-width: auto;\n  max-width: none;\n}\n\n.photoviewer-image.image-ready {\n  position: static;\n  max-width: 100%;\n  max-height: 100%;\n  vertical-align: middle;\n}\n\n.photoviewer-footer {\n  position: absolute;\n  bottom: 0;\n  z-index: 2;\n  width: 100%;\n  height: 40px;\n  text-align: center;\n}\n\n.photoviewer-footer .photoviewer-toolbar {\n  display: inline-block;\n}\n\n.photoviewer-resizable-handle {\n  position: absolute;\n  z-index: 10;\n}\n\n.photoviewer-resizable-handle-e {\n  top: 0;\n  right: -5px;\n  bottom: 0;\n  left: auto;\n  width: 10px;\n  cursor: e-resize;\n}\n\n.photoviewer-resizable-handle-s {\n  top: auto;\n  right: 0;\n  bottom: -5px;\n  left: 0;\n  height: 10px;\n  cursor: s-resize;\n}\n\n.photoviewer-resizable-handle-w {\n  top: 0;\n  right: auto;\n  bottom: 0;\n  left: -5px;\n  width: 10px;\n  cursor: w-resize;\n}\n\n.photoviewer-resizable-handle-n {\n  top: -5px;\n  right: 0;\n  bottom: auto;\n  left: 0;\n  height: 10px;\n  cursor: n-resize;\n}\n\n.photoviewer-resizable-handle-se {\n  top: auto;\n  right: -5px;\n  bottom: -5px;\n  left: auto;\n  width: 10px;\n  height: 10px;\n  cursor: se-resize;\n}\n\n.photoviewer-resizable-handle-sw {\n  top: auto;\n  right: auto;\n  bottom: -5px;\n  left: -5px;\n  width: 10px;\n  height: 10px;\n  cursor: sw-resize;\n}\n\n.photoviewer-resizable-handle-nw {\n  top: -5px;\n  right: auto;\n  bottom: auto;\n  left: -5px;\n  width: 10px;\n  height: 10px;\n  cursor: nw-resize;\n}\n\n.photoviewer-resizable-handle-ne {\n  top: -5px;\n  right: -5px;\n  bottom: auto;\n  left: auto;\n  width: 10px;\n  height: 10px;\n  cursor: ne-resize;\n}\n\n:-webkit-full-screen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:-webkit-full-screen .photoviewer-header,\n:-webkit-full-screen .photoviewer-footer,\n:-webkit-full-screen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:-webkit-full-screen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n:-moz-full-screen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:-moz-full-screen .photoviewer-header,\n:-moz-full-screen .photoviewer-footer,\n:-moz-full-screen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:-moz-full-screen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n:-ms-fullscreen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:-ms-fullscreen .photoviewer-header,\n:-ms-fullscreen .photoviewer-footer,\n:-ms-fullscreen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:-ms-fullscreen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n:full-screen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:full-screen .photoviewer-header,\n:full-screen .photoviewer-footer,\n:full-screen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:full-screen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n:-webkit-full-screen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:-ms-fullscreen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:fullscreen {\n  top: 0 !important;\n  left: 0 !important;\n  width: 100% !important;\n  height: 100% !important;\n}\n\n:-webkit-full-screen .photoviewer-header, :-webkit-full-screen .photoviewer-footer, :-webkit-full-screen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:-ms-fullscreen .photoviewer-header, :-ms-fullscreen .photoviewer-footer, :-ms-fullscreen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:fullscreen .photoviewer-header,\n:fullscreen .photoviewer-footer,\n:fullscreen .photoviewer-resizable-handle {\n  display: none;\n}\n\n:-webkit-full-screen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n:-ms-fullscreen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n:fullscreen .photoviewer-stage {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-width: 0;\n  background-color: #000;\n}\n\n::-webkit-backdrop {\n  background-color: #000;\n}\n\n::backdrop {\n  background-color: #000;\n}\n\n::-ms-backdrop {\n  background-color: #000;\n}\n\n.is-grab {\n  cursor: move;\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n.is-grabbing {\n  cursor: move;\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n.photoviewer-loader {\n  position: absolute;\n  top: 30px;\n  left: 0;\n  right: 0;\n  bottom: 40px;\n  z-index: 2;\n  text-align: center;\n  color: #333;\n}\n\n.photoviewer-loader::before {\n  content: '';\n  position: relative;\n  display: inline-block;\n  width: 36px;\n  height: 36px;\n  box-sizing: border-box;\n  border-width: 5px;\n  border-style: solid;\n  border-color: rgba(0, 0, 0, 0.5) rgba(0, 0, 0, 0.5) rgba(0, 0, 0, 0.5) rgba(255, 255, 255, 0.5);\n  border-radius: 100%;\n  vertical-align: middle;\n  -webkit-animation: photoviewerLoading 1s infinite linear;\n  animation: photoviewerLoading 1s infinite linear;\n}\n\n.photoviewer-loader::after {\n  content: '';\n  display: inline-block;\n  width: 0;\n  height: 100%;\n  vertical-align: middle;\n  overflow: hidden;\n}\n\n@-webkit-keyframes photoviewerLoading {\n  0% {\n    transform: rotateZ(0deg) translate3d(0, 0, 0);\n  }\n  100% {\n    transform: rotateZ(360deg) translate3d(0, 0, 0);\n  }\n}\n\n@keyframes photoviewerLoading {\n  0% {\n    transform: rotateZ(0deg) translate3d(0, 0, 0);\n  }\n  100% {\n    transform: rotateZ(360deg) translate3d(0, 0, 0);\n  }\n}\n",".mat-button-loading {\n  .mat-button-wrapper {\n    visibility: hidden;\n  }\n\n  .mat-progress-spinner {\n    position: absolute;\n    top: calc(50% - 10px);\n    left: calc(50% - 10px);\n  }\n}\n","@import '~@angular/material/theming';\n\n@mixin mtx-alert-theme($theme) {\n  $background: map-get($theme, background);\n\n  .mtx-alert-ref {\n    background-color: mat-color($background, card);\n  }\n\n  .mtx-alert-info .mtx-alert-ref {\n    background-color: mat-color($mat-blue, 500);\n    border-color: mat-color($mat-blue, 500);\n    color: white;\n  }\n\n  .mtx-alert-success .mtx-alert-ref {\n    background-color: mat-color($mat-green, 500);\n    border-color: mat-color($mat-green, 500);\n    color: white;\n  }\n\n  .mtx-alert-warning .mtx-alert-ref {\n    background-color: mat-color($mat-orange, 500);\n    border-color: mat-color($mat-orange, 500);\n    color: white;\n  }\n\n  .mtx-alert-danger .mtx-alert-ref {\n    background-color: mat-color($mat-red, 500);\n    border-color: mat-color($mat-red, 500);\n    color: white;\n  }\n}\n","@import '~@angular/material/theming';\r\n@import './column-resize/column-resize';\r\n\r\n@mixin mtx-grid-theme($theme) {\r\n  $is-dark-theme: map-get($theme, is-dark);\r\n  $accent: map-get($theme, accent);\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .mtx-grid {\r\n    border: 1px solid rgba(mat-color($foreground, secondary-text), .2);\r\n\r\n    .mat-table-sticky-left,\r\n    .mat-table-sticky-right {\r\n      border-color: mat-color($foreground, divider);\r\n    }\r\n\r\n    .mat-table {\r\n      &.mat-table-striped {\r\n        .mat-row-odd {\r\n          background-color: if($is-dark-theme, #3a3a3a, #f5f5f5);\r\n        }\r\n      }\r\n\r\n      &.mat-table-hover {\r\n        .mat-row:hover {\r\n          background-color: if($is-dark-theme, #2a2a2a, #e5e5e5);\r\n        }\r\n      }\r\n    }\r\n\r\n    .mat-row {\r\n      &.selected,\r\n      &.mat-row-odd.selected {\r\n        background-color: if($is-dark-theme, #2a2a2a, #e5e5e5);\r\n      }\r\n    }\r\n\r\n    .mat-cell {\r\n      &.selected {\r\n        box-shadow: inset 0 0 0 1px mat-color($accent);\r\n      }\r\n    }\r\n\r\n    .mat-footer-row {\r\n      .mat-footer-cell {\r\n        border-top: 1px solid mat-color($foreground, divider);\r\n        border-bottom-width: 0;\r\n        background-color: mat-color($background, app-bar);\r\n      }\r\n    }\r\n\r\n    .mat-paginator {\r\n      border-top: 1px solid rgba(mat-color($foreground, secondary-text), .2);\r\n    }\r\n  }\r\n\r\n  .mtx-grid-toolbar {\r\n    border-bottom: 1px solid rgba(mat-color($foreground, secondary-text), .2);\r\n  }\r\n\r\n  .mtx-grid-sidebar {\r\n    border-color: rgba(mat-color($foreground, secondary-text), .2);\r\n  }\r\n\r\n  .mtx-grid-statusbar {\r\n    border-top: 1px solid rgba(mat-color($foreground, secondary-text), .2);\r\n  }\r\n\r\n  .mtx-grid-column-menu-item {\r\n    color: mat-color($foreground, text);\r\n  }\r\n\r\n  .mtx-grid-column-menu-header,\r\n  .mtx-grid-column-menu-footer {\r\n    color: mat-color($foreground, text);\r\n    background-color: mat-color($background, card);\r\n  }\r\n\r\n  .mtx-grid-column-menu-header {\r\n    border-bottom: 1px solid mat-color($foreground, divider);\r\n  }\r\n\r\n  .mtx-grid-column-menu-footer {\r\n    border-top: 1px solid mat-color($foreground, divider);\r\n  }\r\n\r\n  @include mat-column-resize-color($theme);\r\n}\r\n","@import '~@angular/material/theming';\n\n@mixin mat-column-resize-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $primary: map-get($config, primary);\n  $foreground: map-get($config, foreground);\n\n  $non-resizable-hover-divider: mat-color($foreground, divider);\n  $resizable-hover-divider: mat-color($primary, 200);\n  $resizable-active-divider: mat-color($primary, 500);\n\n  // Required for resizing to work properly.\n  .mat-column-resize-table.cdk-column-resize-with-resized-column {\n    table-layout: fixed;\n  }\n\n  .mat-column-resize-flex {\n    .mat-header-cell,\n    .mat-cell {\n      box-sizing: border-box;\n      min-width: 32px;\n    }\n  }\n\n  .mat-header-cell {\n    position: relative;\n  }\n\n  .mat-resizable {\n    box-sizing: border-box;\n  }\n\n  .mat-header-cell:not(.mat-resizable)::after,\n  .mat-resizable-handle {\n    position: absolute;\n    bottom: 0;\n    top: 0;\n    right: 0;\n    width: 1px;\n    background: transparent;\n    transition: background $swift-ease-in-duration $swift-ease-in-timing-function;\n  }\n\n  .mat-header-cell:not(.mat-resizable)::after {\n    content: '';\n  }\n\n  [dir='rtl'] .mat-header-cell:not(.mat-resizable)::after,\n  [dir='rtl'] .mat-resizable-handle {\n    left: 0;\n    right: auto;\n  }\n\n  .mat-header-row.cdk-column-resize-hover-or-active {\n    .mat-header-cell:not(.mat-resizable)::after {\n      background: $non-resizable-hover-divider;\n    }\n\n    .mat-resizable-handle {\n      background: $resizable-hover-divider;\n    }\n  }\n\n  .mat-resizable.cdk-resizable-overlay-thumb-active > .mat-resizable-handle {\n    opacity: 0;\n    transition: none;\n  }\n\n  .mat-resizable-handle:focus,\n  .mat-header-row.cdk-column-resize-hover-or-active .mat-resizable-handle:focus {\n    background: $resizable-active-divider;\n    outline: none;\n  }\n\n  .mat-column-resize-overlay-thumb {\n    background: transparent;\n    cursor: col-resize;\n    height: 100%;\n    transition: background $swift-ease-in-duration $swift-ease-in-timing-function;\n    @include user-select(none);\n\n    width: 100%;\n\n    &:active {\n      background:\n        linear-gradient(\n          90deg,\n          transparent,\n          transparent 7px,\n          $resizable-active-divider,\n          $resizable-active-divider 1px,\n          transparent 8px,\n          transparent\n        );\n      will-change: transform;\n    }\n  }\n}\n\n@mixin mat-column-resize-typography($config-or-theme) { /**   */ }\n\n@mixin mat-column-resize-density($config-or-theme) { /**   */ }\n\n@mixin mat-column-resize-theme($theme-or-color-config) {\n  $theme: _mat-legacy-get-theme($theme-or-color-config);\n  @include _mat-check-duplicate-theme-styles($theme, 'mat-column-resize') {\n    $color: mat-get-color-config($theme);\n    $density: mat-get-density-config($theme);\n    $typography: mat-get-typography-config($theme);\n\n    @if $color != null {\n      @include mat-column-resize-color($color);\n    }\n    @if $density != null {\n      @include mat-column-resize-density($density);\n    }\n    @if $typography != null {\n      @include mat-column-resize-typography($typography);\n    }\n  }\n}\n","@import '~@angular/material/theming';\n\n@mixin mtx-loader-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mtx-loader-backdrop {\n    background-color: rgba(mat-color($background, background), .75);\n  }\n}\n","@import '~@angular/material/theming';\r\n\r\n@mixin mtx-popover-theme($theme) {\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .mtx-popover-panel {\r\n    color: mat-color($foreground, text);\r\n    background-color: mat-color($background, card);\r\n  }\r\n\r\n  .mtx-popover-below {\r\n    .mtx-popover-direction-arrow {\r\n      &::before {\r\n        border-bottom-color: rgba(mat-color($foreground, divider), .2);\r\n      }\r\n\r\n      &::after {\r\n        border-bottom-color: mat-color($background, card);\r\n      }\r\n    }\r\n  }\r\n\r\n  .mtx-popover-above {\r\n    .mtx-popover-direction-arrow {\r\n      &::before {\r\n        border-top-color: rgba(mat-color($foreground, divider), .2);\r\n      }\r\n\r\n      &::after {\r\n        border-top-color: mat-color($background, card);\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import '~@angular/material/theming';\n\n@mixin mtx-progress-theme($theme) {\n  $background: map-get($theme, background);\n\n  .mtx-progress {\n    background-color: mat-color($background, hover);\n  }\n\n  .mtx-progress-fill-info {\n    background-color: mat-color($mat-blue, 500);\n    color: white;\n  }\n\n  .mtx-progress-fill-success {\n    background-color: mat-color($mat-green, 500);\n    color: white;\n  }\n\n  .mtx-progress-fill-warning {\n    background-color: mat-color($mat-orange, 500);\n    color: white;\n  }\n\n  .mtx-progress-fill-danger {\n    background-color: mat-color($mat-red, 500);\n    color: white;\n  }\n}\n","@import '~@angular/material/theming';\n\n@mixin mtx-select-theme($theme) {\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .ng-select {\n    .ng-select-container {\n      color: mat-color($foreground, text);\n\n      .ng-value-container {\n        .ng-placeholder {\n          color: mat-color($foreground, hint-text);\n        }\n\n        .ng-input {\n          > input {\n            color: mat-color($foreground, text);\n          }\n        }\n      }\n    }\n\n    &.ng-select-disabled {\n      .ng-value {\n        color: mat-color($foreground, hint-text);\n      }\n    }\n\n    &.ng-select-multiple {\n      .ng-select-container {\n        .ng-value-container {\n          .ng-value {\n            color: mat-color($foreground, text);\n            background-color: mat-color($background, unselected-chip);\n\n            &.ng-value-disabled {\n              opacity: .4;\n            }\n\n            .ng-value-icon {\n              &:hover {\n                background-color: mat-color($foreground, divider);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    .ng-clear-wrapper {\n      color: mat-color($foreground, secondary-text);\n\n      &:hover .ng-clear {\n        color: mat-color($warn);\n      }\n    }\n\n    .ng-arrow-wrapper .ng-arrow {\n      border-color: mat-color($foreground, secondary-text) transparent transparent;\n    }\n\n    &.ng-select-invalid {\n      .ng-arrow-wrapper .ng-arrow {\n        border-color: mat-color($warn) transparent transparent;\n      }\n    }\n\n    &.ng-select-opened {\n      .ng-arrow-wrapper .ng-arrow {\n        border-color: transparent transparent mat-color($foreground, secondary-text);\n      }\n    }\n\n    &.ng-select-opened.ng-select-invalid {\n      .ng-arrow-wrapper .ng-arrow {\n        border-color: transparent transparent mat-color($warn);\n      }\n    }\n  }\n\n  .ng-dropdown-panel {\n    background-color: mat-color($background, card);\n\n    &.multiple {\n      .ng-option {\n        &.selected {\n          background: mat-color($foreground, divider);\n        }\n\n        &.marked {\n          background: mat-color($background, hover);\n        }\n      }\n    }\n\n    .ng-dropdown-header {\n      border-bottom: 1px solid mat-color($foreground, divider);\n    }\n\n    .ng-dropdown-footer {\n      border-top: 1px solid mat-color($foreground, divider);\n    }\n\n    .ng-dropdown-panel-items {\n      .ng-optgroup {\n        color: mat-color($foreground, secondary-text);\n\n        &.ng-option-marked {\n          background: mat-color($background, hover);\n        }\n\n        &.ng-option-selected {\n          background: mat-color($foreground, divider);\n        }\n      }\n\n      .ng-option {\n        color: mat-color($foreground, text);\n\n        &.ng-option-marked {\n          background: mat-color($background, hover);\n        }\n\n        &.ng-option-selected {\n          background: mat-color($foreground, divider);\n        }\n\n        &.ng-option-disabled {\n          color: mat-color($foreground, hint-text);\n        }\n\n        .ng-tag-label {\n          color: mat-color($foreground, hint-text);\n        }\n      }\n    }\n  }\n}\n","@import '~@angular/material/theming';\n\n@mixin mtx-split-theme($theme) {\n  $accent: map-get($theme, accent);\n  $foreground: map-get($theme, foreground);\n\n  .mtx-split {\n    > .mtx-split-gutter {\n      background-color: rgba(mat-color($foreground, divider), .24);\n\n      &:hover {\n        background-color: mat-color($accent);\n      }\n    }\n  }\n}\n","@import '~@angular/material/theming';\n\n$mtx-tooltip-target-height: 22px;\n$mtx-tooltip-font-size: 12px;\n$mtx-tooltip-vertical-padding: ($mtx-tooltip-target-height - $mtx-tooltip-font-size) / 2;\n\n$mtx-tooltip-handset-target-height: 30px;\n$mtx-tooltip-handset-font-size: 14px;\n$mtx-tooltip-handset-vertical-padding:\n    ($mtx-tooltip-handset-target-height - $mtx-tooltip-handset-font-size) / 2;\n\n@mixin mtx-tooltip-color($config-or-theme) {\n  $config: mat-get-color-config($config-or-theme);\n  $background: map-get($config, background);\n\n  .mtx-tooltip {\n    background: mat-color($background, tooltip, .9);\n  }\n}\n\n@mixin mtx-tooltip-typography($config-or-theme) {\n  .mtx-tooltip {\n    padding-top: $mtx-tooltip-vertical-padding;\n    padding-bottom: $mtx-tooltip-vertical-padding;\n    font-size: $mtx-tooltip-font-size;\n  }\n\n  .mtx-tooltip-handset {\n    padding-top: $mtx-tooltip-handset-vertical-padding;\n    padding-bottom: $mtx-tooltip-handset-vertical-padding;\n    font-size: $mtx-tooltip-handset-font-size;\n  }\n}\n\n@mixin mtx-tooltip-theme($theme) {\n  $color: mat-get-color-config($theme);\n  $typography: mat-get-typography-config($theme);\n\n  @include mtx-tooltip-color($color);\n  @include mtx-tooltip-typography($typography);\n}\n","@import '~@angular/material/theming';\r\n\r\n$mat-datetimepicker-selected-today-box-shadow-width: 1px;\r\n\r\n@mixin mat-datetimepicker-theme($theme) {\r\n\r\n  $primary: map-get($theme, primary);\r\n\r\n  .mat-datetimepicker-calendar-header {\r\n    background-color: mat-color($primary);\r\n  }\r\n\r\n  .mat-datetimepicker-calendar-body-cell-content {\r\n    &.mat-datetimepicker-calendar-body-selected {\r\n      background-color: mat-color($primary);\r\n      color: white;\r\n    }\r\n\r\n    &.mat-datetimepicker-calendar-body-disabled > .mat-datetimepicker-calendar-body-selected {\r\n      background-color: rgba(mat-color($primary), 0.4);\r\n    }\r\n\r\n    &.mat-datetimepicker-calendar-body-today {\r\n      &:not(.mat-datetimepicker-calendar-body-selected) {\r\n        border-color: mat-color($primary);\r\n      }\r\n\r\n      &.mat-datetimepicker-calendar-body-selected {\r\n        box-shadow: inset 0 0 0 $mat-datetimepicker-selected-today-box-shadow-width mat-color($primary, default-contrast);\r\n      }\r\n    }\r\n  }\r\n\r\n  .mat-datetimepicker-clock-center {\r\n    background-color: mat-color($primary);\r\n  }\r\n\r\n  .mat-datetimepicker-clock-hand {\r\n    background-color: mat-color($primary);\r\n\r\n    &::before {\r\n      background-color: mat-color($primary);\r\n    }\r\n  }\r\n\r\n  .mat-datetimepicker-clock-cell {\r\n    &.mat-datetimepicker-clock-cell-selected {\r\n      background-color: lighten(mat-color($primary), 5);\r\n    }\r\n  }\r\n}\r\n","@mixin matero-reboot-theme($theme) {\r\n  $primary: map-get($theme, primary);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  a {\r\n    color: mat-color($primary);\r\n\r\n    &:hover {\r\n      color: lighten(mat-color($primary), 10%);\r\n    }\r\n  }\r\n\r\n  code {\r\n    background-color: rgba(mat-color($foreground, secondary-text), .03);\r\n  }\r\n}\r\n","@mixin matero-header-theme($theme) {\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .matero-toolbar-button {\r\n    &.mat-icon-button {\r\n      &:hover {\r\n        background-color: mat-color($background, hover);\r\n      }\r\n    }\r\n  }\r\n\r\n  .matero-branding-name {\r\n    color: mat-color($foreground, text);\r\n  }\r\n}\r\n","@import '../style/variables';\r\n\r\n@mixin matero-sidebar-theme($theme) {\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .matero-sidebar-header {\r\n    color: mat-color($foreground, text);\r\n    background: mat-color($background, dialog);\r\n    border-bottom: 1px solid mat-color($foreground, divider);\r\n  }\r\n\r\n  .matero-user-panel {\r\n    border-bottom: 1px solid mat-color($foreground, divider);\r\n  }\r\n}\r\n","@import '../style/variables';\r\n\r\n@mixin matero-sidemenu-theme($theme) {\r\n  $is-dark-theme: map-get($theme, is-dark);\r\n  $primary: map-get($theme, primary);\r\n  $accent: map-get($theme, accent);\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .matero-sidemenu {\r\n    > .matero-sidemenu-item {\r\n      > a {\r\n        color: mat-color($foreground, text);\r\n\r\n        &:hover {\r\n          background: mat-color($background, hover);\r\n        }\r\n      }\r\n\r\n      &.active {\r\n        > a {\r\n          background-color: if($is-dark-theme, rgba(mat-color($primary), .15), transparent);\r\n          color: if($is-dark-theme, lighten(mat-color($primary), 25%), mat-color($accent));\r\n\r\n          &:hover {\r\n            background: mat-color($background, hover);\r\n          }\r\n        }\r\n      }\r\n\r\n      &.open {\r\n        background: mat-color($background, hover);\r\n      }\r\n    }\r\n\r\n    &.matero-sidemenu-sub {\r\n      > .matero-sidemenu-item {\r\n        &.active {\r\n          > a {\r\n            background-color: transparent;\r\n\r\n            &:hover {\r\n              background: mat-color($background, hover);\r\n            }\r\n          }\r\n        }\r\n\r\n        &.open {\r\n          background: transparent;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","@mixin matero-topmenu-theme($theme) {\r\n  $is-dark-theme: map-get($theme, is-dark);\r\n  $primary: map-get($theme, primary);\r\n  $accent: map-get($theme, accent);\r\n  $background: mat-color($theme, background);\r\n  $foreground: mat-color($theme, foreground);\r\n\r\n  .matero-topmenu {\r\n    background: mat-color($background, app-bar);\r\n    color: mat-color($foreground, text);\r\n\r\n    .mat-button {\r\n      &.active {\r\n        background-color: mat-color($background, focused-button);\r\n      }\r\n    }\r\n  }\r\n\r\n  .mat-menu-item.active {\r\n    color: mat-color($accent);\r\n  }\r\n}\r\n","@mixin matero-customizer-theme($theme) {\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .customizer-panel {\r\n    background-color: mat-color($background, dialog);\r\n    color: mat-color($foreground, text);\r\n  }\r\n\r\n  .customizer-panel-overlay {\r\n    &.opened {\r\n      background-color: mat-color($foreground, divider);\r\n    }\r\n  }\r\n}\r\n","@import '~@angular/material/theming';\r\n\r\n@mixin matero-error-code-theme($theme) {\r\n  $background: map-get($theme, background);\r\n  $foreground: map-get($theme, foreground);\r\n\r\n  .matero-error-code {\r\n    color: mat-color($foreground, text);\r\n  }\r\n}\r\n","// Example for custom theming\r\n\r\n@mixin custom-table-theme($theme) {\r\n  $is-dark-theme: map-get($theme, is-dark);\r\n  $background: map-get($theme, 'background');\r\n  $foreground: map-get($theme, 'foreground');\r\n\r\n  $row-hover-bg: mat-color($mat-indigo, 50);\r\n  $row-odd-bg: mat-color($mat-gray, 100);\r\n\r\n  $row-hover-bg-dark: mat-color($mat-blue-gray, 900);\r\n  $row-odd-bg-dark: lighten(mat-color($mat-gray, 900), 10%);\r\n\r\n  mtx-grid.mtx-grid {\r\n    .mat-table {\r\n      &.mat-table-striped {\r\n        .mat-row-odd {\r\n          background-color: if($is-dark-theme, $row-odd-bg-dark, $row-odd-bg);\r\n        }\r\n      }\r\n\r\n      &.mat-table-hover {\r\n        .mat-row {\r\n          &:hover {\r\n            background-color: if($is-dark-theme, $row-hover-bg-dark, $row-hover-bg);\r\n          }\r\n        }\r\n      }\r\n\r\n      .mat-row {\r\n        &.selected {\r\n          background-color: if($is-dark-theme, $row-hover-bg-dark, $row-hover-bg);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Material components style fix\r\n\r\n.mat-card {\r\n  margin-bottom: $gutter;\r\n}\r\n\r\n.mat-accordion {\r\n  display: block;\r\n  margin-bottom: $gutter;\r\n}\r\n\r\n.mat-list-base {\r\n  position: relative;\r\n}\r\n\r\n.form-field-full {\r\n  .mat-form-field {\r\n    width: 100%;\r\n  }\r\n}\r\n","/** Custom table style not with theme */\r\n\r\nmtx-grid.mtx-grid {\r\n  .mat-header-cell {\r\n    white-space: nowrap;\r\n  }\r\n}\r\n","// ==================================================\r\n// GRID\r\n// ==================================================\r\n\r\n.row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-left: $grid-gutter / -2;\r\n  margin-right: $grid-gutter / -2;\r\n}\r\n\r\n.no-gutters {\r\n  margin-right: 0;\r\n  margin-left: 0;\r\n\r\n  > .col,\r\n  > [class*='col-'] {\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n  }\r\n}\r\n\r\n@include make-grid-columns();\r\n\r\n// xsmall: 0,\r\n// small:  600px\r\n// medium: 960px\r\n// large:  1280px\r\n// xlarge: 1920px\r\n\r\n@each $breakpoint, $infix in $breakpoint-infixs {\r\n  @if ($breakpoint== 'xsmall') {\r\n    @include loop-grid-columns($grid-columns, $infix);\r\n  }\r\n\r\n  @else {\r\n    @include bp-gt($breakpoint) {\r\n      @include loop-grid-columns($grid-columns, $infix);\r\n    }\r\n  }\r\n}\r\n","@mixin make-grid-columns($i: 1, $list: '.col') {\r\n  @each $breakpoint, $infix in $breakpoint-infixs {\r\n    $infix: if($infix == '', '', '-#{$infix}');\r\n\r\n    @if ($infix != '') {\r\n      $list: '#{$list}, .col#{$infix}';\r\n    }\r\n\r\n    @for $i from 1 through $grid-columns {\r\n      $list: '#{$list}, .col#{$infix}-#{$i}';\r\n    }\r\n  }\r\n\r\n  #{$list} {\r\n    position: relative;\r\n    width: 100%;\r\n    padding-left: $grid-gutter / 2;\r\n    padding-right: $grid-gutter / 2;\r\n  }\r\n}\r\n\r\n@mixin loop-grid-columns($columns: $grid-columns, $breakpoint-infix: '') {\r\n  $infix: if($breakpoint-infix == '', '', '-#{$breakpoint-infix}');\r\n\r\n  .col#{$infix} {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%;\r\n  }\r\n\r\n  @for $i from 1 through $columns {\r\n    .col#{$infix}-#{$i} {\r\n      flex: 0 0 percentage($i / $columns);\r\n      max-width: percentage($i / $columns);\r\n    }\r\n\r\n    .offset#{$infix}-#{$i} {\r\n      margin-left: percentage($i / $columns);\r\n    }\r\n  }\r\n}\r\n","//  Media Queries\r\n\r\n@function bp($name, $breakpoints: $breakpoints) {\r\n  $min: map-get($breakpoints, $name);\r\n\r\n  @return $min;\r\n}\r\n\r\n// Media of at least the minimum breakpoint width.\r\n@mixin bp-gt($name, $breakpoints: $breakpoints) {\r\n  $min: bp($name, $breakpoints);\r\n\r\n  @if $min {\r\n    @media (min-width: $min) {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media of at most the maximum breakpoint width.\r\n@mixin bp-lt($name, $breakpoints: $breakpoints) {\r\n  $max: bp($name, $breakpoints) - 1px;\r\n\r\n  @if $max {\r\n    @media (max-width: $max) {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  @else {\r\n    @content;\r\n  }\r\n}\r\n","// Icon\r\n\r\n.icon-20 {\r\n  @include icon(20);\r\n}\r\n\r\n.icon-24 {\r\n  @include icon(24);\r\n}\r\n\r\n.icon-36 {\r\n  @include icon(36);\r\n}\r\n\r\n.icon-48 {\r\n  @include icon(48);\r\n}\r\n","@mixin icon($size) {\r\n  width: $size * 1px !important;\r\n  height: $size * 1px !important;\r\n  font-size: $size * 1px !important;\r\n  line-height: $size * 1px !important;\r\n}\r\n","// Generate Helpers\r\n\r\n@each $key, $utility in $utilities {\r\n  $values: map-get($utility, values);\r\n\r\n  // If the values are a list or string, convert it into a map\r\n  @if type-of($values) == \"string\" or type-of(nth($values, 1)) != \"list\" {\r\n    $values: zip($values, $values);\r\n  }\r\n\r\n  $properties: map-get($utility, property);\r\n  $property-class-prefix: map-get($utility, class);\r\n\r\n  // Utility class maybe empty, (e.g. with position class)\r\n  $property-class-prefix-hyphen: if(\r\n    $property-class-prefix == '',\r\n    $property-class-prefix,\r\n    $property-class-prefix + '-'\r\n  );\r\n\r\n  @each $class-modifier, $value in $values {\r\n    .#{$property-class-prefix-hyphen + $class-modifier} {\r\n      @each $property in $properties {\r\n        #{$property}: $value !important;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/* based on angular-toastr css https://github.com/Foxandxss/angular-toastr/blob/cb508fe6801d6b288d3afc525bb40fee1b101650/dist/angular-toastr.css */\n\n/* position */\n.toast-center-center {\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n.toast-top-center {\n  top: 0;\n  right: 0;\n  width: 100%;\n}\n.toast-bottom-center {\n  bottom: 0;\n  right: 0;\n  width: 100%;\n}\n.toast-top-full-width {\n  top: 0;\n  right: 0;\n  width: 100%;\n}\n.toast-bottom-full-width {\n  bottom: 0;\n  right: 0;\n  width: 100%;\n}\n.toast-top-left {\n  top: 12px;\n  left: 12px;\n}\n.toast-top-right {\n  top: 12px;\n  right: 12px;\n}\n.toast-bottom-right {\n  right: 12px;\n  bottom: 12px;\n}\n.toast-bottom-left {\n  bottom: 12px;\n  left: 12px;\n}\n\n/* toast styles */\n.toast-title {\n  font-weight: bold;\n}\n.toast-message {\n  word-wrap: break-word;\n}\n.toast-message a,\n.toast-message label {\n  color: #FFFFFF;\n}\n.toast-message a:hover {\n  color: #CCCCCC;\n  text-decoration: none;\n}\n.toast-close-button {\n  position: relative;\n  right: -0.3em;\n  top: -0.3em;\n  float: right;\n  font-size: 20px;\n  font-weight: bold;\n  color: #FFFFFF;\n  text-shadow: 0 1px 0 #ffffff;\n  /* opacity: 0.8; */\n}\n.toast-close-button:hover,\n.toast-close-button:focus {\n  color: #000000;\n  text-decoration: none;\n  cursor: pointer;\n  opacity: 0.4;\n}\n/*Additional properties for button version\n iOS requires the button element instead of an anchor tag.\n If you want the anchor version, it requires `href=\"#\"`.*/\nbutton.toast-close-button {\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n}\n.toast-container {\n  pointer-events: none;\n  position: fixed;\n  z-index: 999999;\n}\n.toast-container * {\n  box-sizing: border-box;\n}\n.toast-container .ngx-toastr {\n  position: relative;\n  overflow: hidden;\n  margin: 0 0 6px;\n  padding: 15px 15px 15px 50px;\n  width: 300px;\n  border-radius: 3px 3px 3px 3px;\n  background-position: 15px center;\n  background-repeat: no-repeat;\n  background-size: 24px;\n  box-shadow: 0 0 12px #999999;\n  color: #FFFFFF;\n}\n.toast-container .ngx-toastr:hover {\n  box-shadow: 0 0 12px #000000;\n  opacity: 1;\n  cursor: pointer;\n}\n/* https://github.com/FortAwesome/Font-Awesome-Pro/blob/master/advanced-options/raw-svg/regular/info-circle.svg */\n.toast-info {\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' width='512' height='512'%3E%3Cpath fill='rgb(255,255,255)' d='M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z'/%3E%3C/svg%3E\");\n}\n/* https://github.com/FortAwesome/Font-Awesome-Pro/blob/master/advanced-options/raw-svg/regular/times-circle.svg */\n.toast-error {\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' width='512' height='512'%3E%3Cpath fill='rgb(255,255,255)' d='M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z'/%3E%3C/svg%3E\");\n}\n/* https://github.com/FortAwesome/Font-Awesome-Pro/blob/master/advanced-options/raw-svg/regular/check.svg */\n.toast-success {\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' width='512' height='512'%3E%3Cpath fill='rgb(255,255,255)' d='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'/%3E%3C/svg%3E\");\n}\n/* https://github.com/FortAwesome/Font-Awesome-Pro/blob/master/advanced-options/raw-svg/regular/exclamation-triangle.svg */\n.toast-warning {\n  background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 576 512' width='576' height='512'%3E%3Cpath fill='rgb(255,255,255)' d='M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z'/%3E%3C/svg%3E\");\n}\n.toast-container.toast-top-center .ngx-toastr,\n.toast-container.toast-bottom-center .ngx-toastr {\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n}\n.toast-container.toast-top-full-width .ngx-toastr,\n.toast-container.toast-bottom-full-width .ngx-toastr {\n  width: 96%;\n  margin-left: auto;\n  margin-right: auto;\n}\n.ngx-toastr {\n  background-color: #030303;\n  pointer-events: auto;\n}\n.toast-success {\n  background-color: #51A351;\n}\n.toast-error {\n  background-color: #BD362F;\n}\n.toast-info {\n  background-color: #2F96B4;\n}\n.toast-warning {\n  background-color: #F89406;\n}\n.toast-progress {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  height: 4px;\n  background-color: #000000;\n  opacity: 0.4;\n}\n/* Responsive Design */\n@media all and (max-width: 240px) {\n  .toast-container .ngx-toastr.div {\n    padding: 8px 8px 8px 50px;\n    width: 11em;\n  }\n  .toast-container .toast-close-button {\n    right: -0.2em;\n    top: -0.2em;\n  }\n}\n@media all and (min-width: 241px) and (max-width: 480px) {\n  .toast-container .ngx-toastr.div {\n    padding: 8px 8px 8px 50px;\n    width: 18em;\n  }\n  .toast-container .toast-close-button {\n    right: -0.2em;\n    top: -0.2em;\n  }\n}\n@media all and (min-width: 481px) and (max-width: 768px) {\n  .toast-container .ngx-toastr.div {\n    padding: 15px 15px 15px 50px;\n    width: 25em;\n  }\n}\n","@import '~ngx-toastr/toastr';\r\n\r\n.toast-container {\r\n  .ngx-toastr {\r\n    min-height: 48px;\r\n    padding: 14px 16px;\r\n    border-radius: 4px;\r\n    color: rgba(255, 255, 255, .7);\r\n    background-color: #323232;\r\n\r\n    @include mat-elevation(6);\r\n\r\n    &:hover {\r\n      @include mat-elevation(10);\r\n    }\r\n  }\r\n\r\n  .toast-success,\r\n  .toast-info,\r\n  .toast-warning,\r\n  .toast-error {\r\n    padding-left: 50px;\r\n    color: #fff;\r\n  }\r\n\r\n  .toast-info {\r\n    background-color: mat-color($mat-blue, 500);\r\n  }\r\n\r\n  .toast-success {\r\n    background-color: mat-color($mat-green, 500);\r\n  }\r\n\r\n  .toast-warning {\r\n    background-color: mat-color($mat-orange, 500);\r\n  }\r\n\r\n  .toast-error {\r\n    background-color: mat-color($mat-red, 500);\r\n  }\r\n\r\n  .toast-close-button {\r\n    font-size: inherit;\r\n    text-shadow: 0 1px 0 rgba(0, 0, 0, .25);\r\n\r\n    &:hover {\r\n      color: inherit;\r\n      opacity: .6;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}